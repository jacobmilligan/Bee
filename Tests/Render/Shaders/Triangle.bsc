BlendState TriangleBlendState
{
    blend_enabled: false
    color_write_mask: all
}

Shader TriangleShader
{
    vertex: vert
    fragment: frag
    code:
    {
        BEE_PUSH_CONSTANT struct PushConstant
        {
            float time;
            float dt;
        } push_constant;

        struct AppData
        {
            float4 position: POSITION0;
            float4 color: COLOR0;
        };

        struct FragIn
        {
            float4 position: SV_POSITION;
            float4 color: COLOR0;
        };

        FragIn vert(AppData IN)
        {
            float cos_time = cos(push_constant.time);
            float sin_time = sin(push_constant.time);

            FragIn OUT;
            OUT.color = IN.color;
            OUT.position = float4(
                (IN.position.x * cos_time) - (IN.position.y * sin_time),
                (IN.position.x * sin_time) + (IN.position.y * cos_time), 
                abs(sin_time), 
                1.0
            );
            OUT.position.x += lerp(0.0, 0.3, sin_time);
            OUT.position.y += lerp(0.0, 0.3, cos_time);
            // OUT.position.x = max(OUT.position.x + cos_time, 0.1);
            // OUT.position.y = max(OUT.position.y + sin_time + cos_time, 0.1);
            return OUT;
        }

        float4 frag(FragIn IN) : SV_TARGET
        {
            return IN.color;
        }
    }
}

PipelineState TrianglePipeline 
{
    primitive_type: triangle
    vertex_stage: TriangleShader
    fragment_stage: TriangleShader
    color_blend_states: [ TriangleBlendState ]
}