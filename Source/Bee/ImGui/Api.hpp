/*
*  This file was generated by the bee-imgui-generator tool. DO NOT EDIT DIRECTLY.
*
*  Generated on: 2021-01-10 03:00:11
*/

#include <stdio.h>
#include <stdint.h>

#ifdef BEE_IMGUI_GENERATOR_IMPLEMENTATION
#define CIMGUI_DEFINE_ENUMS_AND_STRUCTS
#include <cimgui.h>
#endif // BEE_IMGUI_GENERATOR_IMPLEMENTATION

#ifndef BEE_IMGUI_GENERATOR_IMPLEMENTATION
typedef struct ImGuiTableColumnSettings ImGuiTableColumnSettings;
typedef struct ImGuiTableCellData ImGuiTableCellData;
typedef struct ImGuiViewportP ImGuiViewportP;
typedef struct ImGuiPtrOrIndex ImGuiPtrOrIndex;
typedef struct ImGuiShrinkWidthItem ImGuiShrinkWidthItem;
typedef struct ImGuiDataTypeTempStorage ImGuiDataTypeTempStorage;
typedef struct ImVec2ih ImVec2ih;
typedef struct ImVec1 ImVec1;
typedef struct StbTexteditRow StbTexteditRow;
typedef struct STB_TexteditState STB_TexteditState;
typedef struct StbUndoState StbUndoState;
typedef struct StbUndoRecord StbUndoRecord;
typedef struct ImGuiWindowSettings ImGuiWindowSettings;
typedef struct ImGuiWindowTempData ImGuiWindowTempData;
typedef struct ImGuiWindow ImGuiWindow;
typedef struct ImGuiTableColumnsSettings ImGuiTableColumnsSettings;
typedef struct ImGuiTableSettings ImGuiTableSettings;
typedef struct ImGuiTableColumn ImGuiTableColumn;
typedef struct ImGuiTable ImGuiTable;
typedef struct ImGuiTabItem ImGuiTabItem;
typedef struct ImGuiTabBar ImGuiTabBar;
typedef struct ImGuiStyleMod ImGuiStyleMod;
typedef struct ImGuiStackSizes ImGuiStackSizes;
typedef struct ImGuiSettingsHandler ImGuiSettingsHandler;
typedef struct ImGuiPopupData ImGuiPopupData;
typedef struct ImGuiOldColumns ImGuiOldColumns;
typedef struct ImGuiOldColumnData ImGuiOldColumnData;
typedef struct ImGuiNextItemData ImGuiNextItemData;
typedef struct ImGuiNextWindowData ImGuiNextWindowData;
typedef struct ImGuiMetricsConfig ImGuiMetricsConfig;
typedef struct ImGuiNavMoveResult ImGuiNavMoveResult;
typedef struct ImGuiMenuColumns ImGuiMenuColumns;
typedef struct ImGuiLastItemDataBackup ImGuiLastItemDataBackup;
typedef struct ImGuiInputTextState ImGuiInputTextState;
typedef struct ImGuiGroupData ImGuiGroupData;
typedef struct ImGuiDockNodeSettings ImGuiDockNodeSettings;
typedef struct ImGuiDockNode ImGuiDockNode;
typedef struct ImGuiDockRequest ImGuiDockRequest;
typedef struct ImGuiDockContext ImGuiDockContext;
typedef struct ImGuiDataTypeInfo ImGuiDataTypeInfo;
typedef struct ImGuiContextHook ImGuiContextHook;
typedef struct ImGuiColorMod ImGuiColorMod;
typedef struct ImDrawDataBuilder ImDrawDataBuilder;
typedef struct ImRect ImRect;
typedef struct ImBitVector ImBitVector;
typedef struct ImFontAtlasCustomRect ImFontAtlasCustomRect;
typedef struct ImDrawCmdHeader ImDrawCmdHeader;
typedef struct ImGuiStoragePair ImGuiStoragePair;
typedef struct ImGuiTextRange ImGuiTextRange;
typedef struct ImVec4 ImVec4;
typedef struct ImVec2 ImVec2;
typedef struct ImGuiWindowClass ImGuiWindowClass;
typedef struct ImGuiViewport ImGuiViewport;
typedef struct ImGuiTextFilter ImGuiTextFilter;
typedef struct ImGuiTextBuffer ImGuiTextBuffer;
typedef struct ImGuiTableColumnSortSpecs ImGuiTableColumnSortSpecs;
typedef struct ImGuiTableSortSpecs ImGuiTableSortSpecs;
typedef struct ImGuiStyle ImGuiStyle;
typedef struct ImGuiStorage ImGuiStorage;
typedef struct ImGuiSizeCallbackData ImGuiSizeCallbackData;
typedef struct ImGuiPlatformMonitor ImGuiPlatformMonitor;
typedef struct ImGuiPlatformIO ImGuiPlatformIO;
typedef struct ImGuiPayload ImGuiPayload;
typedef struct ImGuiOnceUponAFrame ImGuiOnceUponAFrame;
typedef struct ImGuiListClipper ImGuiListClipper;
typedef struct ImGuiInputTextCallbackData ImGuiInputTextCallbackData;
typedef struct ImGuiIO ImGuiIO;
typedef struct ImGuiContext ImGuiContext;
typedef struct ImColor ImColor;
typedef struct ImFontGlyphRangesBuilder ImFontGlyphRangesBuilder;
typedef struct ImFontGlyph ImFontGlyph;
typedef struct ImFontConfig ImFontConfig;
typedef struct ImFontAtlas ImFontAtlas;
typedef struct ImFont ImFont;
typedef struct ImDrawVert ImDrawVert;
typedef struct ImDrawListSplitter ImDrawListSplitter;
typedef struct ImDrawListSharedData ImDrawListSharedData;
typedef struct ImDrawList ImDrawList;
typedef struct ImDrawData ImDrawData;
typedef struct ImDrawCmd ImDrawCmd;
typedef struct ImDrawChannel ImDrawChannel;

struct ImDrawChannel;
struct ImDrawCmd;
struct ImDrawData;
struct ImDrawList;
struct ImDrawListSharedData;
struct ImDrawListSplitter;
struct ImDrawVert;
struct ImFont;
struct ImFontAtlas;
struct ImFontConfig;
struct ImFontGlyph;
struct ImFontGlyphRangesBuilder;
struct ImColor;
struct ImGuiContext;
struct ImGuiIO;
struct ImGuiInputTextCallbackData;
struct ImGuiListClipper;
struct ImGuiOnceUponAFrame;
struct ImGuiPayload;
struct ImGuiPlatformIO;
struct ImGuiPlatformMonitor;
struct ImGuiSizeCallbackData;
struct ImGuiStorage;
struct ImGuiStyle;
struct ImGuiTableSortSpecs;
struct ImGuiTableColumnSortSpecs;
struct ImGuiTextBuffer;
struct ImGuiTextFilter;
struct ImGuiViewport;
struct ImGuiWindowClass;
typedef int ImGuiCol;
typedef int ImGuiCond;
typedef int ImGuiDataType;
typedef int ImGuiDir;
typedef int ImGuiKey;
typedef int ImGuiNavInput;
typedef int ImGuiMouseButton;
typedef int ImGuiMouseCursor;
typedef int ImGuiSortDirection;
typedef int ImGuiStyleVar;
typedef int ImGuiTableBgTarget;
typedef int ImDrawCornerFlags;
typedef int ImDrawListFlags;
typedef int ImFontAtlasFlags;
typedef int ImGuiBackendFlags;
typedef int ImGuiButtonFlags;
typedef int ImGuiColorEditFlags;
typedef int ImGuiConfigFlags;
typedef int ImGuiComboFlags;
typedef int ImGuiDockNodeFlags;
typedef int ImGuiDragDropFlags;
typedef int ImGuiFocusedFlags;
typedef int ImGuiHoveredFlags;
typedef int ImGuiInputTextFlags;
typedef int ImGuiKeyModFlags;
typedef int ImGuiPopupFlags;
typedef int ImGuiSelectableFlags;
typedef int ImGuiSliderFlags;
typedef int ImGuiTabBarFlags;
typedef int ImGuiTabItemFlags;
typedef int ImGuiTableFlags;
typedef int ImGuiTableColumnFlags;
typedef int ImGuiTableRowFlags;
typedef int ImGuiTreeNodeFlags;
typedef int ImGuiViewportFlags;
typedef int ImGuiWindowFlags;
typedef void* ImTextureID;
typedef unsigned int ImGuiID;
typedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);
typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);
typedef unsigned short ImWchar16;
typedef unsigned int ImWchar32;
typedef ImWchar16 ImWchar;
typedef signed char         ImS8;
typedef unsigned char       ImU8;
typedef signed short        ImS16;
typedef unsigned short      ImU16;
typedef signed int          ImS32;
typedef unsigned int        ImU32;
typedef signed   __int64    ImS64;
typedef unsigned __int64    ImU64;
typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);
typedef unsigned short ImDrawIdx;
struct ImBitVector;
struct ImRect;
struct ImDrawDataBuilder;
struct ImDrawListSharedData;
struct ImGuiColorMod;
struct ImGuiContext;
struct ImGuiContextHook;
struct ImGuiDataTypeInfo;
struct ImGuiDockContext;
struct ImGuiDockRequest;
struct ImGuiDockNode;
struct ImGuiDockNodeSettings;
struct ImGuiGroupData;
struct ImGuiInputTextState;
struct ImGuiLastItemDataBackup;
struct ImGuiMenuColumns;
struct ImGuiNavMoveResult;
struct ImGuiMetricsConfig;
struct ImGuiNextWindowData;
struct ImGuiNextItemData;
struct ImGuiOldColumnData;
struct ImGuiOldColumns;
struct ImGuiPopupData;
struct ImGuiSettingsHandler;
struct ImGuiStackSizes;
struct ImGuiStyleMod;
struct ImGuiTabBar;
struct ImGuiTabItem;
struct ImGuiTable;
struct ImGuiTableColumn;
struct ImGuiTableSettings;
struct ImGuiTableColumnsSettings;
struct ImGuiWindow;
struct ImGuiWindowTempData;
struct ImGuiWindowSettings;
typedef int ImGuiDataAuthority;
typedef int ImGuiLayoutType;
typedef int ImGuiItemFlags;
typedef int ImGuiItemStatusFlags;
typedef int ImGuiOldColumnFlags;
typedef int ImGuiNavHighlightFlags;
typedef int ImGuiNavDirSourceFlags;
typedef int ImGuiNavMoveFlags;
typedef int ImGuiNextItemDataFlags;
typedef int ImGuiNextWindowDataFlags;
typedef int ImGuiSeparatorFlags;
typedef int ImGuiTextFlags;
typedef int ImGuiTooltipFlags;
typedef void (*ImGuiErrorLogCallback)(void* user_data, const char* fmt, ...);
extern  ImGuiContext* GImGui;
typedef FILE* ImFileHandle;
typedef int ImPoolIdx;
typedef void (*ImGuiContextHookCallback)(ImGuiContext* ctx, ImGuiContextHook* hook);
typedef ImS8 ImGuiTableColumnIdx;
typedef ImU8 ImGuiTableDrawChannelIdx;
typedef struct ImVector{int Size;int Capacity;void* Data;} ImVector;
typedef struct ImVector_ImGuiTableSettings {int Size;int Capacity;ImGuiTableSettings* Data;} ImVector_ImGuiTableSettings;
typedef struct ImChunkStream_ImGuiTableSettings {ImVector_ImGuiTableSettings Buf;} ImChunkStream_ImGuiTableSettings;
typedef struct ImVector_ImGuiWindowSettings {int Size;int Capacity;ImGuiWindowSettings* Data;} ImVector_ImGuiWindowSettings;
typedef struct ImChunkStream_ImGuiWindowSettings {ImVector_ImGuiWindowSettings Buf;} ImChunkStream_ImGuiWindowSettings;
typedef struct ImSpan_ImGuiTableCellData {ImGuiTableCellData* Data;ImGuiTableCellData* DataEnd;} ImSpan_ImGuiTableCellData;
typedef struct ImSpan_ImGuiTableColumn {ImGuiTableColumn* Data;ImGuiTableColumn* DataEnd;} ImSpan_ImGuiTableColumn;
typedef struct ImSpan_ImGuiTableColumnIdx {ImGuiTableColumnIdx* Data;ImGuiTableColumnIdx* DataEnd;} ImSpan_ImGuiTableColumnIdx;
typedef struct ImVector_ImDrawChannel {int Size;int Capacity;ImDrawChannel* Data;} ImVector_ImDrawChannel;
typedef struct ImVector_ImDrawCmd {int Size;int Capacity;ImDrawCmd* Data;} ImVector_ImDrawCmd;
typedef struct ImVector_ImDrawIdx {int Size;int Capacity;ImDrawIdx* Data;} ImVector_ImDrawIdx;
typedef struct ImVector_ImDrawListPtr {int Size;int Capacity;ImDrawList** Data;} ImVector_ImDrawListPtr;
typedef struct ImVector_ImDrawVert {int Size;int Capacity;ImDrawVert* Data;} ImVector_ImDrawVert;
typedef struct ImVector_ImFontPtr {int Size;int Capacity;ImFont** Data;} ImVector_ImFontPtr;
typedef struct ImVector_ImFontAtlasCustomRect {int Size;int Capacity;ImFontAtlasCustomRect* Data;} ImVector_ImFontAtlasCustomRect;
typedef struct ImVector_ImFontConfig {int Size;int Capacity;ImFontConfig* Data;} ImVector_ImFontConfig;
typedef struct ImVector_ImFontGlyph {int Size;int Capacity;ImFontGlyph* Data;} ImVector_ImFontGlyph;
typedef struct ImVector_ImGuiColorMod {int Size;int Capacity;ImGuiColorMod* Data;} ImVector_ImGuiColorMod;
typedef struct ImVector_ImGuiContextHook {int Size;int Capacity;ImGuiContextHook* Data;} ImVector_ImGuiContextHook;
typedef struct ImVector_ImGuiDockNodeSettings {int Size;int Capacity;ImGuiDockNodeSettings* Data;} ImVector_ImGuiDockNodeSettings;
typedef struct ImVector_ImGuiDockRequest {int Size;int Capacity;ImGuiDockRequest* Data;} ImVector_ImGuiDockRequest;
typedef struct ImVector_ImGuiGroupData {int Size;int Capacity;ImGuiGroupData* Data;} ImVector_ImGuiGroupData;
typedef struct ImVector_ImGuiID {int Size;int Capacity;ImGuiID* Data;} ImVector_ImGuiID;
typedef struct ImVector_ImGuiItemFlags {int Size;int Capacity;ImGuiItemFlags* Data;} ImVector_ImGuiItemFlags;
typedef struct ImVector_ImGuiOldColumnData {int Size;int Capacity;ImGuiOldColumnData* Data;} ImVector_ImGuiOldColumnData;
typedef struct ImVector_ImGuiOldColumns {int Size;int Capacity;ImGuiOldColumns* Data;} ImVector_ImGuiOldColumns;
typedef struct ImVector_ImGuiPlatformMonitor {int Size;int Capacity;ImGuiPlatformMonitor* Data;} ImVector_ImGuiPlatformMonitor;
typedef struct ImVector_ImGuiPopupData {int Size;int Capacity;ImGuiPopupData* Data;} ImVector_ImGuiPopupData;
typedef struct ImVector_ImGuiPtrOrIndex {int Size;int Capacity;ImGuiPtrOrIndex* Data;} ImVector_ImGuiPtrOrIndex;
typedef struct ImVector_ImGuiSettingsHandler {int Size;int Capacity;ImGuiSettingsHandler* Data;} ImVector_ImGuiSettingsHandler;
typedef struct ImVector_ImGuiShrinkWidthItem {int Size;int Capacity;ImGuiShrinkWidthItem* Data;} ImVector_ImGuiShrinkWidthItem;
typedef struct ImVector_ImGuiStoragePair {int Size;int Capacity;ImGuiStoragePair* Data;} ImVector_ImGuiStoragePair;
typedef struct ImVector_ImGuiStyleMod {int Size;int Capacity;ImGuiStyleMod* Data;} ImVector_ImGuiStyleMod;
typedef struct ImVector_ImGuiTabItem {int Size;int Capacity;ImGuiTabItem* Data;} ImVector_ImGuiTabItem;
typedef struct ImVector_ImGuiTableColumnSortSpecs {int Size;int Capacity;ImGuiTableColumnSortSpecs* Data;} ImVector_ImGuiTableColumnSortSpecs;
typedef struct ImVector_ImGuiTextRange {int Size;int Capacity;ImGuiTextRange* Data;} ImVector_ImGuiTextRange;
typedef struct ImVector_ImGuiViewportPtr {int Size;int Capacity;ImGuiViewport** Data;} ImVector_ImGuiViewportPtr;
typedef struct ImVector_ImGuiViewportPPtr {int Size;int Capacity;ImGuiViewportP** Data;} ImVector_ImGuiViewportPPtr;
typedef struct ImVector_ImGuiWindowPtr {int Size;int Capacity;ImGuiWindow** Data;} ImVector_ImGuiWindowPtr;
typedef struct ImVector_ImTextureID {int Size;int Capacity;ImTextureID* Data;} ImVector_ImTextureID;
typedef struct ImVector_ImU32 {int Size;int Capacity;ImU32* Data;} ImVector_ImU32;
typedef struct ImVector_ImVec2 {int Size;int Capacity;ImVec2* Data;} ImVector_ImVec2;
typedef struct ImVector_ImVec4 {int Size;int Capacity;ImVec4* Data;} ImVector_ImVec4;
typedef struct ImVector_ImWchar {int Size;int Capacity;ImWchar* Data;} ImVector_ImWchar;
typedef struct ImVector_char {int Size;int Capacity;char* Data;} ImVector_char;
typedef struct ImVector_const_charPtr {int Size;int Capacity;const char** Data;} ImVector_const_charPtr;
typedef struct ImVector_float {int Size;int Capacity;float* Data;} ImVector_float;
typedef struct ImVector_unsigned_char {int Size;int Capacity;unsigned char* Data;} ImVector_unsigned_char;

struct ImVec2
{
    float                                   x, y;
};
struct ImVec4
{
    float                                           x, y, z, w;
};
typedef enum {
    ImGuiWindowFlags_None                   = 0,
    ImGuiWindowFlags_NoTitleBar             = 1 << 0,
    ImGuiWindowFlags_NoResize               = 1 << 1,
    ImGuiWindowFlags_NoMove                 = 1 << 2,
    ImGuiWindowFlags_NoScrollbar            = 1 << 3,
    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,
    ImGuiWindowFlags_NoCollapse             = 1 << 5,
    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,
    ImGuiWindowFlags_NoBackground           = 1 << 7,
    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,
    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,
    ImGuiWindowFlags_MenuBar                = 1 << 10,
    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,
    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,
    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,
    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,
    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,
    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,
    ImGuiWindowFlags_NoNavInputs            = 1 << 18,
    ImGuiWindowFlags_NoNavFocus             = 1 << 19,
    ImGuiWindowFlags_UnsavedDocument        = 1 << 20,
    ImGuiWindowFlags_NoDocking              = 1 << 21,
    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    ImGuiWindowFlags_NavFlattened           = 1 << 23,
    ImGuiWindowFlags_ChildWindow            = 1 << 24,
    ImGuiWindowFlags_Tooltip                = 1 << 25,
    ImGuiWindowFlags_Popup                  = 1 << 26,
    ImGuiWindowFlags_Modal                  = 1 << 27,
    ImGuiWindowFlags_ChildMenu              = 1 << 28,
    ImGuiWindowFlags_DockNodeHost           = 1 << 29
}ImGuiWindowFlags_;
typedef enum {
    ImGuiInputTextFlags_None                = 0,
    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,
    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,
    ImGuiInputTextFlags_CharsUppercase      = 1 << 2,
    ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,
    ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,
    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,
    ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,
    ImGuiInputTextFlags_CallbackHistory     = 1 << 7,
    ImGuiInputTextFlags_CallbackAlways      = 1 << 8,
    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,
    ImGuiInputTextFlags_AllowTabInput       = 1 << 10,
    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,
    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,
    ImGuiInputTextFlags_AlwaysInsertMode    = 1 << 13,
    ImGuiInputTextFlags_ReadOnly            = 1 << 14,
    ImGuiInputTextFlags_Password            = 1 << 15,
    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,
    ImGuiInputTextFlags_CharsScientific     = 1 << 17,
    ImGuiInputTextFlags_CallbackResize      = 1 << 18,
    ImGuiInputTextFlags_CallbackEdit        = 1 << 19,
    ImGuiInputTextFlags_Multiline           = 1 << 20,
    ImGuiInputTextFlags_NoMarkEdited        = 1 << 21
}ImGuiInputTextFlags_;
typedef enum {
    ImGuiTreeNodeFlags_None                 = 0,
    ImGuiTreeNodeFlags_Selected             = 1 << 0,
    ImGuiTreeNodeFlags_Framed               = 1 << 1,
    ImGuiTreeNodeFlags_AllowItemOverlap     = 1 << 2,
    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,
    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,
    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,
    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,
    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,
    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,
    ImGuiTreeNodeFlags_Bullet               = 1 << 9,
    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,
    ImGuiTreeNodeFlags_SpanAvailWidth       = 1 << 11,
    ImGuiTreeNodeFlags_SpanFullWidth        = 1 << 12,
    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,
    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog
}ImGuiTreeNodeFlags_;
typedef enum {
    ImGuiPopupFlags_None                    = 0,
    ImGuiPopupFlags_MouseButtonLeft         = 0,
    ImGuiPopupFlags_MouseButtonRight        = 1,
    ImGuiPopupFlags_MouseButtonMiddle       = 2,
    ImGuiPopupFlags_MouseButtonMask_        = 0x1F,
    ImGuiPopupFlags_MouseButtonDefault_     = 1,
    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 5,
    ImGuiPopupFlags_NoOpenOverItems         = 1 << 6,
    ImGuiPopupFlags_AnyPopupId              = 1 << 7,
    ImGuiPopupFlags_AnyPopupLevel           = 1 << 8,
    ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel
}ImGuiPopupFlags_;
typedef enum {
    ImGuiSelectableFlags_None               = 0,
    ImGuiSelectableFlags_DontClosePopups    = 1 << 0,
    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,
    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,
    ImGuiSelectableFlags_Disabled           = 1 << 3,
    ImGuiSelectableFlags_AllowItemOverlap   = 1 << 4
}ImGuiSelectableFlags_;
typedef enum {
    ImGuiComboFlags_None                    = 0,
    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,
    ImGuiComboFlags_HeightSmall             = 1 << 1,
    ImGuiComboFlags_HeightRegular           = 1 << 2,
    ImGuiComboFlags_HeightLarge             = 1 << 3,
    ImGuiComboFlags_HeightLargest           = 1 << 4,
    ImGuiComboFlags_NoArrowButton           = 1 << 5,
    ImGuiComboFlags_NoPreview               = 1 << 6,
    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest
}ImGuiComboFlags_;
typedef enum {
    ImGuiTabBarFlags_None                           = 0,
    ImGuiTabBarFlags_Reorderable                    = 1 << 0,
    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,
    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,
    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,
    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,
    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,
    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 6,
    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 7,
    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,
    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown
}ImGuiTabBarFlags_;
typedef enum {
    ImGuiTabItemFlags_None                          = 0,
    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,
    ImGuiTabItemFlags_SetSelected                   = 1 << 1,
    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,
    ImGuiTabItemFlags_NoPushId                      = 1 << 3,
    ImGuiTabItemFlags_NoTooltip                     = 1 << 4,
    ImGuiTabItemFlags_NoReorder                     = 1 << 5,
    ImGuiTabItemFlags_Leading                       = 1 << 6,
    ImGuiTabItemFlags_Trailing                      = 1 << 7
}ImGuiTabItemFlags_;
typedef enum {
    ImGuiTableFlags_None                            = 0,
    ImGuiTableFlags_Resizable                       = 1 << 0,
    ImGuiTableFlags_Reorderable                     = 1 << 1,
    ImGuiTableFlags_Hideable                        = 1 << 2,
    ImGuiTableFlags_Sortable                        = 1 << 3,
    ImGuiTableFlags_NoSavedSettings                 = 1 << 4,
    ImGuiTableFlags_ContextMenuInBody               = 1 << 5,
    ImGuiTableFlags_RowBg                           = 1 << 6,
    ImGuiTableFlags_BordersInnerH                   = 1 << 7,
    ImGuiTableFlags_BordersOuterH                   = 1 << 8,
    ImGuiTableFlags_BordersInnerV                   = 1 << 9,
    ImGuiTableFlags_BordersOuterV                   = 1 << 10,
    ImGuiTableFlags_BordersH                        = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersOuterH,
    ImGuiTableFlags_BordersV                        = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersOuterV,
    ImGuiTableFlags_BordersInner                    = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInnerH,
    ImGuiTableFlags_BordersOuter                    = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags_BordersOuterH,
    ImGuiTableFlags_Borders                         = ImGuiTableFlags_BordersInner | ImGuiTableFlags_BordersOuter,
    ImGuiTableFlags_NoBordersInBody                 = 1 << 11,
    ImGuiTableFlags_NoBordersInBodyUntilResize      = 1 << 12,
    ImGuiTableFlags_SizingPolicyFixed               = 1 << 13,
    ImGuiTableFlags_SizingPolicyStretch             = 1 << 14,
    ImGuiTableFlags_SameWidths                      = 1 << 15,
    ImGuiTableFlags_NoHostExtendY                   = 1 << 16,
    ImGuiTableFlags_NoKeepColumnsVisible            = 1 << 17,
    ImGuiTableFlags_PreciseWidths                   = 1 << 18,
    ImGuiTableFlags_NoClip                          = 1 << 19,
    ImGuiTableFlags_PadOuterX                       = 1 << 20,
    ImGuiTableFlags_NoPadOuterX                     = 1 << 21,
    ImGuiTableFlags_NoPadInnerX                     = 1 << 22,
    ImGuiTableFlags_ScrollX                         = 1 << 23,
    ImGuiTableFlags_ScrollY                         = 1 << 24,
    ImGuiTableFlags_SortMulti                       = 1 << 25,
    ImGuiTableFlags_SortTristate                    = 1 << 26
}ImGuiTableFlags_;
typedef enum {
    ImGuiTableColumnFlags_None                      = 0,
    ImGuiTableColumnFlags_DefaultHide               = 1 << 0,
    ImGuiTableColumnFlags_DefaultSort               = 1 << 1,
    ImGuiTableColumnFlags_WidthStretch              = 1 << 2,
    ImGuiTableColumnFlags_WidthFixed                = 1 << 3,
    ImGuiTableColumnFlags_WidthAuto                 = 1 << 4,
    ImGuiTableColumnFlags_NoResize                  = 1 << 5,
    ImGuiTableColumnFlags_NoReorder                 = 1 << 6,
    ImGuiTableColumnFlags_NoHide                    = 1 << 7,
    ImGuiTableColumnFlags_NoClip                    = 1 << 8,
    ImGuiTableColumnFlags_NoSort                    = 1 << 9,
    ImGuiTableColumnFlags_NoSortAscending           = 1 << 10,
    ImGuiTableColumnFlags_NoSortDescending          = 1 << 11,
    ImGuiTableColumnFlags_NoHeaderWidth             = 1 << 12,
    ImGuiTableColumnFlags_PreferSortAscending       = 1 << 13,
    ImGuiTableColumnFlags_PreferSortDescending      = 1 << 14,
    ImGuiTableColumnFlags_IndentEnable              = 1 << 15,
    ImGuiTableColumnFlags_IndentDisable             = 1 << 16,
    ImGuiTableColumnFlags_IsEnabled                 = 1 << 20,
    ImGuiTableColumnFlags_IsVisible                 = 1 << 21,
    ImGuiTableColumnFlags_IsSorted                  = 1 << 22,
    ImGuiTableColumnFlags_IsHovered                 = 1 << 23,
    ImGuiTableColumnFlags_WidthMask_                = ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_WidthFixed | ImGuiTableColumnFlags_WidthAuto,
    ImGuiTableColumnFlags_IndentMask_               = ImGuiTableColumnFlags_IndentEnable | ImGuiTableColumnFlags_IndentDisable,
    ImGuiTableColumnFlags_StatusMask_               = ImGuiTableColumnFlags_IsEnabled | ImGuiTableColumnFlags_IsVisible | ImGuiTableColumnFlags_IsSorted | ImGuiTableColumnFlags_IsHovered,
    ImGuiTableColumnFlags_NoDirectResize_           = 1 << 30
}ImGuiTableColumnFlags_;
typedef enum {
    ImGuiTableRowFlags_None                         = 0,
    ImGuiTableRowFlags_Headers                      = 1 << 0
}ImGuiTableRowFlags_;
typedef enum {
    ImGuiTableBgTarget_None                         = 0,
    ImGuiTableBgTarget_RowBg0                       = 1,
    ImGuiTableBgTarget_RowBg1                       = 2,
    ImGuiTableBgTarget_CellBg                       = 3
}ImGuiTableBgTarget_;
typedef enum {
    ImGuiFocusedFlags_None                          = 0,
    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,
    ImGuiFocusedFlags_RootWindow                    = 1 << 1,
    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,
    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows
}ImGuiFocusedFlags_;
typedef enum {
    ImGuiHoveredFlags_None                          = 0,
    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,
    ImGuiHoveredFlags_RootWindow                    = 1 << 1,
    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,
    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 3,
    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 5,
    ImGuiHoveredFlags_AllowWhenOverlapped           = 1 << 6,
    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 7,
    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows
}ImGuiHoveredFlags_;
typedef enum {
    ImGuiDockNodeFlags_None                         = 0,
    ImGuiDockNodeFlags_KeepAliveOnly                = 1 << 0,
    ImGuiDockNodeFlags_NoDockingInCentralNode       = 1 << 2,
    ImGuiDockNodeFlags_PassthruCentralNode          = 1 << 3,
    ImGuiDockNodeFlags_NoSplit                      = 1 << 4,
    ImGuiDockNodeFlags_NoResize                     = 1 << 5,
    ImGuiDockNodeFlags_AutoHideTabBar               = 1 << 6
}ImGuiDockNodeFlags_;
typedef enum {
    ImGuiDragDropFlags_None                         = 0,
    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,
    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,
    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,
    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,
    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,
    ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,
    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,
    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,
    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,
    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect
}ImGuiDragDropFlags_;
typedef enum {
    ImGuiDataType_S8,
    ImGuiDataType_U8,
    ImGuiDataType_S16,
    ImGuiDataType_U16,
    ImGuiDataType_S32,
    ImGuiDataType_U32,
    ImGuiDataType_S64,
    ImGuiDataType_U64,
    ImGuiDataType_Float,
    ImGuiDataType_Double,
    ImGuiDataType_COUNT
}ImGuiDataType_;
typedef enum {
    ImGuiDir_None    = -1,
    ImGuiDir_Left    = 0,
    ImGuiDir_Right   = 1,
    ImGuiDir_Up      = 2,
    ImGuiDir_Down    = 3,
    ImGuiDir_COUNT
}ImGuiDir_;
typedef enum {
    ImGuiSortDirection_None         = 0,
    ImGuiSortDirection_Ascending    = 1,
    ImGuiSortDirection_Descending   = 2
}ImGuiSortDirection_;
typedef enum {
    ImGuiKey_Tab,
    ImGuiKey_LeftArrow,
    ImGuiKey_RightArrow,
    ImGuiKey_UpArrow,
    ImGuiKey_DownArrow,
    ImGuiKey_PageUp,
    ImGuiKey_PageDown,
    ImGuiKey_Home,
    ImGuiKey_End,
    ImGuiKey_Insert,
    ImGuiKey_Delete,
    ImGuiKey_Backspace,
    ImGuiKey_Space,
    ImGuiKey_Enter,
    ImGuiKey_Escape,
    ImGuiKey_KeyPadEnter,
    ImGuiKey_A,
    ImGuiKey_C,
    ImGuiKey_V,
    ImGuiKey_X,
    ImGuiKey_Y,
    ImGuiKey_Z,
    ImGuiKey_COUNT
}ImGuiKey_;
typedef enum {
    ImGuiKeyModFlags_None       = 0,
    ImGuiKeyModFlags_Ctrl       = 1 << 0,
    ImGuiKeyModFlags_Shift      = 1 << 1,
    ImGuiKeyModFlags_Alt        = 1 << 2,
    ImGuiKeyModFlags_Super      = 1 << 3
}ImGuiKeyModFlags_;
typedef enum {
    ImGuiNavInput_Activate,
    ImGuiNavInput_Cancel,
    ImGuiNavInput_Input,
    ImGuiNavInput_Menu,
    ImGuiNavInput_DpadLeft,
    ImGuiNavInput_DpadRight,
    ImGuiNavInput_DpadUp,
    ImGuiNavInput_DpadDown,
    ImGuiNavInput_LStickLeft,
    ImGuiNavInput_LStickRight,
    ImGuiNavInput_LStickUp,
    ImGuiNavInput_LStickDown,
    ImGuiNavInput_FocusPrev,
    ImGuiNavInput_FocusNext,
    ImGuiNavInput_TweakSlow,
    ImGuiNavInput_TweakFast,
    ImGuiNavInput_KeyMenu_,
    ImGuiNavInput_KeyLeft_,
    ImGuiNavInput_KeyRight_,
    ImGuiNavInput_KeyUp_,
    ImGuiNavInput_KeyDown_,
    ImGuiNavInput_COUNT,
    ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_
}ImGuiNavInput_;
typedef enum {
    ImGuiConfigFlags_None                   = 0,
    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,
    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,
    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,
    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,
    ImGuiConfigFlags_NoMouse                = 1 << 4,
    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,
    ImGuiConfigFlags_DockingEnable          = 1 << 6,
    ImGuiConfigFlags_ViewportsEnable        = 1 << 10,
    ImGuiConfigFlags_DpiEnableScaleViewports= 1 << 14,
    ImGuiConfigFlags_DpiEnableScaleFonts    = 1 << 15,
    ImGuiConfigFlags_IsSRGB                 = 1 << 20,
    ImGuiConfigFlags_IsTouchScreen          = 1 << 21
}ImGuiConfigFlags_;
typedef enum {
    ImGuiBackendFlags_None                  = 0,
    ImGuiBackendFlags_HasGamepad            = 1 << 0,
    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,
    ImGuiBackendFlags_HasSetMousePos        = 1 << 2,
    ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3,
    ImGuiBackendFlags_PlatformHasViewports  = 1 << 10,
    ImGuiBackendFlags_HasMouseHoveredViewport=1 << 11,
    ImGuiBackendFlags_RendererHasViewports  = 1 << 12
}ImGuiBackendFlags_;
typedef enum {
    ImGuiCol_Text,
    ImGuiCol_TextDisabled,
    ImGuiCol_WindowBg,
    ImGuiCol_ChildBg,
    ImGuiCol_PopupBg,
    ImGuiCol_Border,
    ImGuiCol_BorderShadow,
    ImGuiCol_FrameBg,
    ImGuiCol_FrameBgHovered,
    ImGuiCol_FrameBgActive,
    ImGuiCol_TitleBg,
    ImGuiCol_TitleBgActive,
    ImGuiCol_TitleBgCollapsed,
    ImGuiCol_MenuBarBg,
    ImGuiCol_ScrollbarBg,
    ImGuiCol_ScrollbarGrab,
    ImGuiCol_ScrollbarGrabHovered,
    ImGuiCol_ScrollbarGrabActive,
    ImGuiCol_CheckMark,
    ImGuiCol_SliderGrab,
    ImGuiCol_SliderGrabActive,
    ImGuiCol_Button,
    ImGuiCol_ButtonHovered,
    ImGuiCol_ButtonActive,
    ImGuiCol_Header,
    ImGuiCol_HeaderHovered,
    ImGuiCol_HeaderActive,
    ImGuiCol_Separator,
    ImGuiCol_SeparatorHovered,
    ImGuiCol_SeparatorActive,
    ImGuiCol_ResizeGrip,
    ImGuiCol_ResizeGripHovered,
    ImGuiCol_ResizeGripActive,
    ImGuiCol_Tab,
    ImGuiCol_TabHovered,
    ImGuiCol_TabActive,
    ImGuiCol_TabUnfocused,
    ImGuiCol_TabUnfocusedActive,
    ImGuiCol_DockingPreview,
    ImGuiCol_DockingEmptyBg,
    ImGuiCol_PlotLines,
    ImGuiCol_PlotLinesHovered,
    ImGuiCol_PlotHistogram,
    ImGuiCol_PlotHistogramHovered,
    ImGuiCol_TableHeaderBg,
    ImGuiCol_TableBorderStrong,
    ImGuiCol_TableBorderLight,
    ImGuiCol_TableRowBg,
    ImGuiCol_TableRowBgAlt,
    ImGuiCol_TextSelectedBg,
    ImGuiCol_DragDropTarget,
    ImGuiCol_NavHighlight,
    ImGuiCol_NavWindowingHighlight,
    ImGuiCol_NavWindowingDimBg,
    ImGuiCol_ModalWindowDimBg,
    ImGuiCol_COUNT
}ImGuiCol_;
typedef enum {
    ImGuiStyleVar_Alpha,
    ImGuiStyleVar_WindowPadding,
    ImGuiStyleVar_WindowRounding,
    ImGuiStyleVar_WindowBorderSize,
    ImGuiStyleVar_WindowMinSize,
    ImGuiStyleVar_WindowTitleAlign,
    ImGuiStyleVar_ChildRounding,
    ImGuiStyleVar_ChildBorderSize,
    ImGuiStyleVar_PopupRounding,
    ImGuiStyleVar_PopupBorderSize,
    ImGuiStyleVar_FramePadding,
    ImGuiStyleVar_FrameRounding,
    ImGuiStyleVar_FrameBorderSize,
    ImGuiStyleVar_ItemSpacing,
    ImGuiStyleVar_ItemInnerSpacing,
    ImGuiStyleVar_IndentSpacing,
    ImGuiStyleVar_CellPadding,
    ImGuiStyleVar_ScrollbarSize,
    ImGuiStyleVar_ScrollbarRounding,
    ImGuiStyleVar_GrabMinSize,
    ImGuiStyleVar_GrabRounding,
    ImGuiStyleVar_TabRounding,
    ImGuiStyleVar_ButtonTextAlign,
    ImGuiStyleVar_SelectableTextAlign,
    ImGuiStyleVar_COUNT
}ImGuiStyleVar_;
typedef enum {
    ImGuiButtonFlags_None                   = 0,
    ImGuiButtonFlags_MouseButtonLeft        = 1 << 0,
    ImGuiButtonFlags_MouseButtonRight       = 1 << 1,
    ImGuiButtonFlags_MouseButtonMiddle      = 1 << 2,
    ImGuiButtonFlags_MouseButtonMask_       = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle,
    ImGuiButtonFlags_MouseButtonDefault_    = ImGuiButtonFlags_MouseButtonLeft
}ImGuiButtonFlags_;
typedef enum {
    ImGuiColorEditFlags_None            = 0,
    ImGuiColorEditFlags_NoAlpha         = 1 << 1,
    ImGuiColorEditFlags_NoPicker        = 1 << 2,
    ImGuiColorEditFlags_NoOptions       = 1 << 3,
    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,
    ImGuiColorEditFlags_NoInputs        = 1 << 5,
    ImGuiColorEditFlags_NoTooltip       = 1 << 6,
    ImGuiColorEditFlags_NoLabel         = 1 << 7,
    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,
    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,
    ImGuiColorEditFlags_NoBorder        = 1 << 10,
    ImGuiColorEditFlags_AlphaBar        = 1 << 16,
    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,
    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,
    ImGuiColorEditFlags_HDR             = 1 << 19,
    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,
    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,
    ImGuiColorEditFlags_DisplayHex      = 1 << 22,
    ImGuiColorEditFlags_Uint8           = 1 << 23,
    ImGuiColorEditFlags_Float           = 1 << 24,
    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,
    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,
    ImGuiColorEditFlags_InputRGB        = 1 << 27,
    ImGuiColorEditFlags_InputHSV        = 1 << 28,
    ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar,
    ImGuiColorEditFlags__DisplayMask    = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex,
    ImGuiColorEditFlags__DataTypeMask   = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,
    ImGuiColorEditFlags__PickerMask     = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar,
    ImGuiColorEditFlags__InputMask      = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV
}ImGuiColorEditFlags_;
typedef enum {
    ImGuiSliderFlags_None                   = 0,
    ImGuiSliderFlags_AlwaysClamp            = 1 << 4,
    ImGuiSliderFlags_Logarithmic            = 1 << 5,
    ImGuiSliderFlags_NoRoundToFormat        = 1 << 6,
    ImGuiSliderFlags_NoInput                = 1 << 7,
    ImGuiSliderFlags_InvalidMask_           = 0x7000000F
}ImGuiSliderFlags_;
typedef enum {
    ImGuiMouseButton_Left = 0,
    ImGuiMouseButton_Right = 1,
    ImGuiMouseButton_Middle = 2,
    ImGuiMouseButton_COUNT = 5
}ImGuiMouseButton_;
typedef enum {
    ImGuiMouseCursor_None = -1,
    ImGuiMouseCursor_Arrow = 0,
    ImGuiMouseCursor_TextInput,
    ImGuiMouseCursor_ResizeAll,
    ImGuiMouseCursor_ResizeNS,
    ImGuiMouseCursor_ResizeEW,
    ImGuiMouseCursor_ResizeNESW,
    ImGuiMouseCursor_ResizeNWSE,
    ImGuiMouseCursor_Hand,
    ImGuiMouseCursor_NotAllowed,
    ImGuiMouseCursor_COUNT
}ImGuiMouseCursor_;
typedef enum {
    ImGuiCond_None          = 0,
    ImGuiCond_Always        = 1 << 0,
    ImGuiCond_Once          = 1 << 1,
    ImGuiCond_FirstUseEver  = 1 << 2,
    ImGuiCond_Appearing     = 1 << 3
}ImGuiCond_;
struct ImGuiStyle
{
    float       Alpha;
    ImVec2      WindowPadding;
    float       WindowRounding;
    float       WindowBorderSize;
    ImVec2      WindowMinSize;
    ImVec2      WindowTitleAlign;
    ImGuiDir    WindowMenuButtonPosition;
    float       ChildRounding;
    float       ChildBorderSize;
    float       PopupRounding;
    float       PopupBorderSize;
    ImVec2      FramePadding;
    float       FrameRounding;
    float       FrameBorderSize;
    ImVec2      ItemSpacing;
    ImVec2      ItemInnerSpacing;
    ImVec2      CellPadding;
    ImVec2      TouchExtraPadding;
    float       IndentSpacing;
    float       ColumnsMinSpacing;
    float       ScrollbarSize;
    float       ScrollbarRounding;
    float       GrabMinSize;
    float       GrabRounding;
    float       LogSliderDeadzone;
    float       TabRounding;
    float       TabBorderSize;
    float       TabMinWidthForCloseButton;
    ImGuiDir    ColorButtonPosition;
    ImVec2      ButtonTextAlign;
    ImVec2      SelectableTextAlign;
    ImVec2      DisplayWindowPadding;
    ImVec2      DisplaySafeAreaPadding;
    float       MouseCursorScale;
    bool        AntiAliasedLines;
    bool        AntiAliasedLinesUseTex;
    bool        AntiAliasedFill;
    float       CurveTessellationTol;
    float       CircleSegmentMaxError;
    ImVec4      Colors[ImGuiCol_COUNT];
};
struct ImGuiIO
{
    ImGuiConfigFlags   ConfigFlags;
    ImGuiBackendFlags  BackendFlags;
    ImVec2      DisplaySize;
    float       DeltaTime;
    float       IniSavingRate;
    const char* IniFilename;
    const char* LogFilename;
    float       MouseDoubleClickTime;
    float       MouseDoubleClickMaxDist;
    float       MouseDragThreshold;
    int         KeyMap[ImGuiKey_COUNT];
    float       KeyRepeatDelay;
    float       KeyRepeatRate;
    void*       UserData;
    ImFontAtlas*Fonts;
    float       FontGlobalScale;
    bool        FontAllowUserScaling;
    ImFont*     FontDefault;
    ImVec2      DisplayFramebufferScale;
    bool        ConfigDockingNoSplit;
    bool        ConfigDockingWithShift;
    bool        ConfigDockingAlwaysTabBar;
    bool        ConfigDockingTransparentPayload;
    bool        ConfigViewportsNoAutoMerge;
    bool        ConfigViewportsNoTaskBarIcon;
    bool        ConfigViewportsNoDecoration;
    bool        ConfigViewportsNoDefaultParent;
    bool        MouseDrawCursor;
    bool        ConfigMacOSXBehaviors;
    bool        ConfigInputTextCursorBlink;
    bool        ConfigWindowsResizeFromEdges;
    bool        ConfigWindowsMoveFromTitleBarOnly;
    float       ConfigMemoryCompactTimer;
    const char* BackendPlatformName;
    const char* BackendRendererName;
    void*       BackendPlatformUserData;
    void*       BackendRendererUserData;
    void*       BackendLanguageUserData;
    const char* (*GetClipboardTextFn)(void* user_data);
    void        (*SetClipboardTextFn)(void* user_data, const char* text);
    void*       ClipboardUserData;
    ImVec2      MousePos;
    bool        MouseDown[5];
    float       MouseWheel;
    float       MouseWheelH;
    ImGuiID     MouseHoveredViewport;
    bool        KeyCtrl;
    bool        KeyShift;
    bool        KeyAlt;
    bool        KeySuper;
    bool        KeysDown[512];
    float       NavInputs[ImGuiNavInput_COUNT];
    bool        WantCaptureMouse;
    bool        WantCaptureKeyboard;
    bool        WantTextInput;
    bool        WantSetMousePos;
    bool        WantSaveIniSettings;
    bool        NavActive;
    bool        NavVisible;
    float       Framerate;
    int         MetricsRenderVertices;
    int         MetricsRenderIndices;
    int         MetricsRenderWindows;
    int         MetricsActiveWindows;
    int         MetricsActiveAllocations;
    ImVec2      MouseDelta;
    ImGuiKeyModFlags KeyMods;
    ImVec2      MousePosPrev;
    ImVec2      MouseClickedPos[5];
    double      MouseClickedTime[5];
    bool        MouseClicked[5];
    bool        MouseDoubleClicked[5];
    bool        MouseReleased[5];
    bool        MouseDownOwned[5];
    bool        MouseDownWasDoubleClick[5];
    float       MouseDownDuration[5];
    float       MouseDownDurationPrev[5];
    ImVec2      MouseDragMaxDistanceAbs[5];
    float       MouseDragMaxDistanceSqr[5];
    float       KeysDownDuration[512];
    float       KeysDownDurationPrev[512];
    float       NavInputsDownDuration[ImGuiNavInput_COUNT];
    float       NavInputsDownDurationPrev[ImGuiNavInput_COUNT];
    float       PenPressure;
    ImWchar16   InputQueueSurrogate;
    ImVector_ImWchar InputQueueCharacters;
};
struct ImGuiInputTextCallbackData
{
    ImGuiInputTextFlags EventFlag;
    ImGuiInputTextFlags Flags;
    void*               UserData;
    ImWchar             EventChar;
    ImGuiKey            EventKey;
    char*               Buf;
    int                 BufTextLen;
    int                 BufSize;
    bool                BufDirty;
    int                 CursorPos;
    int                 SelectionStart;
    int                 SelectionEnd;
};
struct ImGuiSizeCallbackData
{
    void*   UserData;
    ImVec2  Pos;
    ImVec2  CurrentSize;
    ImVec2  DesiredSize;
};
struct ImGuiWindowClass
{
    ImGuiID             ClassId;
    ImGuiID             ParentViewportId;
    ImGuiViewportFlags  ViewportFlagsOverrideSet;
    ImGuiViewportFlags  ViewportFlagsOverrideClear;
    ImGuiDockNodeFlags  DockNodeFlagsOverrideSet;
    ImGuiDockNodeFlags  DockNodeFlagsOverrideClear;
    bool                DockingAlwaysTabBar;
    bool                DockingAllowUnclassed;
};
struct ImGuiPayload
{
    void*           Data;
    int             DataSize;
    ImGuiID         SourceId;
    ImGuiID         SourceParentId;
    int             DataFrameCount;
    char            DataType[32 + 1];
    bool            Preview;
    bool            Delivery;
};
struct ImGuiTableColumnSortSpecs
{
    ImGuiID                     ColumnUserID;
    ImS16                       ColumnIndex;
    ImS16                       SortOrder;
    ImGuiSortDirection          SortDirection : 8;
};
struct ImGuiTableSortSpecs
{
    const ImGuiTableColumnSortSpecs* Specs;
    int                         SpecsCount;
    bool                        SpecsDirty;
};
struct ImGuiOnceUponAFrame
{
     int RefFrame;
};
struct ImGuiTextRange
{
        const char*     b;
        const char*     e;
};
struct ImGuiTextFilter
{
    char                    InputBuf[256];
    ImVector_ImGuiTextRange Filters;
    int                     CountGrep;
};
struct ImGuiTextBuffer
{
    ImVector_char      Buf;
};
struct ImGuiStoragePair
{
        ImGuiID key;
        union { int val_i; float val_f; void* val_p; };
};
struct ImGuiStorage
{
    ImVector_ImGuiStoragePair      Data;
};
typedef struct ImVector_ImGuiTabBar {int Size;int Capacity;ImGuiTabBar* Data;} ImVector_ImGuiTabBar;
typedef struct ImPool_ImGuiTabBar {ImVector_ImGuiTabBar Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;} ImPool_ImGuiTabBar;
typedef struct ImVector_ImGuiTable {int Size;int Capacity;ImGuiTable* Data;} ImVector_ImGuiTable;
typedef struct ImPool_ImGuiTable {ImVector_ImGuiTable Buf;ImGuiStorage Map;ImPoolIdx FreeIdx;} ImPool_ImGuiTable;
struct ImGuiListClipper
{
    int     DisplayStart;
    int     DisplayEnd;
    int     ItemsCount;
    int     StepNo;
    int     ItemsFrozen;
    float   ItemsHeight;
    float   StartPosY;
};
struct ImColor
{
    ImVec4              Value;
};
struct ImDrawCmd
{
    ImVec4          ClipRect;
    ImTextureID     TextureId;
    unsigned int    VtxOffset;
    unsigned int    IdxOffset;
    unsigned int    ElemCount;
    ImDrawCallback  UserCallback;
    void*           UserCallbackData;
};
struct ImDrawVert
{
    ImVec2  pos;
    ImVec2  uv;
    ImU32   col;
};
struct ImDrawCmdHeader
{
    ImVec4          ClipRect;
    ImTextureID     TextureId;
    unsigned int    VtxOffset;
};
struct ImDrawChannel
{
    ImVector_ImDrawCmd         _CmdBuffer;
    ImVector_ImDrawIdx         _IdxBuffer;
};
struct ImDrawListSplitter
{
    int                         _Current;
    int                         _Count;
    ImVector_ImDrawChannel     _Channels;
};
typedef enum {
    ImDrawCornerFlags_None      = 0,
    ImDrawCornerFlags_TopLeft   = 1 << 0,
    ImDrawCornerFlags_TopRight  = 1 << 1,
    ImDrawCornerFlags_BotLeft   = 1 << 2,
    ImDrawCornerFlags_BotRight  = 1 << 3,
    ImDrawCornerFlags_Top       = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,
    ImDrawCornerFlags_Bot       = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,
    ImDrawCornerFlags_Left      = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,
    ImDrawCornerFlags_Right     = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,
    ImDrawCornerFlags_All       = 0xF
}ImDrawCornerFlags_;
typedef enum {
    ImDrawListFlags_None                    = 0,
    ImDrawListFlags_AntiAliasedLines        = 1 << 0,
    ImDrawListFlags_AntiAliasedLinesUseTex  = 1 << 1,
    ImDrawListFlags_AntiAliasedFill         = 1 << 2,
    ImDrawListFlags_AllowVtxOffset          = 1 << 3
}ImDrawListFlags_;
struct ImDrawList
{
    ImVector_ImDrawCmd     CmdBuffer;
    ImVector_ImDrawIdx     IdxBuffer;
    ImVector_ImDrawVert    VtxBuffer;
    ImDrawListFlags         Flags;
    unsigned int            _VtxCurrentIdx;
    const ImDrawListSharedData* _Data;
    const char*             _OwnerName;
    ImDrawVert*             _VtxWritePtr;
    ImDrawIdx*              _IdxWritePtr;
    ImVector_ImVec4        _ClipRectStack;
    ImVector_ImTextureID   _TextureIdStack;
    ImVector_ImVec2        _Path;
    ImDrawCmdHeader         _CmdHeader;
    ImDrawListSplitter      _Splitter;
    float                   _FringeScale;
};
struct ImDrawData
{
    bool            Valid;
    ImDrawList**    CmdLists;
    int             CmdListsCount;
    int             TotalIdxCount;
    int             TotalVtxCount;
    ImVec2          DisplayPos;
    ImVec2          DisplaySize;
    ImVec2          FramebufferScale;
    ImGuiViewport*  OwnerViewport;
};
struct ImFontConfig
{
    void*           FontData;
    int             FontDataSize;
    bool            FontDataOwnedByAtlas;
    int             FontNo;
    float           SizePixels;
    int             OversampleH;
    int             OversampleV;
    bool            PixelSnapH;
    ImVec2          GlyphExtraSpacing;
    ImVec2          GlyphOffset;
    const ImWchar*  GlyphRanges;
    float           GlyphMinAdvanceX;
    float           GlyphMaxAdvanceX;
    bool            MergeMode;
    unsigned int    RasterizerFlags;
    float           RasterizerMultiply;
    ImWchar         EllipsisChar;
    char            Name[40];
    ImFont*         DstFont;
};
struct ImFontGlyph
{
    unsigned int    Codepoint : 31;
    unsigned int    Visible : 1;
    float           AdvanceX;
    float           X0, Y0, X1, Y1;
    float           U0, V0, U1, V1;
};
struct ImFontGlyphRangesBuilder
{
    ImVector_ImU32 UsedChars;
};
struct ImFontAtlasCustomRect
{
    unsigned short  Width, Height;
    unsigned short  X, Y;
    unsigned int    GlyphID;
    float           GlyphAdvanceX;
    ImVec2          GlyphOffset;
    ImFont*         Font;
};
typedef enum {
    ImFontAtlasFlags_None               = 0,
    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,
    ImFontAtlasFlags_NoMouseCursors     = 1 << 1,
    ImFontAtlasFlags_NoBakedLines       = 1 << 2
}ImFontAtlasFlags_;
struct ImFontAtlas
{
    bool                        Locked;
    ImFontAtlasFlags            Flags;
    ImTextureID                 TexID;
    int                         TexDesiredWidth;
    int                         TexGlyphPadding;
    unsigned char*              TexPixelsAlpha8;
    unsigned int*               TexPixelsRGBA32;
    int                         TexWidth;
    int                         TexHeight;
    ImVec2                      TexUvScale;
    ImVec2                      TexUvWhitePixel;
    ImVector_ImFontPtr           Fonts;
    ImVector_ImFontAtlasCustomRect CustomRects;
    ImVector_ImFontConfig      ConfigData;
    ImVec4                      TexUvLines[(63) + 1];
    int                         PackIdMouseCursors;
    int                         PackIdLines;
};
struct ImFont
{
    ImVector_float             IndexAdvanceX;
    float                       FallbackAdvanceX;
    float                       FontSize;
    ImVector_ImWchar           IndexLookup;
    ImVector_ImFontGlyph       Glyphs;
    const ImFontGlyph*          FallbackGlyph;
    ImFontAtlas*                ContainerAtlas;
    const ImFontConfig*         ConfigData;
    short                       ConfigDataCount;
    ImWchar                     FallbackChar;
    ImWchar                     EllipsisChar;
    bool                        DirtyLookupTables;
    float                       Scale;
    float                       Ascent, Descent;
    int                         MetricsTotalSurface;
    ImU8                        Used4kPagesMap[(0xFFFF+1)/4096/8];
};
struct ImGuiPlatformIO
{
    void    (*Platform_CreateWindow)(ImGuiViewport* vp);
    void    (*Platform_DestroyWindow)(ImGuiViewport* vp);
    void    (*Platform_ShowWindow)(ImGuiViewport* vp);
    void    (*Platform_SetWindowPos)(ImGuiViewport* vp, ImVec2 pos);
    ImVec2  (*Platform_GetWindowPos)(ImGuiViewport* vp);
    void    (*Platform_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);
    ImVec2  (*Platform_GetWindowSize)(ImGuiViewport* vp);
    void    (*Platform_SetWindowFocus)(ImGuiViewport* vp);
    bool    (*Platform_GetWindowFocus)(ImGuiViewport* vp);
    bool    (*Platform_GetWindowMinimized)(ImGuiViewport* vp);
    void    (*Platform_SetWindowTitle)(ImGuiViewport* vp, const char* str);
    void    (*Platform_SetWindowAlpha)(ImGuiViewport* vp, float alpha);
    void    (*Platform_UpdateWindow)(ImGuiViewport* vp);
    void    (*Platform_RenderWindow)(ImGuiViewport* vp, void* render_arg);
    void    (*Platform_SwapBuffers)(ImGuiViewport* vp, void* render_arg);
    float   (*Platform_GetWindowDpiScale)(ImGuiViewport* vp);
    void    (*Platform_OnChangedViewport)(ImGuiViewport* vp);
    void    (*Platform_SetImeInputPos)(ImGuiViewport* vp, ImVec2 pos);
    int     (*Platform_CreateVkSurface)(ImGuiViewport* vp, ImU64 vk_inst, const void* vk_allocators, ImU64* out_vk_surface);
    void    (*Renderer_CreateWindow)(ImGuiViewport* vp);
    void    (*Renderer_DestroyWindow)(ImGuiViewport* vp);
    void    (*Renderer_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);
    void    (*Renderer_RenderWindow)(ImGuiViewport* vp, void* render_arg);
    void    (*Renderer_SwapBuffers)(ImGuiViewport* vp, void* render_arg);
    ImVector_ImGuiPlatformMonitor  Monitors;
    ImGuiViewport*                  MainViewport;
    ImVector_ImGuiViewportPtr        Viewports;
};
struct ImGuiPlatformMonitor
{
    ImVec2  MainPos, MainSize;
    ImVec2  WorkPos, WorkSize;
    float   DpiScale;
};
typedef enum {
    ImGuiViewportFlags_None                     = 0,
    ImGuiViewportFlags_NoDecoration             = 1 << 0,
    ImGuiViewportFlags_NoTaskBarIcon            = 1 << 1,
    ImGuiViewportFlags_NoFocusOnAppearing       = 1 << 2,
    ImGuiViewportFlags_NoFocusOnClick           = 1 << 3,
    ImGuiViewportFlags_NoInputs                 = 1 << 4,
    ImGuiViewportFlags_NoRendererClear          = 1 << 5,
    ImGuiViewportFlags_TopMost                  = 1 << 6,
    ImGuiViewportFlags_Minimized                = 1 << 7,
    ImGuiViewportFlags_NoAutoMerge              = 1 << 8,
    ImGuiViewportFlags_CanHostOtherWindows      = 1 << 9
}ImGuiViewportFlags_;
struct ImGuiViewport
{
    ImGuiID             ID;
    ImGuiViewportFlags  Flags;
    ImVec2              Pos;
    ImVec2              Size;
    ImVec2              WorkOffsetMin;
    ImVec2              WorkOffsetMax;
    float               DpiScale;
    ImDrawData*         DrawData;
    ImGuiID             ParentViewportId;
    void*               RendererUserData;
    void*               PlatformUserData;
    void*               PlatformHandle;
    void*               PlatformHandleRaw;
    bool                PlatformRequestMove;
    bool                PlatformRequestResize;
    bool                PlatformRequestClose;
};
struct StbUndoRecord
{
   int  where;
   int  insert_length;
   int  delete_length;
   int                        char_storage;
};
struct StbUndoState
{
   StbUndoRecord          undo_rec [99];
   ImWchar  undo_char[999];
   short undo_point, redo_point;
   int undo_char_point, redo_char_point;
};
struct STB_TexteditState
{
   int cursor;
   int select_start;
   int select_end;
   unsigned char insert_mode;
   int row_count_per_page;
   unsigned char cursor_at_end_of_line;
   unsigned char initialized;
   unsigned char has_preferred_x;
   unsigned char single_line;
   unsigned char padding1, padding2, padding3;
   float preferred_x;
   StbUndoState undostate;
};
struct StbTexteditRow
{
   float x0,x1;
   float baseline_y_delta;
   float ymin,ymax;
   int num_chars;
};
struct ImVec1
{
    float   x;
};
struct ImVec2ih
{
    short   x, y;
};
struct ImRect
{
    ImVec2      Min;
    ImVec2      Max;
};
struct ImBitVector
{
    ImVector_ImU32 Storage;
};
struct ImDrawListSharedData
{
    ImVec2          TexUvWhitePixel;
    ImFont*         Font;
    float           FontSize;
    float           CurveTessellationTol;
    float           CircleSegmentMaxError;
    ImVec4          ClipRectFullscreen;
    ImDrawListFlags InitialFlags;
    ImVec2          ArcFastVtx[12 * 1];
    ImU8            CircleSegmentCounts[64];
    const ImVec4*   TexUvLines;
};
struct ImDrawDataBuilder
{
    ImVector_ImDrawListPtr   Layers[2];
};
typedef enum {
    ImGuiItemFlags_None                     = 0,
    ImGuiItemFlags_NoTabStop                = 1 << 0,
    ImGuiItemFlags_ButtonRepeat             = 1 << 1,
    ImGuiItemFlags_Disabled                 = 1 << 2,
    ImGuiItemFlags_NoNav                    = 1 << 3,
    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 4,
    ImGuiItemFlags_SelectableDontClosePopup = 1 << 5,
    ImGuiItemFlags_MixedValue               = 1 << 6,
    ImGuiItemFlags_ReadOnly                 = 1 << 7,
    ImGuiItemFlags_Default_                 = 0
}ImGuiItemFlags_;
typedef enum {
    ImGuiItemStatusFlags_None               = 0,
    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,
    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,
    ImGuiItemStatusFlags_Edited             = 1 << 2,
    ImGuiItemStatusFlags_ToggledSelection   = 1 << 3,
    ImGuiItemStatusFlags_ToggledOpen        = 1 << 4,
    ImGuiItemStatusFlags_HasDeactivated     = 1 << 5,
    ImGuiItemStatusFlags_Deactivated        = 1 << 6
}ImGuiItemStatusFlags_;
typedef enum {
    ImGuiButtonFlags_PressedOnClick         = 1 << 4,
    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 5,
    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 6,
    ImGuiButtonFlags_PressedOnRelease       = 1 << 7,
    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 8,
    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 9,
    ImGuiButtonFlags_Repeat                 = 1 << 10,
    ImGuiButtonFlags_FlattenChildren        = 1 << 11,
    ImGuiButtonFlags_AllowItemOverlap       = 1 << 12,
    ImGuiButtonFlags_DontClosePopups        = 1 << 13,
    ImGuiButtonFlags_Disabled               = 1 << 14,
    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 15,
    ImGuiButtonFlags_NoKeyModifiers         = 1 << 16,
    ImGuiButtonFlags_NoHoldingActiveId      = 1 << 17,
    ImGuiButtonFlags_NoNavFocus             = 1 << 18,
    ImGuiButtonFlags_NoHoveredOnFocus       = 1 << 19,
    ImGuiButtonFlags_PressedOnMask_         = ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnClickReleaseAnywhere | ImGuiButtonFlags_PressedOnRelease | ImGuiButtonFlags_PressedOnDoubleClick | ImGuiButtonFlags_PressedOnDragDropHold,
    ImGuiButtonFlags_PressedOnDefault_      = ImGuiButtonFlags_PressedOnClickRelease
}ImGuiButtonFlagsPrivate_;
typedef enum {
    ImGuiSliderFlags_Vertical               = 1 << 20,
    ImGuiSliderFlags_ReadOnly               = 1 << 21
}ImGuiSliderFlagsPrivate_;
typedef enum {
    ImGuiSelectableFlags_NoHoldingActiveID      = 1 << 20,
    ImGuiSelectableFlags_SelectOnClick          = 1 << 21,
    ImGuiSelectableFlags_SelectOnRelease        = 1 << 22,
    ImGuiSelectableFlags_SpanAvailWidth         = 1 << 23,
    ImGuiSelectableFlags_DrawHoveredWhenHeld    = 1 << 24,
    ImGuiSelectableFlags_SetNavIdOnHover        = 1 << 25,
    ImGuiSelectableFlags_NoPadWithHalfSpacing   = 1 << 26
}ImGuiSelectableFlagsPrivate_;
typedef enum {
    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 20
}ImGuiTreeNodeFlagsPrivate_;
typedef enum {
    ImGuiSeparatorFlags_None                = 0,
    ImGuiSeparatorFlags_Horizontal          = 1 << 0,
    ImGuiSeparatorFlags_Vertical            = 1 << 1,
    ImGuiSeparatorFlags_SpanAllColumns      = 1 << 2
}ImGuiSeparatorFlags_;
typedef enum {
    ImGuiTextFlags_None = 0,
    ImGuiTextFlags_NoWidthForLargeClippedText = 1 << 0
}ImGuiTextFlags_;
typedef enum {
    ImGuiTooltipFlags_None = 0,
    ImGuiTooltipFlags_OverridePreviousTooltip = 1 << 0
}ImGuiTooltipFlags_;
typedef enum {
    ImGuiLayoutType_Horizontal = 0,
    ImGuiLayoutType_Vertical = 1
}ImGuiLayoutType_;
typedef enum {
    ImGuiLogType_None = 0,
    ImGuiLogType_TTY,
    ImGuiLogType_File,
    ImGuiLogType_Buffer,
    ImGuiLogType_Clipboard
}ImGuiLogType;
typedef enum {
    ImGuiAxis_None = -1,
    ImGuiAxis_X = 0,
    ImGuiAxis_Y = 1
}ImGuiAxis;
typedef enum {
    ImGuiPlotType_Lines,
    ImGuiPlotType_Histogram
}ImGuiPlotType;
typedef enum {
    ImGuiInputSource_None = 0,
    ImGuiInputSource_Mouse,
    ImGuiInputSource_Nav,
    ImGuiInputSource_NavKeyboard,
    ImGuiInputSource_NavGamepad,
    ImGuiInputSource_COUNT
}ImGuiInputSource;
typedef enum {
    ImGuiInputReadMode_Down,
    ImGuiInputReadMode_Pressed,
    ImGuiInputReadMode_Released,
    ImGuiInputReadMode_Repeat,
    ImGuiInputReadMode_RepeatSlow,
    ImGuiInputReadMode_RepeatFast
}ImGuiInputReadMode;
typedef enum {
    ImGuiNavHighlightFlags_None         = 0,
    ImGuiNavHighlightFlags_TypeDefault  = 1 << 0,
    ImGuiNavHighlightFlags_TypeThin     = 1 << 1,
    ImGuiNavHighlightFlags_AlwaysDraw   = 1 << 2,
    ImGuiNavHighlightFlags_NoRounding   = 1 << 3
}ImGuiNavHighlightFlags_;
typedef enum {
    ImGuiNavDirSourceFlags_None         = 0,
    ImGuiNavDirSourceFlags_Keyboard     = 1 << 0,
    ImGuiNavDirSourceFlags_PadDPad      = 1 << 1,
    ImGuiNavDirSourceFlags_PadLStick    = 1 << 2
}ImGuiNavDirSourceFlags_;
typedef enum {
    ImGuiNavMoveFlags_None                  = 0,
    ImGuiNavMoveFlags_LoopX                 = 1 << 0,
    ImGuiNavMoveFlags_LoopY                 = 1 << 1,
    ImGuiNavMoveFlags_WrapX                 = 1 << 2,
    ImGuiNavMoveFlags_WrapY                 = 1 << 3,
    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,
    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5,
    ImGuiNavMoveFlags_ScrollToEdge          = 1 << 6
}ImGuiNavMoveFlags_;
typedef enum {
    ImGuiNavForward_None,
    ImGuiNavForward_ForwardQueued,
    ImGuiNavForward_ForwardActive
}ImGuiNavForward;
typedef enum {
    ImGuiNavLayer_Main  = 0,
    ImGuiNavLayer_Menu  = 1,
    ImGuiNavLayer_COUNT
}ImGuiNavLayer;
typedef enum {
    ImGuiPopupPositionPolicy_Default,
    ImGuiPopupPositionPolicy_ComboBox,
    ImGuiPopupPositionPolicy_Tooltip
}ImGuiPopupPositionPolicy;
struct ImGuiDataTypeTempStorage
{
    ImU8        Data[8];
};
struct ImGuiDataTypeInfo
{
    size_t      Size;
    const char* Name;
    const char* PrintFmt;
    const char* ScanFmt;
};
typedef enum {
    ImGuiDataType_String = ImGuiDataType_COUNT + 1,
    ImGuiDataType_Pointer,
    ImGuiDataType_ID
}ImGuiDataTypePrivate_;
struct ImGuiColorMod
{
    ImGuiCol    Col;
    ImVec4      BackupValue;
};
struct ImGuiStyleMod
{
    ImGuiStyleVar   VarIdx;
    union           { int BackupInt[2]; float BackupFloat[2]; };
};
struct ImGuiGroupData
{
    ImGuiID     WindowID;
    ImVec2      BackupCursorPos;
    ImVec2      BackupCursorMaxPos;
    ImVec1      BackupIndent;
    ImVec1      BackupGroupOffset;
    ImVec2      BackupCurrLineSize;
    float       BackupCurrLineTextBaseOffset;
    ImGuiID     BackupActiveIdIsAlive;
    bool        BackupActiveIdPreviousFrameIsAlive;
    bool        EmitItem;
};
struct ImGuiMenuColumns
{
    float       Spacing;
    float       Width, NextWidth;
    float       Pos[3], NextWidths[3];
};
struct ImGuiInputTextState
{
    ImGuiID                 ID;
    int                     CurLenW, CurLenA;
    ImVector_ImWchar       TextW;
    ImVector_char          TextA;
    ImVector_char          InitialTextA;
    bool                    TextAIsValid;
    int                     BufCapacityA;
    float                   ScrollX;
    STB_TexteditState Stb;
    float                   CursorAnim;
    bool                    CursorFollow;
    bool                    SelectedAllMouseLock;
    bool                    Edited;
    ImGuiInputTextFlags     UserFlags;
    ImGuiInputTextCallback  UserCallback;
    void*                   UserCallbackData;
};
struct ImGuiPopupData
{
    ImGuiID             PopupId;
    ImGuiWindow*        Window;
    ImGuiWindow*        SourceWindow;
    int                 OpenFrameCount;
    ImGuiID             OpenParentId;
    ImVec2              OpenPopupPos;
    ImVec2              OpenMousePos;
};
struct ImGuiNavMoveResult
{
    ImGuiWindow*    Window;
    ImGuiID         ID;
    ImGuiID         FocusScopeId;
    float           DistBox;
    float           DistCenter;
    float           DistAxial;
    ImRect          RectRel;
};
typedef enum {
    ImGuiNextWindowDataFlags_None               = 0,
    ImGuiNextWindowDataFlags_HasPos             = 1 << 0,
    ImGuiNextWindowDataFlags_HasSize            = 1 << 1,
    ImGuiNextWindowDataFlags_HasContentSize     = 1 << 2,
    ImGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,
    ImGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,
    ImGuiNextWindowDataFlags_HasFocus           = 1 << 5,
    ImGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6,
    ImGuiNextWindowDataFlags_HasScroll          = 1 << 7,
    ImGuiNextWindowDataFlags_HasViewport        = 1 << 8,
    ImGuiNextWindowDataFlags_HasDock            = 1 << 9,
    ImGuiNextWindowDataFlags_HasWindowClass     = 1 << 10
}ImGuiNextWindowDataFlags_;
struct ImGuiNextWindowData
{
    ImGuiNextWindowDataFlags    Flags;
    ImGuiCond                   PosCond;
    ImGuiCond                   SizeCond;
    ImGuiCond                   CollapsedCond;
    ImGuiCond                   DockCond;
    ImVec2                      PosVal;
    ImVec2                      PosPivotVal;
    ImVec2                      SizeVal;
    ImVec2                      ContentSizeVal;
    ImVec2                      ScrollVal;
    bool                        PosUndock;
    bool                        CollapsedVal;
    ImRect                      SizeConstraintRect;
    ImGuiSizeCallback           SizeCallback;
    void*                       SizeCallbackUserData;
    float                       BgAlphaVal;
    ImGuiID                     ViewportId;
    ImGuiID                     DockId;
    ImGuiWindowClass            WindowClass;
    ImVec2                      MenuBarOffsetMinVal;
};
typedef enum {
    ImGuiNextItemDataFlags_None     = 0,
    ImGuiNextItemDataFlags_HasWidth = 1 << 0,
    ImGuiNextItemDataFlags_HasOpen  = 1 << 1
}ImGuiNextItemDataFlags_;
struct ImGuiNextItemData
{
    ImGuiNextItemDataFlags      Flags;
    float                       Width;
    ImGuiID                     FocusScopeId;
    ImGuiCond                   OpenCond;
    bool                        OpenVal;
};
struct ImGuiShrinkWidthItem
{
    int         Index;
    float       Width;
};
struct ImGuiPtrOrIndex
{
    void*       Ptr;
    int         Index;
};
typedef enum {
    ImGuiOldColumnFlags_None                    = 0,
    ImGuiOldColumnFlags_NoBorder                = 1 << 0,
    ImGuiOldColumnFlags_NoResize                = 1 << 1,
    ImGuiOldColumnFlags_NoPreserveWidths        = 1 << 2,
    ImGuiOldColumnFlags_NoForceWithinWindow     = 1 << 3,
    ImGuiOldColumnFlags_GrowParentContentsSize  = 1 << 4
}ImGuiOldColumnFlags_;
struct ImGuiOldColumnData
{
    float               OffsetNorm;
    float               OffsetNormBeforeResize;
    ImGuiOldColumnFlags Flags;
    ImRect              ClipRect;
};
struct ImGuiOldColumns
{
    ImGuiID             ID;
    ImGuiOldColumnFlags Flags;
    bool                IsFirstFrame;
    bool                IsBeingResized;
    int                 Current;
    int                 Count;
    float               OffMinX, OffMaxX;
    float               LineMinY, LineMaxY;
    float               HostCursorPosY;
    float               HostCursorMaxPosX;
    ImRect              HostInitialClipRect;
    ImRect              HostBackupClipRect;
    ImRect              HostBackupParentWorkRect;
    ImVector_ImGuiOldColumnData Columns;
    ImDrawListSplitter  Splitter;
};
typedef enum {
    ImGuiDockNodeFlags_DockSpace                = 1 << 10,
    ImGuiDockNodeFlags_CentralNode              = 1 << 11,
    ImGuiDockNodeFlags_NoTabBar                 = 1 << 12,
    ImGuiDockNodeFlags_HiddenTabBar             = 1 << 13,
    ImGuiDockNodeFlags_NoWindowMenuButton       = 1 << 14,
    ImGuiDockNodeFlags_NoCloseButton            = 1 << 15,
    ImGuiDockNodeFlags_NoDocking                = 1 << 16,
    ImGuiDockNodeFlags_NoDockingSplitMe         = 1 << 17,
    ImGuiDockNodeFlags_NoDockingSplitOther      = 1 << 18,
    ImGuiDockNodeFlags_NoDockingOverMe          = 1 << 19,
    ImGuiDockNodeFlags_NoDockingOverOther       = 1 << 20,
    ImGuiDockNodeFlags_NoResizeX                = 1 << 21,
    ImGuiDockNodeFlags_NoResizeY                = 1 << 22,
    ImGuiDockNodeFlags_SharedFlagsInheritMask_  = ~0,
    ImGuiDockNodeFlags_NoResizeFlagsMask_       = ImGuiDockNodeFlags_NoResize | ImGuiDockNodeFlags_NoResizeX | ImGuiDockNodeFlags_NoResizeY,
    ImGuiDockNodeFlags_LocalFlagsMask_          = ImGuiDockNodeFlags_NoSplit | ImGuiDockNodeFlags_NoResizeFlagsMask_ | ImGuiDockNodeFlags_AutoHideTabBar | ImGuiDockNodeFlags_DockSpace | ImGuiDockNodeFlags_CentralNode | ImGuiDockNodeFlags_NoTabBar | ImGuiDockNodeFlags_HiddenTabBar | ImGuiDockNodeFlags_NoWindowMenuButton | ImGuiDockNodeFlags_NoCloseButton | ImGuiDockNodeFlags_NoDocking,
    ImGuiDockNodeFlags_LocalFlagsTransferMask_  = ImGuiDockNodeFlags_LocalFlagsMask_ & ~ImGuiDockNodeFlags_DockSpace,
    ImGuiDockNodeFlags_SavedFlagsMask_          = ImGuiDockNodeFlags_NoResizeFlagsMask_ | ImGuiDockNodeFlags_DockSpace | ImGuiDockNodeFlags_CentralNode | ImGuiDockNodeFlags_NoTabBar | ImGuiDockNodeFlags_HiddenTabBar | ImGuiDockNodeFlags_NoWindowMenuButton | ImGuiDockNodeFlags_NoCloseButton | ImGuiDockNodeFlags_NoDocking
}ImGuiDockNodeFlagsPrivate_;
typedef enum {
    ImGuiDataAuthority_Auto,
    ImGuiDataAuthority_DockNode,
    ImGuiDataAuthority_Window
}ImGuiDataAuthority_;
typedef enum {
    ImGuiDockNodeState_Unknown,
    ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow,
    ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing,
    ImGuiDockNodeState_HostWindowVisible
}ImGuiDockNodeState;
struct ImGuiDockNode
{
    ImGuiID                 ID;
    ImGuiDockNodeFlags      SharedFlags;
    ImGuiDockNodeFlags      LocalFlags;
    ImGuiDockNodeState      State;
    ImGuiDockNode*          ParentNode;
    ImGuiDockNode*          ChildNodes[2];
    ImVector_ImGuiWindowPtr  Windows;
    ImGuiTabBar*            TabBar;
    ImVec2                  Pos;
    ImVec2                  Size;
    ImVec2                  SizeRef;
    ImGuiAxis               SplitAxis;
    ImGuiWindowClass        WindowClass;
    ImGuiWindow*            HostWindow;
    ImGuiWindow*            VisibleWindow;
    ImGuiDockNode*          CentralNode;
    ImGuiDockNode*          OnlyNodeWithWindows;
    int                     LastFrameAlive;
    int                     LastFrameActive;
    int                     LastFrameFocused;
    ImGuiID                 LastFocusedNodeId;
    ImGuiID                 SelectedTabId;
    ImGuiID                 WantCloseTabId;
    ImGuiDataAuthority      AuthorityForPos         :3;
    ImGuiDataAuthority      AuthorityForSize        :3;
    ImGuiDataAuthority      AuthorityForViewport    :3;
    bool                    IsVisible               :1;
    bool                    IsFocused               :1;
    bool                    HasCloseButton          :1;
    bool                    HasWindowMenuButton     :1;
    bool                    EnableCloseButton       :1;
    bool                    WantCloseAll            :1;
    bool                    WantLockSizeOnce        :1;
    bool                    WantMouseMove           :1;
    bool                    WantHiddenTabBarUpdate  :1;
    bool                    WantHiddenTabBarToggle  :1;
    bool                    MarkedForPosSizeWrite   :1;
};
struct ImGuiDockContext
{
    ImGuiStorage                    Nodes;
    ImVector_ImGuiDockRequest      Requests;
    ImVector_ImGuiDockNodeSettings NodesSettings;
    bool                            WantFullRebuild;
};
struct ImGuiViewportP
{
    ImGuiViewport _ImGuiViewport;
    int                 Idx;
    int                 LastFrameActive;
    int                 LastFrameDrawLists[2];
    int                 LastFrontMostStampCount;
    ImGuiID             LastNameHash;
    ImVec2              LastPos;
    float               Alpha;
    float               LastAlpha;
    short               PlatformMonitor;
    bool                PlatformWindowCreated;
    ImGuiWindow*        Window;
    ImDrawList*         DrawLists[2];
    ImDrawData          DrawDataP;
    ImDrawDataBuilder   DrawDataBuilder;
    ImVec2              LastPlatformPos;
    ImVec2              LastPlatformSize;
    ImVec2              LastRendererSize;
    ImVec2              CurrWorkOffsetMin;
    ImVec2              CurrWorkOffsetMax;
};
struct ImGuiWindowSettings
{
    ImGuiID     ID;
    ImVec2ih    Pos;
    ImVec2ih    Size;
    ImVec2ih    ViewportPos;
    ImGuiID     ViewportId;
    ImGuiID     DockId;
    ImGuiID     ClassId;
    short       DockOrder;
    bool        Collapsed;
    bool        WantApply;
};
struct ImGuiSettingsHandler
{
    const char* TypeName;
    ImGuiID     TypeHash;
    void        (*ClearAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);
    void        (*ReadInitFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);
    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name);
    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, const char* line);
    void        (*ApplyAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);
    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* out_buf);
    void*       UserData;
};
struct ImGuiMetricsConfig
{
    bool        ShowWindowsRects;
    bool        ShowWindowsBeginOrder;
    bool        ShowTablesRects;
    bool        ShowDrawCmdMesh;
    bool        ShowDrawCmdBoundingBoxes;
    bool        ShowDockingNodes;
    int         ShowWindowsRectsType;
    int         ShowTablesRectsType;
};
struct ImGuiStackSizes
{
    short   SizeOfIDStack;
    short   SizeOfColorStack;
    short   SizeOfStyleVarStack;
    short   SizeOfFontStack;
    short   SizeOfFocusScopeStack;
    short   SizeOfGroupStack;
    short   SizeOfBeginPopupStack;
};
typedef enum { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost, ImGuiContextHookType_EndFramePre, ImGuiContextHookType_EndFramePost, ImGuiContextHookType_RenderPre, ImGuiContextHookType_RenderPost, ImGuiContextHookType_Shutdown }ImGuiContextHookType;
struct ImGuiContextHook
{
    ImGuiContextHookType        Type;
    ImGuiID                     Owner;
    ImGuiContextHookCallback    Callback;
    void*                       UserData;
};
struct ImGuiContext
{
    bool                    Initialized;
    bool                    FontAtlasOwnedByContext;
    ImGuiIO                 IO;
    ImGuiPlatformIO         PlatformIO;
    ImGuiStyle              Style;
    ImGuiConfigFlags        ConfigFlagsCurrFrame;
    ImGuiConfigFlags        ConfigFlagsLastFrame;
    ImFont*                 Font;
    float                   FontSize;
    float                   FontBaseSize;
    ImDrawListSharedData    DrawListSharedData;
    double                  Time;
    int                     FrameCount;
    int                     FrameCountEnded;
    int                     FrameCountPlatformEnded;
    int                     FrameCountRendered;
    bool                    WithinFrameScope;
    bool                    WithinFrameScopeWithImplicitWindow;
    bool                    WithinEndChild;
    bool                    GcCompactAll;
    bool                    TestEngineHookItems;
    ImGuiID                 TestEngineHookIdInfo;
    void*                   TestEngine;
    ImVector_ImGuiWindowPtr  Windows;
    ImVector_ImGuiWindowPtr  WindowsFocusOrder;
    ImVector_ImGuiWindowPtr  WindowsTempSortBuffer;
    ImVector_ImGuiWindowPtr  CurrentWindowStack;
    ImGuiStorage            WindowsById;
    int                     WindowsActiveCount;
    ImGuiWindow*            CurrentWindow;
    ImGuiWindow*            HoveredWindow;
    ImGuiWindow*            HoveredRootWindow;
    ImGuiWindow*            HoveredWindowUnderMovingWindow;
    ImGuiDockNode*          HoveredDockNode;
    ImGuiWindow*            MovingWindow;
    ImGuiWindow*            WheelingWindow;
    ImVec2                  WheelingWindowRefMousePos;
    float                   WheelingWindowTimer;
    ImGuiID                 HoveredId;
    ImGuiID                 HoveredIdPreviousFrame;
    bool                    HoveredIdAllowOverlap;
    bool                    HoveredIdUsingMouseWheel;
    bool                    HoveredIdPreviousFrameUsingMouseWheel;
    bool                    HoveredIdDisabled;
    float                   HoveredIdTimer;
    float                   HoveredIdNotActiveTimer;
    ImGuiID                 ActiveId;
    ImGuiID                 ActiveIdIsAlive;
    float                   ActiveIdTimer;
    bool                    ActiveIdIsJustActivated;
    bool                    ActiveIdAllowOverlap;
    bool                    ActiveIdNoClearOnFocusLoss;
    bool                    ActiveIdHasBeenPressedBefore;
    bool                    ActiveIdHasBeenEditedBefore;
    bool                    ActiveIdHasBeenEditedThisFrame;
    bool                    ActiveIdUsingMouseWheel;
    ImU32                   ActiveIdUsingNavDirMask;
    ImU32                   ActiveIdUsingNavInputMask;
    ImU64                   ActiveIdUsingKeyInputMask;
    ImVec2                  ActiveIdClickOffset;
    ImGuiWindow*            ActiveIdWindow;
    ImGuiInputSource        ActiveIdSource;
    int                     ActiveIdMouseButton;
    ImGuiID                 ActiveIdPreviousFrame;
    bool                    ActiveIdPreviousFrameIsAlive;
    bool                    ActiveIdPreviousFrameHasBeenEditedBefore;
    ImGuiWindow*            ActiveIdPreviousFrameWindow;
    ImGuiID                 LastActiveId;
    float                   LastActiveIdTimer;
    ImGuiNextWindowData     NextWindowData;
    ImGuiNextItemData       NextItemData;
    ImVector_ImGuiColorMod ColorStack;
    ImVector_ImGuiStyleMod StyleVarStack;
    ImVector_ImFontPtr       FontStack;
    ImVector_ImGuiID       FocusScopeStack;
    ImVector_ImGuiItemFlags ItemFlagsStack;
    ImVector_ImGuiGroupData GroupStack;
    ImVector_ImGuiPopupData OpenPopupStack;
    ImVector_ImGuiPopupData BeginPopupStack;
    ImVector_ImGuiViewportPPtr Viewports;
    float                   CurrentDpiScale;
    ImGuiViewportP*         CurrentViewport;
    ImGuiViewportP*         MouseViewport;
    ImGuiViewportP*         MouseLastHoveredViewport;
    int                     ViewportFrontMostStampCount;
    ImGuiWindow*            NavWindow;
    ImGuiID                 NavId;
    ImGuiID                 NavFocusScopeId;
    ImGuiID                 NavActivateId;
    ImGuiID                 NavActivateDownId;
    ImGuiID                 NavActivatePressedId;
    ImGuiID                 NavInputId;
    ImGuiID                 NavJustTabbedId;
    ImGuiID                 NavJustMovedToId;
    ImGuiID                 NavJustMovedToFocusScopeId;
    ImGuiKeyModFlags        NavJustMovedToKeyMods;
    ImGuiID                 NavNextActivateId;
    ImGuiInputSource        NavInputSource;
    ImRect                  NavScoringRect;
    int                     NavScoringCount;
    ImGuiNavLayer           NavLayer;
    int                     NavIdTabCounter;
    bool                    NavIdIsAlive;
    bool                    NavMousePosDirty;
    bool                    NavDisableHighlight;
    bool                    NavDisableMouseHover;
    bool                    NavAnyRequest;
    bool                    NavInitRequest;
    bool                    NavInitRequestFromMove;
    ImGuiID                 NavInitResultId;
    ImRect                  NavInitResultRectRel;
    bool                    NavMoveRequest;
    ImGuiNavMoveFlags       NavMoveRequestFlags;
    ImGuiNavForward         NavMoveRequestForward;
    ImGuiKeyModFlags        NavMoveRequestKeyMods;
    ImGuiDir                NavMoveDir, NavMoveDirLast;
    ImGuiDir                NavMoveClipDir;
    ImGuiNavMoveResult      NavMoveResultLocal;
    ImGuiNavMoveResult      NavMoveResultLocalVisibleSet;
    ImGuiNavMoveResult      NavMoveResultOther;
    ImGuiWindow*            NavWrapRequestWindow;
    ImGuiNavMoveFlags       NavWrapRequestFlags;
    ImGuiWindow*            NavWindowingTarget;
    ImGuiWindow*            NavWindowingTargetAnim;
    ImGuiWindow*            NavWindowingListWindow;
    float                   NavWindowingTimer;
    float                   NavWindowingHighlightAlpha;
    bool                    NavWindowingToggleLayer;
    ImGuiWindow*            FocusRequestCurrWindow;
    ImGuiWindow*            FocusRequestNextWindow;
    int                     FocusRequestCurrCounterRegular;
    int                     FocusRequestCurrCounterTabStop;
    int                     FocusRequestNextCounterRegular;
    int                     FocusRequestNextCounterTabStop;
    bool                    FocusTabPressed;
    float                   DimBgRatio;
    ImGuiMouseCursor        MouseCursor;
    bool                    DragDropActive;
    bool                    DragDropWithinSource;
    bool                    DragDropWithinTarget;
    ImGuiDragDropFlags      DragDropSourceFlags;
    int                     DragDropSourceFrameCount;
    int                     DragDropMouseButton;
    ImGuiPayload            DragDropPayload;
    ImRect                  DragDropTargetRect;
    ImGuiID                 DragDropTargetId;
    ImGuiDragDropFlags      DragDropAcceptFlags;
    float                   DragDropAcceptIdCurrRectSurface;
    ImGuiID                 DragDropAcceptIdCurr;
    ImGuiID                 DragDropAcceptIdPrev;
    int                     DragDropAcceptFrameCount;
    ImGuiID                 DragDropHoldJustPressedId;
    ImVector_unsigned_char DragDropPayloadBufHeap;
    unsigned char           DragDropPayloadBufLocal[16];
    ImGuiTable*                     CurrentTable;
    ImPool_ImGuiTable              Tables;
    ImVector_ImGuiPtrOrIndex       CurrentTableStack;
    ImVector_float                 TablesLastTimeActive;
    ImVector_ImDrawChannel         DrawChannelsTempMergeBuffer;
    ImGuiTabBar*                    CurrentTabBar;
    ImPool_ImGuiTabBar             TabBars;
    ImVector_ImGuiPtrOrIndex       CurrentTabBarStack;
    ImVector_ImGuiShrinkWidthItem  ShrinkWidthBuffer;
    ImVec2                  LastValidMousePos;
    ImGuiInputTextState     InputTextState;
    ImFont                  InputTextPasswordFont;
    ImGuiID                 TempInputId;
    ImGuiColorEditFlags     ColorEditOptions;
    float                   ColorEditLastHue;
    float                   ColorEditLastSat;
    float                   ColorEditLastColor[3];
    ImVec4                  ColorPickerRef;
    float                   SliderCurrentAccum;
    bool                    SliderCurrentAccumDirty;
    bool                    DragCurrentAccumDirty;
    float                   DragCurrentAccum;
    float                   DragSpeedDefaultRatio;
    float                   ScrollbarClickDeltaToGrabCenter;
    int                     TooltipOverrideCount;
    float                   TooltipSlowDelay;
    ImVector_char          ClipboardHandlerData;
    ImVector_ImGuiID       MenusIdSubmittedThisFrame;
    ImVec2                  PlatformImePos;
    ImVec2                  PlatformImeLastPos;
    ImGuiViewportP*         PlatformImePosViewport;
    char                    PlatformLocaleDecimalPoint;
    ImGuiDockContext        DockContext;
    bool                    SettingsLoaded;
    float                   SettingsDirtyTimer;
    ImGuiTextBuffer         SettingsIniData;
    ImVector_ImGuiSettingsHandler      SettingsHandlers;
    ImChunkStream_ImGuiWindowSettings  SettingsWindows;
    ImChunkStream_ImGuiTableSettings   SettingsTables;
    ImVector_ImGuiContextHook          Hooks;
    bool                    LogEnabled;
    ImGuiLogType            LogType;
    ImFileHandle            LogFile;
    ImGuiTextBuffer         LogBuffer;
    float                   LogLinePosY;
    bool                    LogLineFirstItem;
    int                     LogDepthRef;
    int                     LogDepthToExpand;
    int                     LogDepthToExpandDefault;
    bool                    DebugItemPickerActive;
    ImGuiID                 DebugItemPickerBreakId;
    ImGuiMetricsConfig      DebugMetricsConfig;
    float                   FramerateSecPerFrame[120];
    int                     FramerateSecPerFrameIdx;
    float                   FramerateSecPerFrameAccum;
    int                     WantCaptureMouseNextFrame;
    int                     WantCaptureKeyboardNextFrame;
    int                     WantTextInputNextFrame;
    char                    TempBuffer[1024 * 3 + 1];
};
struct ImGuiWindowTempData
{
    ImVec2                  CursorPos;
    ImVec2                  CursorPosPrevLine;
    ImVec2                  CursorStartPos;
    ImVec2                  CursorMaxPos;
    ImVec2                  CurrLineSize;
    ImVec2                  PrevLineSize;
    float                   CurrLineTextBaseOffset;
    float                   PrevLineTextBaseOffset;
    ImVec1                  Indent;
    ImVec1                  ColumnsOffset;
    ImVec1                  GroupOffset;
    ImGuiID                 LastItemId;
    ImGuiItemStatusFlags    LastItemStatusFlags;
    ImRect                  LastItemRect;
    ImRect                  LastItemDisplayRect;
    ImGuiNavLayer           NavLayerCurrent;
    int                     NavLayerActiveMask;
    int                     NavLayerActiveMaskNext;
    ImGuiID                 NavFocusScopeIdCurrent;
    bool                    NavHideHighlightOneFrame;
    bool                    NavHasScroll;
    bool                    MenuBarAppending;
    ImVec2                  MenuBarOffset;
    ImGuiMenuColumns        MenuColumns;
    int                     TreeDepth;
    ImU32                   TreeJumpToParentOnPopMask;
    ImVector_ImGuiWindowPtr  ChildWindows;
    ImGuiStorage*           StateStorage;
    ImGuiOldColumns*        CurrentColumns;
    int                     CurrentTableIdx;
    ImGuiLayoutType         LayoutType;
    ImGuiLayoutType         ParentLayoutType;
    int                     FocusCounterRegular;
    int                     FocusCounterTabStop;
    ImGuiItemFlags          ItemFlags;
    float                   ItemWidth;
    float                   TextWrapPos;
    ImVector_float         ItemWidthStack;
    ImVector_float         TextWrapPosStack;
    ImGuiStackSizes         StackSizesOnBegin;
};
struct ImGuiWindow
{
    char*                   Name;
    ImGuiID                 ID;
    ImGuiWindowFlags        Flags, FlagsPreviousFrame;
    ImGuiWindowClass        WindowClass;
    ImGuiViewportP*         Viewport;
    ImGuiID                 ViewportId;
    ImVec2                  ViewportPos;
    int                     ViewportAllowPlatformMonitorExtend;
    ImVec2                  Pos;
    ImVec2                  Size;
    ImVec2                  SizeFull;
    ImVec2                  ContentSize;
    ImVec2                  ContentSizeExplicit;
    ImVec2                  WindowPadding;
    float                   WindowRounding;
    float                   WindowBorderSize;
    int                     NameBufLen;
    ImGuiID                 MoveId;
    ImGuiID                 ChildId;
    ImVec2                  Scroll;
    ImVec2                  ScrollMax;
    ImVec2                  ScrollTarget;
    ImVec2                  ScrollTargetCenterRatio;
    ImVec2                  ScrollTargetEdgeSnapDist;
    ImVec2                  ScrollbarSizes;
    bool                    ScrollbarX, ScrollbarY;
    bool                    ViewportOwned;
    bool                    Active;
    bool                    WasActive;
    bool                    WriteAccessed;
    bool                    Collapsed;
    bool                    WantCollapseToggle;
    bool                    SkipItems;
    bool                    Appearing;
    bool                    Hidden;
    bool                    IsFallbackWindow;
    bool                    HasCloseButton;
    signed char             ResizeBorderHeld;
    short                   BeginCount;
    short                   BeginOrderWithinParent;
    short                   BeginOrderWithinContext;
    ImGuiID                 PopupId;
    ImS8                    AutoFitFramesX, AutoFitFramesY;
    ImS8                    AutoFitChildAxises;
    bool                    AutoFitOnlyGrows;
    ImGuiDir                AutoPosLastDirection;
    ImS8                    HiddenFramesCanSkipItems;
    ImS8                    HiddenFramesCannotSkipItems;
    ImS8                    HiddenFramesForRenderOnly;
    ImGuiCond               SetWindowPosAllowFlags : 8;
    ImGuiCond               SetWindowSizeAllowFlags : 8;
    ImGuiCond               SetWindowCollapsedAllowFlags : 8;
    ImGuiCond               SetWindowDockAllowFlags : 8;
    ImVec2                  SetWindowPosVal;
    ImVec2                  SetWindowPosPivot;
    ImVector_ImGuiID       IDStack;
    ImGuiWindowTempData     DC;
    ImRect                  OuterRectClipped;
    ImRect                  InnerRect;
    ImRect                  InnerClipRect;
    ImRect                  WorkRect;
    ImRect                  ParentWorkRect;
    ImRect                  ClipRect;
    ImRect                  ContentRegionRect;
    ImVec2ih                HitTestHoleSize;
    ImVec2ih                HitTestHoleOffset;
    int                     LastFrameActive;
    int                     LastFrameJustFocused;
    float                   LastTimeActive;
    float                   ItemWidthDefault;
    ImGuiStorage            StateStorage;
    ImVector_ImGuiOldColumns ColumnsStorage;
    float                   FontWindowScale;
    float                   FontDpiScale;
    int                     SettingsOffset;
    ImDrawList*             DrawList;
    ImDrawList              DrawListInst;
    ImGuiWindow*            ParentWindow;
    ImGuiWindow*            RootWindow;
    ImGuiWindow*            RootWindowDockStop;
    ImGuiWindow*            RootWindowForTitleBarHighlight;
    ImGuiWindow*            RootWindowForNav;
    ImGuiWindow*            NavLastChildNavWindow;
    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];
    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];
    int                     MemoryDrawListIdxCapacity;
    int                     MemoryDrawListVtxCapacity;
    bool                    MemoryCompacted;
    ImGuiDockNode*          DockNode;
    ImGuiDockNode*          DockNodeAsHost;
    ImGuiID                 DockId;
    ImGuiItemStatusFlags    DockTabItemStatusFlags;
    ImRect                  DockTabItemRect;
    short                   DockOrder;
    bool                    DockIsActive        :1;
    bool                    DockTabIsVisible    :1;
    bool                    DockTabWantClose    :1;
};
struct ImGuiLastItemDataBackup
{
    ImGuiID                 LastItemId;
    ImGuiItemStatusFlags    LastItemStatusFlags;
    ImRect                  LastItemRect;
    ImRect                  LastItemDisplayRect;
};
typedef enum {
    ImGuiTabBarFlags_DockNode                   = 1 << 20,
    ImGuiTabBarFlags_IsFocused                  = 1 << 21,
    ImGuiTabBarFlags_SaveSettings               = 1 << 22
}ImGuiTabBarFlagsPrivate_;
typedef enum {
    ImGuiTabItemFlags_NoCloseButton             = 1 << 20,
    ImGuiTabItemFlags_Button                    = 1 << 21,
    ImGuiTabItemFlags_Unsorted                  = 1 << 22,
    ImGuiTabItemFlags_Preview                   = 1 << 23
}ImGuiTabItemFlagsPrivate_;
struct ImGuiTabItem
{
    ImGuiID             ID;
    ImGuiTabItemFlags   Flags;
    ImGuiWindow*        Window;
    int                 LastFrameVisible;
    int                 LastFrameSelected;
    float               Offset;
    float               Width;
    float               ContentWidth;
    ImS16               NameOffset;
    ImS16               BeginOrder;
    ImS16               IndexDuringLayout;
    bool                WantClose;
};
struct ImGuiTabBar
{
    ImVector_ImGuiTabItem Tabs;
    ImGuiTabBarFlags    Flags;
    ImGuiID             ID;
    ImGuiID             SelectedTabId;
    ImGuiID             NextSelectedTabId;
    ImGuiID             VisibleTabId;
    int                 CurrFrameVisible;
    int                 PrevFrameVisible;
    ImRect              BarRect;
    float               CurrTabsContentsHeight;
    float               PrevTabsContentsHeight;
    float               WidthAllTabs;
    float               WidthAllTabsIdeal;
    float               ScrollingAnim;
    float               ScrollingTarget;
    float               ScrollingTargetDistToVisibility;
    float               ScrollingSpeed;
    float               ScrollingRectMinX;
    float               ScrollingRectMaxX;
    ImGuiID             ReorderRequestTabId;
    ImS8                ReorderRequestDir;
    ImS8                BeginCount;
    bool                WantLayout;
    bool                VisibleTabWasSubmitted;
    bool                TabsAddedNew;
    ImS16               TabsActiveCount;
    ImS16               LastTabItemIdx;
    float               ItemSpacingY;
    ImVec2              FramePadding;
    ImVec2              BackupCursorPos;
    ImGuiTextBuffer     TabsNames;
};
struct ImGuiTableColumn
{
    ImRect                  ClipRect;
    ImGuiID                 UserID;
    ImGuiTableColumnFlags   Flags;
    float                   MinX;
    float                   MaxX;
    float                   InitStretchWeightOrWidth;
    float                   StretchWeight;
    float                   WidthAuto;
    float                   WidthRequest;
    float                   WidthGiven;
    float                   WorkMinX;
    float                   WorkMaxX;
    float                   ItemWidth;
    float                   ContentMaxXFrozen;
    float                   ContentMaxXUnfrozen;
    float                   ContentMaxXHeadersUsed;
    float                   ContentMaxXHeadersIdeal;
    ImS16                   NameOffset;
    ImGuiTableColumnIdx     DisplayOrder;
    ImGuiTableColumnIdx     IndexWithinEnabledSet;
    ImGuiTableColumnIdx     PrevEnabledColumn;
    ImGuiTableColumnIdx     NextEnabledColumn;
    ImGuiTableColumnIdx     SortOrder;
    ImGuiTableDrawChannelIdx DrawChannelCurrent;
    ImGuiTableDrawChannelIdx DrawChannelFrozen;
    ImGuiTableDrawChannelIdx DrawChannelUnfrozen;
    bool                    IsEnabled;
    bool                    IsEnabledNextFrame;
    bool                    IsVisibleX;
    bool                    IsVisibleY;
    bool                    IsRequestOutput;
    bool                    IsSkipItems;
    bool                    IsPreserveWidthAuto;
    ImS8                    NavLayerCurrent;
    ImU8                    AutoFitQueue;
    ImU8                    CannotSkipItemsQueue;
    ImU8                    SortDirection : 2;
    ImU8                    SortDirectionsAvailCount : 2;
    ImU8                    SortDirectionsAvailMask : 4;
    ImU8                    SortDirectionsAvailList;
};
struct ImGuiTableCellData
{
    ImU32                       BgColor;
    ImGuiTableColumnIdx         Column;
};
struct ImGuiTable
{
    ImGuiID                     ID;
    ImGuiTableFlags             Flags;
    void*                       RawData;
    ImSpan_ImGuiTableColumn    Columns;
    ImSpan_ImGuiTableColumnIdx DisplayOrderToIndex;
    ImSpan_ImGuiTableCellData  RowCellData;
    ImU64                       EnabledMaskByDisplayOrder;
    ImU64                       EnabledMaskByIndex;
    ImU64                       VisibleMaskByIndex;
    ImU64                       RequestOutputMaskByIndex;
    ImGuiTableFlags             SettingsLoadedFlags;
    int                         SettingsOffset;
    int                         LastFrameActive;
    int                         ColumnsCount;
    int                         CurrentRow;
    int                         CurrentColumn;
    ImS16                       InstanceCurrent;
    ImS16                       InstanceInteracted;
    float                       RowPosY1;
    float                       RowPosY2;
    float                       RowMinHeight;
    float                       RowTextBaseline;
    float                       RowIndentOffsetX;
    ImGuiTableRowFlags          RowFlags : 16;
    ImGuiTableRowFlags          LastRowFlags : 16;
    int                         RowBgColorCounter;
    ImU32                       RowBgColor[2];
    ImU32                       BorderColorStrong;
    ImU32                       BorderColorLight;
    float                       BorderX1;
    float                       BorderX2;
    float                       HostIndentX;
    float                       MinColumnWidth;
    float                       OuterPaddingX;
    float                       CellPaddingX;
    float                       CellPaddingY;
    float                       CellSpacingX1;
    float                       CellSpacingX2;
    float                       LastOuterHeight;
    float                       LastFirstRowHeight;
    float                       InnerWidth;
    float                       ColumnsGivenWidth;
    float                       ColumnsAutoFitWidth;
    float                       ResizedColumnNextWidth;
    float                       ResizeLockMinContentsX2;
    float                       RefScale;
    ImRect                      OuterRect;
    ImRect                      InnerRect;
    ImRect                      WorkRect;
    ImRect                      InnerClipRect;
    ImRect                      BgClipRect;
    ImRect                      Bg0ClipRectForDrawCmd;
    ImRect                      Bg2ClipRectForDrawCmd;
    ImRect                      HostClipRect;
    ImRect                      HostBackupWorkRect;
    ImRect                      HostBackupParentWorkRect;
    ImRect                      HostBackupInnerClipRect;
    ImVec2                      HostBackupPrevLineSize;
    ImVec2                      HostBackupCurrLineSize;
    ImVec2                      HostBackupCursorMaxPos;
    ImVec1                      HostBackupColumnsOffset;
    float                       HostBackupItemWidth;
    int                         HostBackupItemWidthStackSize;
    ImGuiWindow*                OuterWindow;
    ImGuiWindow*                InnerWindow;
    ImGuiTextBuffer             ColumnsNames;
    ImDrawListSplitter          DrawSplitter;
    ImGuiTableColumnSortSpecs   SortSpecsSingle;
    ImVector_ImGuiTableColumnSortSpecs SortSpecsMulti;
    ImGuiTableSortSpecs         SortSpecs;
    ImGuiTableColumnIdx         SortSpecsCount;
    ImGuiTableColumnIdx         ColumnsEnabledCount;
    ImGuiTableColumnIdx         ColumnsEnabledFixedCount;
    ImGuiTableColumnIdx         DeclColumnsCount;
    ImGuiTableColumnIdx         HoveredColumnBody;
    ImGuiTableColumnIdx         HoveredColumnBorder;
    ImGuiTableColumnIdx         AutoFitSingleStretchColumn;
    ImGuiTableColumnIdx         ResizedColumn;
    ImGuiTableColumnIdx         LastResizedColumn;
    ImGuiTableColumnIdx         HeldHeaderColumn;
    ImGuiTableColumnIdx         ReorderColumn;
    ImGuiTableColumnIdx         ReorderColumnDir;
    ImGuiTableColumnIdx         LeftMostStretchedColumn;
    ImGuiTableColumnIdx         RightMostStretchedColumn;
    ImGuiTableColumnIdx         RightMostEnabledColumn;
    ImGuiTableColumnIdx         ContextPopupColumn;
    ImGuiTableColumnIdx         FreezeRowsRequest;
    ImGuiTableColumnIdx         FreezeRowsCount;
    ImGuiTableColumnIdx         FreezeColumnsRequest;
    ImGuiTableColumnIdx         FreezeColumnsCount;
    ImGuiTableColumnIdx         RowCellDataCurrent;
    ImGuiTableDrawChannelIdx    DummyDrawChannel;
    ImGuiTableDrawChannelIdx    Bg2DrawChannelCurrent;
    ImGuiTableDrawChannelIdx    Bg2DrawChannelUnfrozen;
    bool                        IsLayoutLocked;
    bool                        IsInsideRow;
    bool                        IsInitializing;
    bool                        IsSortSpecsDirty;
    bool                        IsUsingHeaders;
    bool                        IsContextPopupOpen;
    bool                        IsSettingsRequestLoad;
    bool                        IsSettingsDirty;
    bool                        IsDefaultDisplayOrder;
    bool                        IsResetAllRequest;
    bool                        IsResetDisplayOrderRequest;
    bool                        IsUnfrozenRows;
    bool                        IsOuterRectAutoFitX;
    bool                        MemoryCompacted;
    bool                        HostSkipItems;
};
struct ImGuiTableColumnSettings
{
    float                   WidthOrWeight;
    ImGuiID                 UserID;
    ImGuiTableColumnIdx     Index;
    ImGuiTableColumnIdx     DisplayOrder;
    ImGuiTableColumnIdx     SortOrder;
    ImU8                    SortDirection : 2;
    ImU8                    IsEnabled : 1;
    ImU8                    IsStretch : 1;
};
struct ImGuiTableSettings
{
    ImGuiID                     ID;
    ImGuiTableFlags             SaveFlags;
    float                       RefScale;
    ImGuiTableColumnIdx         ColumnsCount;
    ImGuiTableColumnIdx         ColumnsCountMax;
    bool                        WantApply;
};

#endif // BEE_IMGUI_GENERATOR_IMPLEMENTATION


namespace bee {


struct ImGuiModule
{
    void (*ImBitVector_Clear)(ImBitVector* self) { nullptr };
    void (*ImBitVector_ClearBit)(ImBitVector* self,int n) { nullptr };
    void (*ImBitVector_Create)(ImBitVector* self,int sz) { nullptr };
    void (*ImBitVector_SetBit)(ImBitVector* self,int n) { nullptr };
    bool (*ImBitVector_TestBit)(ImBitVector* self,int n) { nullptr };
    void (*ImColor_HSV)(ImColor *pOut,float h,float s,float v,float a) { nullptr };
    ImColor* (*ImColor_ImColorFloat)(float r,float g,float b,float a) { nullptr };
    ImColor* (*ImColor_ImColorInt)(int r,int g,int b,int a) { nullptr };
    ImColor* (*ImColor_ImColorNil)() { nullptr };
    ImColor* (*ImColor_ImColorU32)(ImU32 rgba) { nullptr };
    ImColor* (*ImColor_ImColorVec4)(const ImVec4 col) { nullptr };
    void (*ImColor_SetHSV)(ImColor* self,float h,float s,float v,float a) { nullptr };
    void (*ImColor_destroy)(ImColor* self) { nullptr };
    ImDrawCmd* (*ImDrawCmd_ImDrawCmd)() { nullptr };
    void (*ImDrawCmd_destroy)(ImDrawCmd* self) { nullptr };
    void (*ImDrawDataBuilder_Clear)(ImDrawDataBuilder* self) { nullptr };
    void (*ImDrawDataBuilder_ClearFreeMemory)(ImDrawDataBuilder* self) { nullptr };
    void (*ImDrawDataBuilder_FlattenIntoSingleLayer)(ImDrawDataBuilder* self) { nullptr };
    void (*ImDrawData_Clear)(ImDrawData* self) { nullptr };
    void (*ImDrawData_DeIndexAllBuffers)(ImDrawData* self) { nullptr };
    ImDrawData* (*ImDrawData_ImDrawData)() { nullptr };
    void (*ImDrawData_ScaleClipRects)(ImDrawData* self,const ImVec2 fb_scale) { nullptr };
    void (*ImDrawData_destroy)(ImDrawData* self) { nullptr };
    ImDrawListSharedData* (*ImDrawListSharedData_ImDrawListSharedData)() { nullptr };
    void (*ImDrawListSharedData_SetCircleSegmentMaxError)(ImDrawListSharedData* self,float max_error) { nullptr };
    void (*ImDrawListSharedData_destroy)(ImDrawListSharedData* self) { nullptr };
    void (*ImDrawListSplitter_Clear)(ImDrawListSplitter* self) { nullptr };
    void (*ImDrawListSplitter_ClearFreeMemory)(ImDrawListSplitter* self) { nullptr };
    ImDrawListSplitter* (*ImDrawListSplitter_ImDrawListSplitter)() { nullptr };
    void (*ImDrawListSplitter_Merge)(ImDrawListSplitter* self,ImDrawList* draw_list) { nullptr };
    void (*ImDrawListSplitter_SetCurrentChannel)(ImDrawListSplitter* self,ImDrawList* draw_list,int channel_idx) { nullptr };
    void (*ImDrawListSplitter_Split)(ImDrawListSplitter* self,ImDrawList* draw_list,int count) { nullptr };
    void (*ImDrawListSplitter_destroy)(ImDrawListSplitter* self) { nullptr };
    void (*ImDrawList_AddBezierCubic)(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness,int num_segments) { nullptr };
    void (*ImDrawList_AddBezierQuadratic)(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness,int num_segments) { nullptr };
    void (*ImDrawList_AddCallback)(ImDrawList* self,ImDrawCallback callback,void* callback_data) { nullptr };
    void (*ImDrawList_AddCircle)(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness) { nullptr };
    void (*ImDrawList_AddCircleFilled)(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments) { nullptr };
    void (*ImDrawList_AddConvexPolyFilled)(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col) { nullptr };
    void (*ImDrawList_AddDrawCmd)(ImDrawList* self) { nullptr };
    void (*ImDrawList_AddImage)(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col) { nullptr };
    void (*ImDrawList_AddImageQuad)(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 uv1,const ImVec2 uv2,const ImVec2 uv3,const ImVec2 uv4,ImU32 col) { nullptr };
    void (*ImDrawList_AddImageRounded)(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col,float rounding,ImDrawCornerFlags rounding_corners) { nullptr };
    void (*ImDrawList_AddLine)(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,ImU32 col,float thickness) { nullptr };
    void (*ImDrawList_AddNgon)(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness) { nullptr };
    void (*ImDrawList_AddNgonFilled)(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments) { nullptr };
    void (*ImDrawList_AddPolyline)(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col,bool closed,float thickness) { nullptr };
    void (*ImDrawList_AddQuad)(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness) { nullptr };
    void (*ImDrawList_AddQuadFilled)(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col) { nullptr };
    void (*ImDrawList_AddRect)(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawCornerFlags rounding_corners,float thickness) { nullptr };
    void (*ImDrawList_AddRectFilled)(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawCornerFlags rounding_corners) { nullptr };
    void (*ImDrawList_AddRectFilledMultiColor)(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left) { nullptr };
    void (*ImDrawList_AddTextFontPtr)(ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end,float wrap_width,const ImVec4* cpu_fine_clip_rect) { nullptr };
    void (*ImDrawList_AddTextVec2)(ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end) { nullptr };
    void (*ImDrawList_AddTriangle)(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness) { nullptr };
    void (*ImDrawList_AddTriangleFilled)(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col) { nullptr };
    void (*ImDrawList_ChannelsMerge)(ImDrawList* self) { nullptr };
    void (*ImDrawList_ChannelsSetCurrent)(ImDrawList* self,int n) { nullptr };
    void (*ImDrawList_ChannelsSplit)(ImDrawList* self,int count) { nullptr };
    ImDrawList* (*ImDrawList_CloneOutput)(ImDrawList* self) { nullptr };
    void (*ImDrawList_GetClipRectMax)(ImVec2 *pOut,ImDrawList* self) { nullptr };
    void (*ImDrawList_GetClipRectMin)(ImVec2 *pOut,ImDrawList* self) { nullptr };
    ImDrawList* (*ImDrawList_ImDrawList)(const ImDrawListSharedData* shared_data) { nullptr };
    void (*ImDrawList_PathArcTo)(ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments) { nullptr };
    void (*ImDrawList_PathArcToFast)(ImDrawList* self,const ImVec2 center,float radius,int a_min_of_12,int a_max_of_12) { nullptr };
    void (*ImDrawList_PathBezierCubicCurveTo)(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,int num_segments) { nullptr };
    void (*ImDrawList_PathBezierQuadraticCurveTo)(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,int num_segments) { nullptr };
    void (*ImDrawList_PathClear)(ImDrawList* self) { nullptr };
    void (*ImDrawList_PathFillConvex)(ImDrawList* self,ImU32 col) { nullptr };
    void (*ImDrawList_PathLineTo)(ImDrawList* self,const ImVec2 pos) { nullptr };
    void (*ImDrawList_PathLineToMergeDuplicate)(ImDrawList* self,const ImVec2 pos) { nullptr };
    void (*ImDrawList_PathRect)(ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max,float rounding,ImDrawCornerFlags rounding_corners) { nullptr };
    void (*ImDrawList_PathStroke)(ImDrawList* self,ImU32 col,bool closed,float thickness) { nullptr };
    void (*ImDrawList_PopClipRect)(ImDrawList* self) { nullptr };
    void (*ImDrawList_PopTextureID)(ImDrawList* self) { nullptr };
    void (*ImDrawList_PrimQuadUV)(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col) { nullptr };
    void (*ImDrawList_PrimRect)(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col) { nullptr };
    void (*ImDrawList_PrimRectUV)(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col) { nullptr };
    void (*ImDrawList_PrimReserve)(ImDrawList* self,int idx_count,int vtx_count) { nullptr };
    void (*ImDrawList_PrimUnreserve)(ImDrawList* self,int idx_count,int vtx_count) { nullptr };
    void (*ImDrawList_PrimVtx)(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col) { nullptr };
    void (*ImDrawList_PrimWriteIdx)(ImDrawList* self,ImDrawIdx idx) { nullptr };
    void (*ImDrawList_PrimWriteVtx)(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col) { nullptr };
    void (*ImDrawList_PushClipRect)(ImDrawList* self,ImVec2 clip_rect_min,ImVec2 clip_rect_max,bool intersect_with_current_clip_rect) { nullptr };
    void (*ImDrawList_PushClipRectFullScreen)(ImDrawList* self) { nullptr };
    void (*ImDrawList_PushTextureID)(ImDrawList* self,ImTextureID texture_id) { nullptr };
    void (*ImDrawList__ClearFreeMemory)(ImDrawList* self) { nullptr };
    void (*ImDrawList__OnChangedClipRect)(ImDrawList* self) { nullptr };
    void (*ImDrawList__OnChangedTextureID)(ImDrawList* self) { nullptr };
    void (*ImDrawList__OnChangedVtxOffset)(ImDrawList* self) { nullptr };
    void (*ImDrawList__PopUnusedDrawCmd)(ImDrawList* self) { nullptr };
    void (*ImDrawList__ResetForNewFrame)(ImDrawList* self) { nullptr };
    void (*ImDrawList_destroy)(ImDrawList* self) { nullptr };
    ImFontAtlasCustomRect* (*ImFontAtlasCustomRect_ImFontAtlasCustomRect)() { nullptr };
    bool (*ImFontAtlasCustomRect_IsPacked)(ImFontAtlasCustomRect* self) { nullptr };
    void (*ImFontAtlasCustomRect_destroy)(ImFontAtlasCustomRect* self) { nullptr };
    int (*ImFontAtlas_AddCustomRectFontGlyph)(ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset) { nullptr };
    int (*ImFontAtlas_AddCustomRectRegular)(ImFontAtlas* self,int width,int height) { nullptr };
    ImFont* (*ImFontAtlas_AddFont)(ImFontAtlas* self,const ImFontConfig* font_cfg) { nullptr };
    ImFont* (*ImFontAtlas_AddFontDefault)(ImFontAtlas* self,const ImFontConfig* font_cfg) { nullptr };
    ImFont* (*ImFontAtlas_AddFontFromFileTTF)(ImFontAtlas* self,const char* filename,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges) { nullptr };
    ImFont* (*ImFontAtlas_AddFontFromMemoryCompressedBase85TTF)(ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges) { nullptr };
    ImFont* (*ImFontAtlas_AddFontFromMemoryCompressedTTF)(ImFontAtlas* self,const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges) { nullptr };
    ImFont* (*ImFontAtlas_AddFontFromMemoryTTF)(ImFontAtlas* self,void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges) { nullptr };
    bool (*ImFontAtlas_Build)(ImFontAtlas* self) { nullptr };
    void (*ImFontAtlas_CalcCustomRectUV)(ImFontAtlas* self,const ImFontAtlasCustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max) { nullptr };
    void (*ImFontAtlas_Clear)(ImFontAtlas* self) { nullptr };
    void (*ImFontAtlas_ClearFonts)(ImFontAtlas* self) { nullptr };
    void (*ImFontAtlas_ClearInputData)(ImFontAtlas* self) { nullptr };
    void (*ImFontAtlas_ClearTexData)(ImFontAtlas* self) { nullptr };
    ImFontAtlasCustomRect* (*ImFontAtlas_GetCustomRectByIndex)(ImFontAtlas* self,int index) { nullptr };
    const ImWchar* (*ImFontAtlas_GetGlyphRangesChineseFull)(ImFontAtlas* self) { nullptr };
    const ImWchar* (*ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon)(ImFontAtlas* self) { nullptr };
    const ImWchar* (*ImFontAtlas_GetGlyphRangesCyrillic)(ImFontAtlas* self) { nullptr };
    const ImWchar* (*ImFontAtlas_GetGlyphRangesDefault)(ImFontAtlas* self) { nullptr };
    const ImWchar* (*ImFontAtlas_GetGlyphRangesJapanese)(ImFontAtlas* self) { nullptr };
    const ImWchar* (*ImFontAtlas_GetGlyphRangesKorean)(ImFontAtlas* self) { nullptr };
    const ImWchar* (*ImFontAtlas_GetGlyphRangesThai)(ImFontAtlas* self) { nullptr };
    const ImWchar* (*ImFontAtlas_GetGlyphRangesVietnamese)(ImFontAtlas* self) { nullptr };
    bool (*ImFontAtlas_GetMouseCursorTexData)(ImFontAtlas* self,ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border[2],ImVec2 out_uv_fill[2]) { nullptr };
    void (*ImFontAtlas_GetTexDataAsAlpha8)(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel) { nullptr };
    void (*ImFontAtlas_GetTexDataAsRGBA32)(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel) { nullptr };
    ImFontAtlas* (*ImFontAtlas_ImFontAtlas)() { nullptr };
    bool (*ImFontAtlas_IsBuilt)(ImFontAtlas* self) { nullptr };
    void (*ImFontAtlas_SetTexID)(ImFontAtlas* self,ImTextureID id) { nullptr };
    void (*ImFontAtlas_destroy)(ImFontAtlas* self) { nullptr };
    ImFontConfig* (*ImFontConfig_ImFontConfig)() { nullptr };
    void (*ImFontConfig_destroy)(ImFontConfig* self) { nullptr };
    void (*ImFontGlyphRangesBuilder_AddChar)(ImFontGlyphRangesBuilder* self,ImWchar c) { nullptr };
    void (*ImFontGlyphRangesBuilder_AddRanges)(ImFontGlyphRangesBuilder* self,const ImWchar* ranges) { nullptr };
    void (*ImFontGlyphRangesBuilder_AddText)(ImFontGlyphRangesBuilder* self,const char* text,const char* text_end) { nullptr };
    void (*ImFontGlyphRangesBuilder_BuildRanges)(ImFontGlyphRangesBuilder* self,ImVector_ImWchar* out_ranges) { nullptr };
    void (*ImFontGlyphRangesBuilder_Clear)(ImFontGlyphRangesBuilder* self) { nullptr };
    bool (*ImFontGlyphRangesBuilder_GetBit)(ImFontGlyphRangesBuilder* self,size_t n) { nullptr };
    ImFontGlyphRangesBuilder* (*ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder)() { nullptr };
    void (*ImFontGlyphRangesBuilder_SetBit)(ImFontGlyphRangesBuilder* self,size_t n) { nullptr };
    void (*ImFontGlyphRangesBuilder_destroy)(ImFontGlyphRangesBuilder* self) { nullptr };
    void (*ImFont_AddGlyph)(ImFont* self,const ImFontConfig* src_cfg,ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x) { nullptr };
    void (*ImFont_AddRemapChar)(ImFont* self,ImWchar dst,ImWchar src,bool overwrite_dst) { nullptr };
    void (*ImFont_BuildLookupTable)(ImFont* self) { nullptr };
    void (*ImFont_CalcTextSizeA)(ImVec2 *pOut,ImFont* self,float size,float max_width,float wrap_width,const char* text_begin,const char* text_end,const char** remaining) { nullptr };
    const char* (*ImFont_CalcWordWrapPositionA)(ImFont* self,float scale,const char* text,const char* text_end,float wrap_width) { nullptr };
    void (*ImFont_ClearOutputData)(ImFont* self) { nullptr };
    const ImFontGlyph* (*ImFont_FindGlyph)(ImFont* self,ImWchar c) { nullptr };
    const ImFontGlyph* (*ImFont_FindGlyphNoFallback)(ImFont* self,ImWchar c) { nullptr };
    float (*ImFont_GetCharAdvance)(ImFont* self,ImWchar c) { nullptr };
    const char* (*ImFont_GetDebugName)(ImFont* self) { nullptr };
    void (*ImFont_GrowIndex)(ImFont* self,int new_size) { nullptr };
    ImFont* (*ImFont_ImFont)() { nullptr };
    bool (*ImFont_IsGlyphRangeUnused)(ImFont* self,unsigned int c_begin,unsigned int c_last) { nullptr };
    bool (*ImFont_IsLoaded)(ImFont* self) { nullptr };
    void (*ImFont_RenderChar)(ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,ImWchar c) { nullptr };
    void (*ImFont_RenderText)(ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,const char* text_end,float wrap_width,bool cpu_fine_clip) { nullptr };
    void (*ImFont_SetFallbackChar)(ImFont* self,ImWchar c) { nullptr };
    void (*ImFont_SetGlyphVisible)(ImFont* self,ImWchar c,bool visible) { nullptr };
    void (*ImFont_destroy)(ImFont* self) { nullptr };
    ImGuiContextHook* (*ImGuiContextHook_ImGuiContextHook)() { nullptr };
    void (*ImGuiContextHook_destroy)(ImGuiContextHook* self) { nullptr };
    ImGuiContext* (*ImGuiContext_ImGuiContext)(ImFontAtlas* shared_font_atlas) { nullptr };
    void (*ImGuiContext_destroy)(ImGuiContext* self) { nullptr };
    ImGuiDockContext* (*ImGuiDockContext_ImGuiDockContext)() { nullptr };
    void (*ImGuiDockContext_destroy)(ImGuiDockContext* self) { nullptr };
    ImGuiDockNodeFlags (*ImGuiDockNode_GetMergedFlags)(ImGuiDockNode* self) { nullptr };
    ImGuiDockNode* (*ImGuiDockNode_ImGuiDockNode)(ImGuiID id) { nullptr };
    bool (*ImGuiDockNode_IsCentralNode)(ImGuiDockNode* self) { nullptr };
    bool (*ImGuiDockNode_IsDockSpace)(ImGuiDockNode* self) { nullptr };
    bool (*ImGuiDockNode_IsEmpty)(ImGuiDockNode* self) { nullptr };
    bool (*ImGuiDockNode_IsFloatingNode)(ImGuiDockNode* self) { nullptr };
    bool (*ImGuiDockNode_IsHiddenTabBar)(ImGuiDockNode* self) { nullptr };
    bool (*ImGuiDockNode_IsLeafNode)(ImGuiDockNode* self) { nullptr };
    bool (*ImGuiDockNode_IsNoTabBar)(ImGuiDockNode* self) { nullptr };
    bool (*ImGuiDockNode_IsRootNode)(ImGuiDockNode* self) { nullptr };
    bool (*ImGuiDockNode_IsSplitNode)(ImGuiDockNode* self) { nullptr };
    void (*ImGuiDockNode_Rect)(ImRect *pOut,ImGuiDockNode* self) { nullptr };
    void (*ImGuiDockNode_destroy)(ImGuiDockNode* self) { nullptr };
    void (*ImGuiIO_AddInputCharacter)(ImGuiIO* self,unsigned int c) { nullptr };
    void (*ImGuiIO_AddInputCharacterUTF16)(ImGuiIO* self,ImWchar16 c) { nullptr };
    void (*ImGuiIO_AddInputCharactersUTF8)(ImGuiIO* self,const char* str) { nullptr };
    void (*ImGuiIO_ClearInputCharacters)(ImGuiIO* self) { nullptr };
    ImGuiIO* (*ImGuiIO_ImGuiIO)() { nullptr };
    void (*ImGuiIO_destroy)(ImGuiIO* self) { nullptr };
    void (*ImGuiInputTextCallbackData_ClearSelection)(ImGuiInputTextCallbackData* self) { nullptr };
    void (*ImGuiInputTextCallbackData_DeleteChars)(ImGuiInputTextCallbackData* self,int pos,int bytes_count) { nullptr };
    bool (*ImGuiInputTextCallbackData_HasSelection)(ImGuiInputTextCallbackData* self) { nullptr };
    ImGuiInputTextCallbackData* (*ImGuiInputTextCallbackData_ImGuiInputTextCallbackData)() { nullptr };
    void (*ImGuiInputTextCallbackData_InsertChars)(ImGuiInputTextCallbackData* self,int pos,const char* text,const char* text_end) { nullptr };
    void (*ImGuiInputTextCallbackData_SelectAll)(ImGuiInputTextCallbackData* self) { nullptr };
    void (*ImGuiInputTextCallbackData_destroy)(ImGuiInputTextCallbackData* self) { nullptr };
    void (*ImGuiInputTextState_ClearFreeMemory)(ImGuiInputTextState* self) { nullptr };
    void (*ImGuiInputTextState_ClearSelection)(ImGuiInputTextState* self) { nullptr };
    void (*ImGuiInputTextState_ClearText)(ImGuiInputTextState* self) { nullptr };
    void (*ImGuiInputTextState_CursorAnimReset)(ImGuiInputTextState* self) { nullptr };
    void (*ImGuiInputTextState_CursorClamp)(ImGuiInputTextState* self) { nullptr };
    int (*ImGuiInputTextState_GetRedoAvailCount)(ImGuiInputTextState* self) { nullptr };
    int (*ImGuiInputTextState_GetUndoAvailCount)(ImGuiInputTextState* self) { nullptr };
    bool (*ImGuiInputTextState_HasSelection)(ImGuiInputTextState* self) { nullptr };
    ImGuiInputTextState* (*ImGuiInputTextState_ImGuiInputTextState)() { nullptr };
    void (*ImGuiInputTextState_OnKeyPressed)(ImGuiInputTextState* self,int key) { nullptr };
    void (*ImGuiInputTextState_SelectAll)(ImGuiInputTextState* self) { nullptr };
    void (*ImGuiInputTextState_destroy)(ImGuiInputTextState* self) { nullptr };
    void (*ImGuiLastItemDataBackup_Backup)(ImGuiLastItemDataBackup* self) { nullptr };
    ImGuiLastItemDataBackup* (*ImGuiLastItemDataBackup_ImGuiLastItemDataBackup)() { nullptr };
    void (*ImGuiLastItemDataBackup_Restore)(ImGuiLastItemDataBackup* self) { nullptr };
    void (*ImGuiLastItemDataBackup_destroy)(ImGuiLastItemDataBackup* self) { nullptr };
    void (*ImGuiListClipper_Begin)(ImGuiListClipper* self,int items_count,float items_height) { nullptr };
    void (*ImGuiListClipper_End)(ImGuiListClipper* self) { nullptr };
    ImGuiListClipper* (*ImGuiListClipper_ImGuiListClipper)() { nullptr };
    bool (*ImGuiListClipper_Step)(ImGuiListClipper* self) { nullptr };
    void (*ImGuiListClipper_destroy)(ImGuiListClipper* self) { nullptr };
    float (*ImGuiMenuColumns_CalcExtraSpace)(ImGuiMenuColumns* self,float avail_w) { nullptr };
    float (*ImGuiMenuColumns_DeclColumns)(ImGuiMenuColumns* self,float w0,float w1,float w2) { nullptr };
    ImGuiMenuColumns* (*ImGuiMenuColumns_ImGuiMenuColumns)() { nullptr };
    void (*ImGuiMenuColumns_Update)(ImGuiMenuColumns* self,int count,float spacing,bool clear) { nullptr };
    void (*ImGuiMenuColumns_destroy)(ImGuiMenuColumns* self) { nullptr };
    ImGuiMetricsConfig* (*ImGuiMetricsConfig_ImGuiMetricsConfig)() { nullptr };
    void (*ImGuiMetricsConfig_destroy)(ImGuiMetricsConfig* self) { nullptr };
    void (*ImGuiNavMoveResult_Clear)(ImGuiNavMoveResult* self) { nullptr };
    ImGuiNavMoveResult* (*ImGuiNavMoveResult_ImGuiNavMoveResult)() { nullptr };
    void (*ImGuiNavMoveResult_destroy)(ImGuiNavMoveResult* self) { nullptr };
    void (*ImGuiNextItemData_ClearFlags)(ImGuiNextItemData* self) { nullptr };
    ImGuiNextItemData* (*ImGuiNextItemData_ImGuiNextItemData)() { nullptr };
    void (*ImGuiNextItemData_destroy)(ImGuiNextItemData* self) { nullptr };
    void (*ImGuiNextWindowData_ClearFlags)(ImGuiNextWindowData* self) { nullptr };
    ImGuiNextWindowData* (*ImGuiNextWindowData_ImGuiNextWindowData)() { nullptr };
    void (*ImGuiNextWindowData_destroy)(ImGuiNextWindowData* self) { nullptr };
    ImGuiOldColumnData* (*ImGuiOldColumnData_ImGuiOldColumnData)() { nullptr };
    void (*ImGuiOldColumnData_destroy)(ImGuiOldColumnData* self) { nullptr };
    ImGuiOldColumns* (*ImGuiOldColumns_ImGuiOldColumns)() { nullptr };
    void (*ImGuiOldColumns_destroy)(ImGuiOldColumns* self) { nullptr };
    ImGuiOnceUponAFrame* (*ImGuiOnceUponAFrame_ImGuiOnceUponAFrame)() { nullptr };
    void (*ImGuiOnceUponAFrame_destroy)(ImGuiOnceUponAFrame* self) { nullptr };
    void (*ImGuiPayload_Clear)(ImGuiPayload* self) { nullptr };
    ImGuiPayload* (*ImGuiPayload_ImGuiPayload)() { nullptr };
    bool (*ImGuiPayload_IsDataType)(ImGuiPayload* self,const char* type) { nullptr };
    bool (*ImGuiPayload_IsDelivery)(ImGuiPayload* self) { nullptr };
    bool (*ImGuiPayload_IsPreview)(ImGuiPayload* self) { nullptr };
    void (*ImGuiPayload_destroy)(ImGuiPayload* self) { nullptr };
    ImGuiPlatformIO* (*ImGuiPlatformIO_ImGuiPlatformIO)() { nullptr };
    void (*ImGuiPlatformIO_destroy)(ImGuiPlatformIO* self) { nullptr };
    ImGuiPlatformMonitor* (*ImGuiPlatformMonitor_ImGuiPlatformMonitor)() { nullptr };
    void (*ImGuiPlatformMonitor_destroy)(ImGuiPlatformMonitor* self) { nullptr };
    ImGuiPopupData* (*ImGuiPopupData_ImGuiPopupData)() { nullptr };
    void (*ImGuiPopupData_destroy)(ImGuiPopupData* self) { nullptr };
    ImGuiPtrOrIndex* (*ImGuiPtrOrIndex_ImGuiPtrOrIndexInt)(int index) { nullptr };
    ImGuiPtrOrIndex* (*ImGuiPtrOrIndex_ImGuiPtrOrIndexPtr)(void* ptr) { nullptr };
    void (*ImGuiPtrOrIndex_destroy)(ImGuiPtrOrIndex* self) { nullptr };
    ImGuiSettingsHandler* (*ImGuiSettingsHandler_ImGuiSettingsHandler)() { nullptr };
    void (*ImGuiSettingsHandler_destroy)(ImGuiSettingsHandler* self) { nullptr };
    void (*ImGuiStackSizes_CompareWithCurrentState)(ImGuiStackSizes* self) { nullptr };
    ImGuiStackSizes* (*ImGuiStackSizes_ImGuiStackSizes)() { nullptr };
    void (*ImGuiStackSizes_SetToCurrentState)(ImGuiStackSizes* self) { nullptr };
    void (*ImGuiStackSizes_destroy)(ImGuiStackSizes* self) { nullptr };
    ImGuiStoragePair* (*ImGuiStoragePair_ImGuiStoragePairFloat)(ImGuiID _key,float _val_f) { nullptr };
    ImGuiStoragePair* (*ImGuiStoragePair_ImGuiStoragePairInt)(ImGuiID _key,int _val_i) { nullptr };
    ImGuiStoragePair* (*ImGuiStoragePair_ImGuiStoragePairPtr)(ImGuiID _key,void* _val_p) { nullptr };
    void (*ImGuiStoragePair_destroy)(ImGuiStoragePair* self) { nullptr };
    void (*ImGuiStorage_BuildSortByKey)(ImGuiStorage* self) { nullptr };
    void (*ImGuiStorage_Clear)(ImGuiStorage* self) { nullptr };
    bool (*ImGuiStorage_GetBool)(ImGuiStorage* self,ImGuiID key,bool default_val) { nullptr };
    bool* (*ImGuiStorage_GetBoolRef)(ImGuiStorage* self,ImGuiID key,bool default_val) { nullptr };
    float (*ImGuiStorage_GetFloat)(ImGuiStorage* self,ImGuiID key,float default_val) { nullptr };
    float* (*ImGuiStorage_GetFloatRef)(ImGuiStorage* self,ImGuiID key,float default_val) { nullptr };
    int (*ImGuiStorage_GetInt)(ImGuiStorage* self,ImGuiID key,int default_val) { nullptr };
    int* (*ImGuiStorage_GetIntRef)(ImGuiStorage* self,ImGuiID key,int default_val) { nullptr };
    void* (*ImGuiStorage_GetVoidPtr)(ImGuiStorage* self,ImGuiID key) { nullptr };
    void** (*ImGuiStorage_GetVoidPtrRef)(ImGuiStorage* self,ImGuiID key,void* default_val) { nullptr };
    void (*ImGuiStorage_SetAllInt)(ImGuiStorage* self,int val) { nullptr };
    void (*ImGuiStorage_SetBool)(ImGuiStorage* self,ImGuiID key,bool val) { nullptr };
    void (*ImGuiStorage_SetFloat)(ImGuiStorage* self,ImGuiID key,float val) { nullptr };
    void (*ImGuiStorage_SetInt)(ImGuiStorage* self,ImGuiID key,int val) { nullptr };
    void (*ImGuiStorage_SetVoidPtr)(ImGuiStorage* self,ImGuiID key,void* val) { nullptr };
    ImGuiStyleMod* (*ImGuiStyleMod_ImGuiStyleModFloat)(ImGuiStyleVar idx,float v) { nullptr };
    ImGuiStyleMod* (*ImGuiStyleMod_ImGuiStyleModInt)(ImGuiStyleVar idx,int v) { nullptr };
    ImGuiStyleMod* (*ImGuiStyleMod_ImGuiStyleModVec2)(ImGuiStyleVar idx,ImVec2 v) { nullptr };
    void (*ImGuiStyleMod_destroy)(ImGuiStyleMod* self) { nullptr };
    ImGuiStyle* (*ImGuiStyle_ImGuiStyle)() { nullptr };
    void (*ImGuiStyle_ScaleAllSizes)(ImGuiStyle* self,float scale_factor) { nullptr };
    void (*ImGuiStyle_destroy)(ImGuiStyle* self) { nullptr };
    const char* (*ImGuiTabBar_GetTabName)(ImGuiTabBar* self,const ImGuiTabItem* tab) { nullptr };
    int (*ImGuiTabBar_GetTabOrder)(ImGuiTabBar* self,const ImGuiTabItem* tab) { nullptr };
    ImGuiTabBar* (*ImGuiTabBar_ImGuiTabBar)() { nullptr };
    void (*ImGuiTabBar_destroy)(ImGuiTabBar* self) { nullptr };
    ImGuiTabItem* (*ImGuiTabItem_ImGuiTabItem)() { nullptr };
    void (*ImGuiTabItem_destroy)(ImGuiTabItem* self) { nullptr };
    ImGuiTableColumnSettings* (*ImGuiTableColumnSettings_ImGuiTableColumnSettings)() { nullptr };
    void (*ImGuiTableColumnSettings_destroy)(ImGuiTableColumnSettings* self) { nullptr };
    ImGuiTableColumnSortSpecs* (*ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs)() { nullptr };
    void (*ImGuiTableColumnSortSpecs_destroy)(ImGuiTableColumnSortSpecs* self) { nullptr };
    ImGuiTableColumn* (*ImGuiTableColumn_ImGuiTableColumn)() { nullptr };
    void (*ImGuiTableColumn_destroy)(ImGuiTableColumn* self) { nullptr };
    ImGuiTableColumnSettings* (*ImGuiTableSettings_GetColumnSettings)(ImGuiTableSettings* self) { nullptr };
    ImGuiTableSettings* (*ImGuiTableSettings_ImGuiTableSettings)() { nullptr };
    void (*ImGuiTableSettings_destroy)(ImGuiTableSettings* self) { nullptr };
    ImGuiTableSortSpecs* (*ImGuiTableSortSpecs_ImGuiTableSortSpecs)() { nullptr };
    void (*ImGuiTableSortSpecs_destroy)(ImGuiTableSortSpecs* self) { nullptr };
    ImGuiTable* (*ImGuiTable_ImGuiTable)() { nullptr };
    void (*ImGuiTable_destroy)(ImGuiTable* self) { nullptr };
    ImGuiTextBuffer* (*ImGuiTextBuffer_ImGuiTextBuffer)() { nullptr };
    void (*ImGuiTextBuffer_append)(ImGuiTextBuffer* self,const char* str,const char* str_end) { nullptr };
    void (*ImGuiTextBuffer_appendf)(ImGuiTextBuffer* self,const char* fmt,...) { nullptr };
    void (*ImGuiTextBuffer_appendfv)(ImGuiTextBuffer* self,const char* fmt,va_list args) { nullptr };
    const char* (*ImGuiTextBuffer_begin)(ImGuiTextBuffer* self) { nullptr };
    const char* (*ImGuiTextBuffer_c_str)(ImGuiTextBuffer* self) { nullptr };
    void (*ImGuiTextBuffer_clear)(ImGuiTextBuffer* self) { nullptr };
    void (*ImGuiTextBuffer_destroy)(ImGuiTextBuffer* self) { nullptr };
    bool (*ImGuiTextBuffer_empty)(ImGuiTextBuffer* self) { nullptr };
    const char* (*ImGuiTextBuffer_end)(ImGuiTextBuffer* self) { nullptr };
    void (*ImGuiTextBuffer_reserve)(ImGuiTextBuffer* self,int capacity) { nullptr };
    int (*ImGuiTextBuffer_size)(ImGuiTextBuffer* self) { nullptr };
    void (*ImGuiTextFilter_Build)(ImGuiTextFilter* self) { nullptr };
    void (*ImGuiTextFilter_Clear)(ImGuiTextFilter* self) { nullptr };
    bool (*ImGuiTextFilter_Draw)(ImGuiTextFilter* self,const char* label,float width) { nullptr };
    ImGuiTextFilter* (*ImGuiTextFilter_ImGuiTextFilter)(const char* default_filter) { nullptr };
    bool (*ImGuiTextFilter_IsActive)(ImGuiTextFilter* self) { nullptr };
    bool (*ImGuiTextFilter_PassFilter)(ImGuiTextFilter* self,const char* text,const char* text_end) { nullptr };
    void (*ImGuiTextFilter_destroy)(ImGuiTextFilter* self) { nullptr };
    ImGuiTextRange* (*ImGuiTextRange_ImGuiTextRangeNil)() { nullptr };
    ImGuiTextRange* (*ImGuiTextRange_ImGuiTextRangeStr)(const char* _b,const char* _e) { nullptr };
    void (*ImGuiTextRange_destroy)(ImGuiTextRange* self) { nullptr };
    bool (*ImGuiTextRange_empty)(ImGuiTextRange* self) { nullptr };
    void (*ImGuiTextRange_split)(ImGuiTextRange* self,char separator,ImVector_ImGuiTextRange* out) { nullptr };
    void (*ImGuiViewportP_ClearRequestFlags)(ImGuiViewportP* self) { nullptr };
    void (*ImGuiViewportP_GetMainRect)(ImRect *pOut,ImGuiViewportP* self) { nullptr };
    void (*ImGuiViewportP_GetWorkRect)(ImRect *pOut,ImGuiViewportP* self) { nullptr };
    ImGuiViewportP* (*ImGuiViewportP_ImGuiViewportP)() { nullptr };
    void (*ImGuiViewportP_destroy)(ImGuiViewportP* self) { nullptr };
    void (*ImGuiViewport_GetCenter)(ImVec2 *pOut,ImGuiViewport* self) { nullptr };
    void (*ImGuiViewport_GetWorkPos)(ImVec2 *pOut,ImGuiViewport* self) { nullptr };
    void (*ImGuiViewport_GetWorkSize)(ImVec2 *pOut,ImGuiViewport* self) { nullptr };
    ImGuiViewport* (*ImGuiViewport_ImGuiViewport)() { nullptr };
    void (*ImGuiViewport_destroy)(ImGuiViewport* self) { nullptr };
    ImGuiWindowClass* (*ImGuiWindowClass_ImGuiWindowClass)() { nullptr };
    void (*ImGuiWindowClass_destroy)(ImGuiWindowClass* self) { nullptr };
    char* (*ImGuiWindowSettings_GetName)(ImGuiWindowSettings* self) { nullptr };
    ImGuiWindowSettings* (*ImGuiWindowSettings_ImGuiWindowSettings)() { nullptr };
    void (*ImGuiWindowSettings_destroy)(ImGuiWindowSettings* self) { nullptr };
    float (*ImGuiWindow_CalcFontSize)(ImGuiWindow* self) { nullptr };
    ImGuiID (*ImGuiWindow_GetIDFromRectangle)(ImGuiWindow* self,const ImRect r_abs) { nullptr };
    ImGuiID (*ImGuiWindow_GetIDInt)(ImGuiWindow* self,int n) { nullptr };
    ImGuiID (*ImGuiWindow_GetIDNoKeepAliveInt)(ImGuiWindow* self,int n) { nullptr };
    ImGuiID (*ImGuiWindow_GetIDNoKeepAlivePtr)(ImGuiWindow* self,const void* ptr) { nullptr };
    ImGuiID (*ImGuiWindow_GetIDNoKeepAliveStr)(ImGuiWindow* self,const char* str,const char* str_end) { nullptr };
    ImGuiID (*ImGuiWindow_GetIDPtr)(ImGuiWindow* self,const void* ptr) { nullptr };
    ImGuiID (*ImGuiWindow_GetIDStr)(ImGuiWindow* self,const char* str,const char* str_end) { nullptr };
    ImGuiWindow* (*ImGuiWindow_ImGuiWindow)(ImGuiContext* context,const char* name) { nullptr };
    float (*ImGuiWindow_MenuBarHeight)(ImGuiWindow* self) { nullptr };
    void (*ImGuiWindow_MenuBarRect)(ImRect *pOut,ImGuiWindow* self) { nullptr };
    void (*ImGuiWindow_Rect)(ImRect *pOut,ImGuiWindow* self) { nullptr };
    float (*ImGuiWindow_TitleBarHeight)(ImGuiWindow* self) { nullptr };
    void (*ImGuiWindow_TitleBarRect)(ImRect *pOut,ImGuiWindow* self) { nullptr };
    void (*ImGuiWindow_destroy)(ImGuiWindow* self) { nullptr };
    void (*ImRect_AddRect)(ImRect* self,const ImRect r) { nullptr };
    void (*ImRect_AddVec2)(ImRect* self,const ImVec2 p) { nullptr };
    void (*ImRect_ClipWith)(ImRect* self,const ImRect r) { nullptr };
    void (*ImRect_ClipWithFull)(ImRect* self,const ImRect r) { nullptr };
    bool (*ImRect_ContainsRect)(ImRect* self,const ImRect r) { nullptr };
    bool (*ImRect_ContainsVec2)(ImRect* self,const ImVec2 p) { nullptr };
    void (*ImRect_ExpandFloat)(ImRect* self,const float amount) { nullptr };
    void (*ImRect_ExpandVec2)(ImRect* self,const ImVec2 amount) { nullptr };
    void (*ImRect_Floor)(ImRect* self) { nullptr };
    void (*ImRect_GetBL)(ImVec2 *pOut,ImRect* self) { nullptr };
    void (*ImRect_GetBR)(ImVec2 *pOut,ImRect* self) { nullptr };
    void (*ImRect_GetCenter)(ImVec2 *pOut,ImRect* self) { nullptr };
    float (*ImRect_GetHeight)(ImRect* self) { nullptr };
    void (*ImRect_GetSize)(ImVec2 *pOut,ImRect* self) { nullptr };
    void (*ImRect_GetTL)(ImVec2 *pOut,ImRect* self) { nullptr };
    void (*ImRect_GetTR)(ImVec2 *pOut,ImRect* self) { nullptr };
    float (*ImRect_GetWidth)(ImRect* self) { nullptr };
    ImRect* (*ImRect_ImRectFloat)(float x1,float y1,float x2,float y2) { nullptr };
    ImRect* (*ImRect_ImRectNil)() { nullptr };
    ImRect* (*ImRect_ImRectVec2)(const ImVec2 min,const ImVec2 max) { nullptr };
    ImRect* (*ImRect_ImRectVec4)(const ImVec4 v) { nullptr };
    bool (*ImRect_IsInverted)(ImRect* self) { nullptr };
    bool (*ImRect_Overlaps)(ImRect* self,const ImRect r) { nullptr };
    void (*ImRect_ToVec4)(ImVec4 *pOut,ImRect* self) { nullptr };
    void (*ImRect_Translate)(ImRect* self,const ImVec2 d) { nullptr };
    void (*ImRect_TranslateX)(ImRect* self,float dx) { nullptr };
    void (*ImRect_TranslateY)(ImRect* self,float dy) { nullptr };
    void (*ImRect_destroy)(ImRect* self) { nullptr };
    ImVec1* (*ImVec1_ImVec1Float)(float _x) { nullptr };
    ImVec1* (*ImVec1_ImVec1Nil)() { nullptr };
    void (*ImVec1_destroy)(ImVec1* self) { nullptr };
    ImVec2* (*ImVec2_ImVec2Float)(float _x,float _y) { nullptr };
    ImVec2* (*ImVec2_ImVec2Nil)() { nullptr };
    void (*ImVec2_destroy)(ImVec2* self) { nullptr };
    ImVec2ih* (*ImVec2ih_ImVec2ihNil)() { nullptr };
    ImVec2ih* (*ImVec2ih_ImVec2ihVec2)(const ImVec2 rhs) { nullptr };
    ImVec2ih* (*ImVec2ih_ImVec2ihshort)(short _x,short _y) { nullptr };
    void (*ImVec2ih_destroy)(ImVec2ih* self) { nullptr };
    ImVec4* (*ImVec4_ImVec4Float)(float _x,float _y,float _z,float _w) { nullptr };
    ImVec4* (*ImVec4_ImVec4Nil)() { nullptr };
    void (*ImVec4_destroy)(ImVec4* self) { nullptr };
    const ImGuiPayload* (*AcceptDragDropPayload)(const char* type,ImGuiDragDropFlags flags) { nullptr };
    void (*ActivateItem)(ImGuiID id) { nullptr };
    void (*AddContextHook)(ImGuiContext* context,const ImGuiContextHook* hook) { nullptr };
    void (*AlignTextToFramePadding)() { nullptr };
    bool (*ArrowButton)(const char* str_id,ImGuiDir dir) { nullptr };
    bool (*ArrowButtonEx)(const char* str_id,ImGuiDir dir,ImVec2 size_arg,ImGuiButtonFlags flags) { nullptr };
    bool (*Begin)(const char* name,bool* p_open,ImGuiWindowFlags flags) { nullptr };
    bool (*BeginChildEx)(const char* name,ImGuiID id,const ImVec2 size_arg,bool border,ImGuiWindowFlags flags) { nullptr };
    bool (*BeginChildFrame)(ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags) { nullptr };
    bool (*BeginChildID)(ImGuiID id,const ImVec2 size,bool border,ImGuiWindowFlags flags) { nullptr };
    bool (*BeginChildStr)(const char* str_id,const ImVec2 size,bool border,ImGuiWindowFlags flags) { nullptr };
    void (*BeginColumns)(const char* str_id,int count,ImGuiOldColumnFlags flags) { nullptr };
    bool (*BeginCombo)(const char* label,const char* preview_value,ImGuiComboFlags flags) { nullptr };
    void (*BeginDockableDragDropSource)(ImGuiWindow* window) { nullptr };
    void (*BeginDockableDragDropTarget)(ImGuiWindow* window) { nullptr };
    void (*BeginDocked)(ImGuiWindow* window,bool* p_open) { nullptr };
    bool (*BeginDragDropSource)(ImGuiDragDropFlags flags) { nullptr };
    bool (*BeginDragDropTarget)() { nullptr };
    bool (*BeginDragDropTargetCustom)(const ImRect bb,ImGuiID id) { nullptr };
    void (*BeginGroup)() { nullptr };
    bool (*BeginMainMenuBar)() { nullptr };
    bool (*BeginMenu)(const char* label,bool enabled) { nullptr };
    bool (*BeginMenuBar)() { nullptr };
    bool (*BeginPopup)(const char* str_id,ImGuiWindowFlags flags) { nullptr };
    bool (*BeginPopupContextItem)(const char* str_id,ImGuiPopupFlags popup_flags) { nullptr };
    bool (*BeginPopupContextVoid)(const char* str_id,ImGuiPopupFlags popup_flags) { nullptr };
    bool (*BeginPopupContextWindow)(const char* str_id,ImGuiPopupFlags popup_flags) { nullptr };
    bool (*BeginPopupEx)(ImGuiID id,ImGuiWindowFlags extra_flags) { nullptr };
    bool (*BeginPopupModal)(const char* name,bool* p_open,ImGuiWindowFlags flags) { nullptr };
    bool (*BeginTabBar)(const char* str_id,ImGuiTabBarFlags flags) { nullptr };
    bool (*BeginTabBarEx)(ImGuiTabBar* tab_bar,const ImRect bb,ImGuiTabBarFlags flags,ImGuiDockNode* dock_node) { nullptr };
    bool (*BeginTabItem)(const char* label,bool* p_open,ImGuiTabItemFlags flags) { nullptr };
    bool (*BeginTable)(const char* str_id,int columns_count,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width) { nullptr };
    bool (*BeginTableEx)(const char* name,ImGuiID id,int columns_count,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width) { nullptr };
    void (*BeginTooltip)() { nullptr };
    void (*BeginTooltipEx)(ImGuiWindowFlags extra_flags,ImGuiTooltipFlags tooltip_flags) { nullptr };
    void (*BringWindowToDisplayBack)(ImGuiWindow* window) { nullptr };
    void (*BringWindowToDisplayFront)(ImGuiWindow* window) { nullptr };
    void (*BringWindowToFocusFront)(ImGuiWindow* window) { nullptr };
    void (*Bullet)() { nullptr };
    void (*BulletText)(const char* fmt,...) { nullptr };
    void (*BulletTextV)(const char* fmt,va_list args) { nullptr };
    bool (*Button)(const char* label,const ImVec2 size) { nullptr };
    bool (*ButtonBehavior)(const ImRect bb,ImGuiID id,bool* out_hovered,bool* out_held,ImGuiButtonFlags flags) { nullptr };
    bool (*ButtonEx)(const char* label,const ImVec2 size_arg,ImGuiButtonFlags flags) { nullptr };
    void (*CalcItemSize)(ImVec2 *pOut,ImVec2 size,float default_w,float default_h) { nullptr };
    float (*CalcItemWidth)() { nullptr };
    void (*CalcListClipping)(int items_count,float items_height,int* out_items_display_start,int* out_items_display_end) { nullptr };
    void (*CalcTextSize)(ImVec2 *pOut,const char* text,const char* text_end,bool hide_text_after_double_hash,float wrap_width) { nullptr };
    int (*CalcTypematicRepeatAmount)(float t0,float t1,float repeat_delay,float repeat_rate) { nullptr };
    void (*CalcWindowExpectedSize)(ImVec2 *pOut,ImGuiWindow* window) { nullptr };
    float (*CalcWrapWidthForPos)(const ImVec2 pos,float wrap_pos_x) { nullptr };
    void (*CallContextHooks)(ImGuiContext* context,ImGuiContextHookType type) { nullptr };
    void (*CaptureKeyboardFromApp)(bool want_capture_keyboard_value) { nullptr };
    void (*CaptureMouseFromApp)(bool want_capture_mouse_value) { nullptr };
    bool (*Checkbox)(const char* label,bool* v) { nullptr };
    bool (*CheckboxFlagsIntPtr)(const char* label,int* flags,int flags_value) { nullptr };
    bool (*CheckboxFlagsS64Ptr)(const char* label,ImS64* flags,ImS64 flags_value) { nullptr };
    bool (*CheckboxFlagsU64Ptr)(const char* label,ImU64* flags,ImU64 flags_value) { nullptr };
    bool (*CheckboxFlagsUintPtr)(const char* label,unsigned int* flags,unsigned int flags_value) { nullptr };
    void (*ClearActiveID)() { nullptr };
    void (*ClearDragDrop)() { nullptr };
    void (*ClearIniSettings)() { nullptr };
    bool (*CloseButton)(ImGuiID id,const ImVec2 pos) { nullptr };
    void (*CloseCurrentPopup)() { nullptr };
    void (*ClosePopupToLevel)(int remaining,bool restore_focus_to_window_under_popup) { nullptr };
    void (*ClosePopupsOverWindow)(ImGuiWindow* ref_window,bool restore_focus_to_window_under_popup) { nullptr };
    bool (*CollapseButton)(ImGuiID id,const ImVec2 pos,ImGuiDockNode* dock_node) { nullptr };
    bool (*CollapsingHeaderBoolPtr)(const char* label,bool* p_open,ImGuiTreeNodeFlags flags) { nullptr };
    bool (*CollapsingHeaderTreeNodeFlags)(const char* label,ImGuiTreeNodeFlags flags) { nullptr };
    bool (*ColorButton)(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,ImVec2 size) { nullptr };
    ImU32 (*ColorConvertFloat4ToU32)(const ImVec4 in) { nullptr };
    void (*ColorConvertHSVtoRGB)(float h,float s,float v,float* out_r,float* out_g,float* out_b) { nullptr };
    void (*ColorConvertRGBtoHSV)(float r,float g,float b,float* out_h,float* out_s,float* out_v) { nullptr };
    void (*ColorConvertU32ToFloat4)(ImVec4 *pOut,ImU32 in) { nullptr };
    bool (*ColorEdit3)(const char* label,float col[3],ImGuiColorEditFlags flags) { nullptr };
    bool (*ColorEdit4)(const char* label,float col[4],ImGuiColorEditFlags flags) { nullptr };
    void (*ColorEditOptionsPopup)(const float* col,ImGuiColorEditFlags flags) { nullptr };
    bool (*ColorPicker3)(const char* label,float col[3],ImGuiColorEditFlags flags) { nullptr };
    bool (*ColorPicker4)(const char* label,float col[4],ImGuiColorEditFlags flags,const float* ref_col) { nullptr };
    void (*ColorPickerOptionsPopup)(const float* ref_col,ImGuiColorEditFlags flags) { nullptr };
    void (*ColorTooltip)(const char* text,const float* col,ImGuiColorEditFlags flags) { nullptr };
    void (*Columns)(int count,const char* id,bool border) { nullptr };
    bool (*ComboFnBoolPtr)(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items) { nullptr };
    bool (*ComboStr)(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items) { nullptr };
    bool (*ComboStr_arr)(const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items) { nullptr };
    ImGuiContext* (*CreateContext)(ImFontAtlas* shared_font_atlas) { nullptr };
    ImGuiWindowSettings* (*CreateNewWindowSettings)(const char* name) { nullptr };
    void (*DataTypeApplyOp)(ImGuiDataType data_type,int op,void* output,const void* arg_1,const void* arg_2) { nullptr };
    bool (*DataTypeApplyOpFromText)(const char* buf,const char* initial_value_buf,ImGuiDataType data_type,void* p_data,const char* format) { nullptr };
    bool (*DataTypeClamp)(ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max) { nullptr };
    int (*DataTypeCompare)(ImGuiDataType data_type,const void* arg_1,const void* arg_2) { nullptr };
    int (*DataTypeFormatString)(char* buf,int buf_size,ImGuiDataType data_type,const void* p_data,const char* format) { nullptr };
    const ImGuiDataTypeInfo* (*DataTypeGetInfo)(ImGuiDataType data_type) { nullptr };
    bool (*DebugCheckVersionAndDataLayout)(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert,size_t sz_drawidx) { nullptr };
    void (*DebugDrawItemRect)(ImU32 col) { nullptr };
    void (*DebugNodeColumns)(ImGuiOldColumns* columns) { nullptr };
    void (*DebugNodeDockNode)(ImGuiDockNode* node,const char* label) { nullptr };
    void (*DebugNodeDrawCmdShowMeshAndBoundingBox)(ImDrawList* out_draw_list,const ImDrawList* draw_list,const ImDrawCmd* draw_cmd,bool show_mesh,bool show_aabb) { nullptr };
    void (*DebugNodeDrawList)(ImGuiWindow* window,ImGuiViewportP* viewport,const ImDrawList* draw_list,const char* label) { nullptr };
    void (*DebugNodeStorage)(ImGuiStorage* storage,const char* label) { nullptr };
    void (*DebugNodeTabBar)(ImGuiTabBar* tab_bar,const char* label) { nullptr };
    void (*DebugNodeTable)(ImGuiTable* table) { nullptr };
    void (*DebugNodeTableSettings)(ImGuiTableSettings* settings) { nullptr };
    void (*DebugNodeViewport)(ImGuiViewportP* viewport) { nullptr };
    void (*DebugNodeWindow)(ImGuiWindow* window,const char* label) { nullptr };
    void (*DebugNodeWindowSettings)(ImGuiWindowSettings* settings) { nullptr };
    void (*DebugNodeWindowsList)(ImVector_ImGuiWindowPtr* windows,const char* label) { nullptr };
    void (*DebugStartItemPicker)() { nullptr };
    void (*DestroyContext)(ImGuiContext* ctx) { nullptr };
    void (*DestroyPlatformWindow)(ImGuiViewportP* viewport) { nullptr };
    void (*DestroyPlatformWindows)() { nullptr };
    ImGuiID (*DockBuilderAddNode)(ImGuiID node_id,ImGuiDockNodeFlags flags) { nullptr };
    void (*DockBuilderCopyDockSpace)(ImGuiID src_dockspace_id,ImGuiID dst_dockspace_id,ImVector_const_charPtr* in_window_remap_pairs) { nullptr };
    void (*DockBuilderCopyNode)(ImGuiID src_node_id,ImGuiID dst_node_id,ImVector_ImGuiID* out_node_remap_pairs) { nullptr };
    void (*DockBuilderCopyWindowSettings)(const char* src_name,const char* dst_name) { nullptr };
    void (*DockBuilderDockWindow)(const char* window_name,ImGuiID node_id) { nullptr };
    void (*DockBuilderFinish)(ImGuiID node_id) { nullptr };
    ImGuiDockNode* (*DockBuilderGetCentralNode)(ImGuiID node_id) { nullptr };
    ImGuiDockNode* (*DockBuilderGetNode)(ImGuiID node_id) { nullptr };
    void (*DockBuilderRemoveNode)(ImGuiID node_id) { nullptr };
    void (*DockBuilderRemoveNodeChildNodes)(ImGuiID node_id) { nullptr };
    void (*DockBuilderRemoveNodeDockedWindows)(ImGuiID node_id,bool clear_settings_refs) { nullptr };
    void (*DockBuilderSetNodePos)(ImGuiID node_id,ImVec2 pos) { nullptr };
    void (*DockBuilderSetNodeSize)(ImGuiID node_id,ImVec2 size) { nullptr };
    ImGuiID (*DockBuilderSplitNode)(ImGuiID node_id,ImGuiDir split_dir,float size_ratio_for_node_at_dir,ImGuiID* out_id_at_dir,ImGuiID* out_id_at_opposite_dir) { nullptr };
    bool (*DockContextCalcDropPosForDocking)(ImGuiWindow* target,ImGuiDockNode* target_node,ImGuiWindow* payload,ImGuiDir split_dir,bool split_outer,ImVec2* out_pos) { nullptr };
    void (*DockContextClearNodes)(ImGuiContext* ctx,ImGuiID root_id,bool clear_settings_refs) { nullptr };
    ImGuiID (*DockContextGenNodeID)(ImGuiContext* ctx) { nullptr };
    void (*DockContextInitialize)(ImGuiContext* ctx) { nullptr };
    void (*DockContextQueueDock)(ImGuiContext* ctx,ImGuiWindow* target,ImGuiDockNode* target_node,ImGuiWindow* payload,ImGuiDir split_dir,float split_ratio,bool split_outer) { nullptr };
    void (*DockContextQueueUndockNode)(ImGuiContext* ctx,ImGuiDockNode* node) { nullptr };
    void (*DockContextQueueUndockWindow)(ImGuiContext* ctx,ImGuiWindow* window) { nullptr };
    void (*DockContextRebuildNodes)(ImGuiContext* ctx) { nullptr };
    void (*DockContextShutdown)(ImGuiContext* ctx) { nullptr };
    void (*DockContextUpdateDocking)(ImGuiContext* ctx) { nullptr };
    void (*DockContextUpdateUndocking)(ImGuiContext* ctx) { nullptr };
    bool (*DockNodeBeginAmendTabBar)(ImGuiDockNode* node) { nullptr };
    void (*DockNodeEndAmendTabBar)() { nullptr };
    int (*DockNodeGetDepth)(const ImGuiDockNode* node) { nullptr };
    ImGuiDockNode* (*DockNodeGetRootNode)(ImGuiDockNode* node) { nullptr };
    void (*DockSpace)(ImGuiID id,const ImVec2 size,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class) { nullptr };
    ImGuiID (*DockSpaceOverViewport)(ImGuiViewport* viewport,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class) { nullptr };
    bool (*DragBehavior)(ImGuiID id,ImGuiDataType data_type,void* p_v,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*DragFloat)(const char* label,float* v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*DragFloat2)(const char* label,float v[2],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*DragFloat3)(const char* label,float v[3],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*DragFloat4)(const char* label,float v[4],float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*DragFloatRange2)(const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* format,const char* format_max,ImGuiSliderFlags flags) { nullptr };
    bool (*DragInt)(const char* label,int* v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*DragInt2)(const char* label,int v[2],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*DragInt3)(const char* label,int v[3],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*DragInt4)(const char* label,int v[4],float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*DragIntRange2)(const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* format,const char* format_max,ImGuiSliderFlags flags) { nullptr };
    bool (*DragScalar)(const char* label,ImGuiDataType data_type,void* p_data,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*DragScalarN)(const char* label,ImGuiDataType data_type,void* p_data,int components,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    void (*Dummy)(const ImVec2 size) { nullptr };
    void (*End)() { nullptr };
    void (*EndChild)() { nullptr };
    void (*EndChildFrame)() { nullptr };
    void (*EndColumns)() { nullptr };
    void (*EndCombo)() { nullptr };
    void (*EndDragDropSource)() { nullptr };
    void (*EndDragDropTarget)() { nullptr };
    void (*EndFrame)() { nullptr };
    void (*EndGroup)() { nullptr };
    void (*EndMainMenuBar)() { nullptr };
    void (*EndMenu)() { nullptr };
    void (*EndMenuBar)() { nullptr };
    void (*EndPopup)() { nullptr };
    void (*EndTabBar)() { nullptr };
    void (*EndTabItem)() { nullptr };
    void (*EndTable)() { nullptr };
    void (*EndTooltip)() { nullptr };
    void (*ErrorCheckEndFrameRecover)(ImGuiErrorLogCallback log_callback,void* user_data) { nullptr };
    void (*FindBestWindowPosForPopup)(ImVec2 *pOut,ImGuiWindow* window) { nullptr };
    void (*FindBestWindowPosForPopupEx)(ImVec2 *pOut,const ImVec2 ref_pos,const ImVec2 size,ImGuiDir* last_dir,const ImRect r_outer,const ImRect r_avoid,ImGuiPopupPositionPolicy policy) { nullptr };
    ImGuiOldColumns* (*FindOrCreateColumns)(ImGuiWindow* window,ImGuiID id) { nullptr };
    ImGuiWindowSettings* (*FindOrCreateWindowSettings)(const char* name) { nullptr };
    const char* (*FindRenderedTextEnd)(const char* text,const char* text_end) { nullptr };
    ImGuiSettingsHandler* (*FindSettingsHandler)(const char* type_name) { nullptr };
    ImGuiViewport* (*FindViewportByID)(ImGuiID id) { nullptr };
    ImGuiViewport* (*FindViewportByPlatformHandle)(void* platform_handle) { nullptr };
    ImGuiWindow* (*FindWindowByID)(ImGuiID id) { nullptr };
    ImGuiWindow* (*FindWindowByName)(const char* name) { nullptr };
    ImGuiWindowSettings* (*FindWindowSettings)(ImGuiID id) { nullptr };
    void (*FocusTopMostWindowUnderOne)(ImGuiWindow* under_this_window,ImGuiWindow* ignore_window) { nullptr };
    void (*FocusWindow)(ImGuiWindow* window) { nullptr };
    bool (*FocusableItemRegister)(ImGuiWindow* window,ImGuiID id) { nullptr };
    void (*FocusableItemUnregister)(ImGuiWindow* window) { nullptr };
    void (*GcAwakeTransientWindowBuffers)(ImGuiWindow* window) { nullptr };
    void (*GcCompactTransientMiscBuffers)() { nullptr };
    void (*GcCompactTransientWindowBuffers)(ImGuiWindow* window) { nullptr };
    ImGuiID (*GetActiveID)() { nullptr };
    ImDrawList* (*GetBackgroundDrawListNil)() { nullptr };
    ImDrawList* (*GetBackgroundDrawListViewportPtr)(ImGuiViewport* viewport) { nullptr };
    const char* (*GetClipboardText)() { nullptr };
    ImU32 (*GetColorU32Col)(ImGuiCol idx,float alpha_mul) { nullptr };
    ImU32 (*GetColorU32U32)(ImU32 col) { nullptr };
    ImU32 (*GetColorU32Vec4)(const ImVec4 col) { nullptr };
    int (*GetColumnIndex)() { nullptr };
    float (*GetColumnNormFromOffset)(const ImGuiOldColumns* columns,float offset) { nullptr };
    float (*GetColumnOffset)(int column_index) { nullptr };
    float (*GetColumnOffsetFromNorm)(const ImGuiOldColumns* columns,float offset_norm) { nullptr };
    float (*GetColumnWidth)(int column_index) { nullptr };
    int (*GetColumnsCount)() { nullptr };
    ImGuiID (*GetColumnsID)(const char* str_id,int count) { nullptr };
    void (*GetContentRegionAvail)(ImVec2 *pOut) { nullptr };
    void (*GetContentRegionMax)(ImVec2 *pOut) { nullptr };
    void (*GetContentRegionMaxAbs)(ImVec2 *pOut) { nullptr };
    ImGuiContext* (*GetCurrentContext)() { nullptr };
    ImGuiWindow* (*GetCurrentWindow)() { nullptr };
    ImGuiWindow* (*GetCurrentWindowRead)() { nullptr };
    void (*GetCursorPos)(ImVec2 *pOut) { nullptr };
    float (*GetCursorPosX)() { nullptr };
    float (*GetCursorPosY)() { nullptr };
    void (*GetCursorScreenPos)(ImVec2 *pOut) { nullptr };
    void (*GetCursorStartPos)(ImVec2 *pOut) { nullptr };
    ImFont* (*GetDefaultFont)() { nullptr };
    const ImGuiPayload* (*GetDragDropPayload)() { nullptr };
    ImDrawData* (*GetDrawData)() { nullptr };
    ImDrawListSharedData* (*GetDrawListSharedData)() { nullptr };
    ImGuiID (*GetFocusID)() { nullptr };
    ImGuiID (*GetFocusScope)() { nullptr };
    ImGuiID (*GetFocusedFocusScope)() { nullptr };
    ImFont* (*GetFont)() { nullptr };
    float (*GetFontSize)() { nullptr };
    void (*GetFontTexUvWhitePixel)(ImVec2 *pOut) { nullptr };
    ImDrawList* (*GetForegroundDrawListNil)() { nullptr };
    ImDrawList* (*GetForegroundDrawListViewportPtr)(ImGuiViewport* viewport) { nullptr };
    ImDrawList* (*GetForegroundDrawListWindowPtr)(ImGuiWindow* window) { nullptr };
    int (*GetFrameCount)() { nullptr };
    float (*GetFrameHeight)() { nullptr };
    float (*GetFrameHeightWithSpacing)() { nullptr };
    ImGuiID (*GetHoveredID)() { nullptr };
    ImGuiID (*GetIDPtr)(const void* ptr_id) { nullptr };
    ImGuiID (*GetIDStr)(const char* str_id) { nullptr };
    ImGuiID (*GetIDStrStr)(const char* str_id_begin,const char* str_id_end) { nullptr };
    ImGuiID (*GetIDWithSeed)(const char* str_id_begin,const char* str_id_end,ImGuiID seed) { nullptr };
    ImGuiIO* (*GetIO)() { nullptr };
    ImGuiInputTextState* (*GetInputTextState)(ImGuiID id) { nullptr };
    ImGuiID (*GetItemID)() { nullptr };
    void (*GetItemRectMax)(ImVec2 *pOut) { nullptr };
    void (*GetItemRectMin)(ImVec2 *pOut) { nullptr };
    void (*GetItemRectSize)(ImVec2 *pOut) { nullptr };
    ImGuiItemStatusFlags (*GetItemStatusFlags)() { nullptr };
    ImGuiItemFlags (*GetItemsFlags)() { nullptr };
    int (*GetKeyIndex)(ImGuiKey imgui_key) { nullptr };
    int (*GetKeyPressedAmount)(int key_index,float repeat_delay,float rate) { nullptr };
    ImGuiViewport* (*GetMainViewport)() { nullptr };
    ImGuiKeyModFlags (*GetMergedKeyModFlags)() { nullptr };
    ImGuiMouseCursor (*GetMouseCursor)() { nullptr };
    void (*GetMouseDragDelta)(ImVec2 *pOut,ImGuiMouseButton button,float lock_threshold) { nullptr };
    void (*GetMousePos)(ImVec2 *pOut) { nullptr };
    void (*GetMousePosOnOpeningCurrentPopup)(ImVec2 *pOut) { nullptr };
    float (*GetNavInputAmount)(ImGuiNavInput n,ImGuiInputReadMode mode) { nullptr };
    void (*GetNavInputAmount2d)(ImVec2 *pOut,ImGuiNavDirSourceFlags dir_sources,ImGuiInputReadMode mode,float slow_factor,float fast_factor) { nullptr };
    ImGuiPlatformIO* (*GetPlatformIO)() { nullptr };
    float (*GetScrollMaxX)() { nullptr };
    float (*GetScrollMaxY)() { nullptr };
    float (*GetScrollX)() { nullptr };
    float (*GetScrollY)() { nullptr };
    ImGuiStorage* (*GetStateStorage)() { nullptr };
    ImGuiStyle* (*GetStyle)() { nullptr };
    const char* (*GetStyleColorName)(ImGuiCol idx) { nullptr };
    const ImVec4* (*GetStyleColorVec4)(ImGuiCol idx) { nullptr };
    float (*GetTextLineHeight)() { nullptr };
    float (*GetTextLineHeightWithSpacing)() { nullptr };
    double (*GetTime)() { nullptr };
    ImGuiWindow* (*GetTopMostPopupModal)() { nullptr };
    float (*GetTreeNodeToLabelSpacing)() { nullptr };
    const char* (*GetVersion)() { nullptr };
    void (*GetWindowAllowedExtentRect)(ImRect *pOut,ImGuiWindow* window) { nullptr };
    bool (*GetWindowAlwaysWantOwnTabBar)(ImGuiWindow* window) { nullptr };
    void (*GetWindowContentRegionMax)(ImVec2 *pOut) { nullptr };
    void (*GetWindowContentRegionMin)(ImVec2 *pOut) { nullptr };
    float (*GetWindowContentRegionWidth)() { nullptr };
    ImGuiID (*GetWindowDockID)() { nullptr };
    ImGuiDockNode* (*GetWindowDockNode)() { nullptr };
    float (*GetWindowDpiScale)() { nullptr };
    ImDrawList* (*GetWindowDrawList)() { nullptr };
    float (*GetWindowHeight)() { nullptr };
    void (*GetWindowPos)(ImVec2 *pOut) { nullptr };
    ImGuiID (*GetWindowResizeID)(ImGuiWindow* window,int n) { nullptr };
    ImGuiID (*GetWindowScrollbarID)(ImGuiWindow* window,ImGuiAxis axis) { nullptr };
    void (*GetWindowScrollbarRect)(ImRect *pOut,ImGuiWindow* window,ImGuiAxis axis) { nullptr };
    void (*GetWindowSize)(ImVec2 *pOut) { nullptr };
    ImGuiViewport* (*GetWindowViewport)() { nullptr };
    float (*GetWindowWidth)() { nullptr };
    float (*ImAbsFloat)(float x) { nullptr };
    double (*ImAbsdouble)(double x) { nullptr };
    ImU32 (*ImAlphaBlendColors)(ImU32 col_a,ImU32 col_b) { nullptr };
    void (*ImBezierCubicCalc)(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,float t) { nullptr };
    void (*ImBezierCubicClosestPoint)(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 p,int num_segments) { nullptr };
    void (*ImBezierCubicClosestPointCasteljau)(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 p,float tess_tol) { nullptr };
    void (*ImBezierQuadraticCalc)(ImVec2 *pOut,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,float t) { nullptr };
    void (*ImBitArrayClearBit)(ImU32* arr,int n) { nullptr };
    void (*ImBitArraySetBit)(ImU32* arr,int n) { nullptr };
    void (*ImBitArraySetBitRange)(ImU32* arr,int n,int n2) { nullptr };
    bool (*ImBitArrayTestBit)(const ImU32* arr,int n) { nullptr };
    bool (*ImCharIsBlankA)(char c) { nullptr };
    bool (*ImCharIsBlankW)(unsigned int c) { nullptr };
    void (*ImClamp)(ImVec2 *pOut,const ImVec2 v,const ImVec2 mn,ImVec2 mx) { nullptr };
    float (*ImDot)(const ImVec2 a,const ImVec2 b) { nullptr };
    bool (*ImFileClose)(ImFileHandle file) { nullptr };
    ImU64 (*ImFileGetSize)(ImFileHandle file) { nullptr };
    void* (*ImFileLoadToMemory)(const char* filename,const char* mode,size_t* out_file_size,int padding_bytes) { nullptr };
    ImFileHandle (*ImFileOpen)(const char* filename,const char* mode) { nullptr };
    ImU64 (*ImFileRead)(void* data,ImU64 size,ImU64 count,ImFileHandle file) { nullptr };
    ImU64 (*ImFileWrite)(const void* data,ImU64 size,ImU64 count,ImFileHandle file) { nullptr };
    float (*ImFloorFloat)(float f) { nullptr };
    void (*ImFloorVec2)(ImVec2 *pOut,const ImVec2 v) { nullptr };
    void (*ImFontAtlasBuildFinish)(ImFontAtlas* atlas) { nullptr };
    void (*ImFontAtlasBuildInit)(ImFontAtlas* atlas) { nullptr };
    void (*ImFontAtlasBuildMultiplyCalcLookupTable)(unsigned char out_table[256],float in_multiply_factor) { nullptr };
    void (*ImFontAtlasBuildMultiplyRectAlpha8)(const unsigned char table[256],unsigned char* pixels,int x,int y,int w,int h,int stride) { nullptr };
    void (*ImFontAtlasBuildPackCustomRects)(ImFontAtlas* atlas,void* stbrp_context_opaque) { nullptr };
    void (*ImFontAtlasBuildRender1bppRectFromString)(ImFontAtlas* atlas,int atlas_x,int atlas_y,int w,int h,const char* in_str,char in_marker_char,unsigned char in_marker_pixel_value) { nullptr };
    void (*ImFontAtlasBuildSetupFont)(ImFontAtlas* atlas,ImFont* font,ImFontConfig* font_config,float ascent,float descent) { nullptr };
    bool (*ImFontAtlasBuildWithStbTruetype)(ImFontAtlas* atlas) { nullptr };
    int (*ImFormatString)(char* buf,size_t buf_size,const char* fmt,...) { nullptr };
    int (*ImFormatStringV)(char* buf,size_t buf_size,const char* fmt,va_list args) { nullptr };
    ImGuiDir (*ImGetDirQuadrantFromDelta)(float dx,float dy) { nullptr };
    ImGuiID (*ImHashData)(const void* data,size_t data_size,ImU32 seed) { nullptr };
    ImGuiID (*ImHashStr)(const char* data,size_t data_size,ImU32 seed) { nullptr };
    float (*ImInvLength)(const ImVec2 lhs,float fail_value) { nullptr };
    bool (*ImIsPowerOfTwoInt)(int v) { nullptr };
    bool (*ImIsPowerOfTwoU64)(ImU64 v) { nullptr };
    float (*ImLengthSqrVec2)(const ImVec2 lhs) { nullptr };
    float (*ImLengthSqrVec4)(const ImVec4 lhs) { nullptr };
    void (*ImLerpVec2Float)(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,float t) { nullptr };
    void (*ImLerpVec2Vec2)(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 t) { nullptr };
    void (*ImLerpVec4)(ImVec4 *pOut,const ImVec4 a,const ImVec4 b,float t) { nullptr };
    void (*ImLineClosestPoint)(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 p) { nullptr };
    float (*ImLinearSweep)(float current,float target,float speed) { nullptr };
    float (*ImLogFloat)(float x) { nullptr };
    double (*ImLogdouble)(double x) { nullptr };
    void (*ImMax)(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs) { nullptr };
    void (*ImMin)(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs) { nullptr };
    int (*ImModPositive)(int a,int b) { nullptr };
    void (*ImMul)(ImVec2 *pOut,const ImVec2 lhs,const ImVec2 rhs) { nullptr };
    const char* (*ImParseFormatFindEnd)(const char* format) { nullptr };
    const char* (*ImParseFormatFindStart)(const char* format) { nullptr };
    int (*ImParseFormatPrecision)(const char* format,int default_value) { nullptr };
    const char* (*ImParseFormatTrimDecorations)(const char* format,char* buf,size_t buf_size) { nullptr };
    float (*ImPowFloat)(float x,float y) { nullptr };
    double (*ImPowdouble)(double x,double y) { nullptr };
    void (*ImRotate)(ImVec2 *pOut,const ImVec2 v,float cos_a,float sin_a) { nullptr };
    float (*ImSaturate)(float f) { nullptr };
    float (*ImSignFloat)(float x) { nullptr };
    double (*ImSigndouble)(double x) { nullptr };
    const char* (*ImStrSkipBlank)(const char* str) { nullptr };
    void (*ImStrTrimBlanks)(char* str) { nullptr };
    const ImWchar* (*ImStrbolW)(const ImWchar* buf_mid_line,const ImWchar* buf_begin) { nullptr };
    const char* (*ImStrchrRange)(const char* str_begin,const char* str_end,char c) { nullptr };
    char* (*ImStrdup)(const char* str) { nullptr };
    char* (*ImStrdupcpy)(char* dst,size_t* p_dst_size,const char* str) { nullptr };
    const char* (*ImStreolRange)(const char* str,const char* str_end) { nullptr };
    int (*ImStricmp)(const char* str1,const char* str2) { nullptr };
    const char* (*ImStristr)(const char* haystack,const char* haystack_end,const char* needle,const char* needle_end) { nullptr };
    int (*ImStrlenW)(const ImWchar* str) { nullptr };
    void (*ImStrncpy)(char* dst,const char* src,size_t count) { nullptr };
    int (*ImStrnicmp)(const char* str1,const char* str2,size_t count) { nullptr };
    int (*ImTextCharFromUtf8)(unsigned int* out_char,const char* in_text,const char* in_text_end) { nullptr };
    int (*ImTextCountCharsFromUtf8)(const char* in_text,const char* in_text_end) { nullptr };
    int (*ImTextCountUtf8BytesFromChar)(const char* in_text,const char* in_text_end) { nullptr };
    int (*ImTextCountUtf8BytesFromStr)(const ImWchar* in_text,const ImWchar* in_text_end) { nullptr };
    int (*ImTextStrFromUtf8)(ImWchar* buf,int buf_size,const char* in_text,const char* in_text_end,const char** in_remaining) { nullptr };
    int (*ImTextStrToUtf8)(char* buf,int buf_size,const ImWchar* in_text,const ImWchar* in_text_end) { nullptr };
    float (*ImTriangleArea)(const ImVec2 a,const ImVec2 b,const ImVec2 c) { nullptr };
    void (*ImTriangleBarycentricCoords)(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p,float* out_u,float* out_v,float* out_w) { nullptr };
    void (*ImTriangleClosestPoint)(ImVec2 *pOut,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p) { nullptr };
    bool (*ImTriangleContainsPoint)(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 p) { nullptr };
    int (*ImUpperPowerOfTwo)(int v) { nullptr };
    void (*Image)(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col) { nullptr };
    bool (*ImageButton)(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,int frame_padding,const ImVec4 bg_col,const ImVec4 tint_col) { nullptr };
    bool (*ImageButtonEx)(ImGuiID id,ImTextureID texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec2 padding,const ImVec4 bg_col,const ImVec4 tint_col) { nullptr };
    void (*Indent)(float indent_w) { nullptr };
    void (*Initialize)(ImGuiContext* context) { nullptr };
    bool (*InputDouble)(const char* label,double* v,double step,double step_fast,const char* format,ImGuiInputTextFlags flags) { nullptr };
    bool (*InputFloat)(const char* label,float* v,float step,float step_fast,const char* format,ImGuiInputTextFlags flags) { nullptr };
    bool (*InputFloat2)(const char* label,float v[2],const char* format,ImGuiInputTextFlags flags) { nullptr };
    bool (*InputFloat3)(const char* label,float v[3],const char* format,ImGuiInputTextFlags flags) { nullptr };
    bool (*InputFloat4)(const char* label,float v[4],const char* format,ImGuiInputTextFlags flags) { nullptr };
    bool (*InputInt)(const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags flags) { nullptr };
    bool (*InputInt2)(const char* label,int v[2],ImGuiInputTextFlags flags) { nullptr };
    bool (*InputInt3)(const char* label,int v[3],ImGuiInputTextFlags flags) { nullptr };
    bool (*InputInt4)(const char* label,int v[4],ImGuiInputTextFlags flags) { nullptr };
    bool (*InputScalar)(const char* label,ImGuiDataType data_type,void* p_data,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags) { nullptr };
    bool (*InputScalarN)(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags) { nullptr };
    bool (*InputText)(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data) { nullptr };
    bool (*InputTextEx)(const char* label,const char* hint,char* buf,int buf_size,const ImVec2 size_arg,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data) { nullptr };
    bool (*InputTextMultiline)(const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data) { nullptr };
    bool (*InputTextWithHint)(const char* label,const char* hint,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data) { nullptr };
    bool (*InvisibleButton)(const char* str_id,const ImVec2 size,ImGuiButtonFlags flags) { nullptr };
    bool (*IsActiveIdUsingKey)(ImGuiKey key) { nullptr };
    bool (*IsActiveIdUsingNavDir)(ImGuiDir dir) { nullptr };
    bool (*IsActiveIdUsingNavInput)(ImGuiNavInput input) { nullptr };
    bool (*IsAnyItemActive)() { nullptr };
    bool (*IsAnyItemFocused)() { nullptr };
    bool (*IsAnyItemHovered)() { nullptr };
    bool (*IsAnyMouseDown)() { nullptr };
    bool (*IsClippedEx)(const ImRect bb,ImGuiID id,bool clip_even_when_logged) { nullptr };
    bool (*IsDragDropPayloadBeingAccepted)() { nullptr };
    bool (*IsItemActivated)() { nullptr };
    bool (*IsItemActive)() { nullptr };
    bool (*IsItemClicked)(ImGuiMouseButton mouse_button) { nullptr };
    bool (*IsItemDeactivated)() { nullptr };
    bool (*IsItemDeactivatedAfterEdit)() { nullptr };
    bool (*IsItemEdited)() { nullptr };
    bool (*IsItemFocused)() { nullptr };
    bool (*IsItemHovered)(ImGuiHoveredFlags flags) { nullptr };
    bool (*IsItemToggledOpen)() { nullptr };
    bool (*IsItemToggledSelection)() { nullptr };
    bool (*IsItemVisible)() { nullptr };
    bool (*IsKeyDown)(int user_key_index) { nullptr };
    bool (*IsKeyPressed)(int user_key_index,bool repeat) { nullptr };
    bool (*IsKeyPressedMap)(ImGuiKey key,bool repeat) { nullptr };
    bool (*IsKeyReleased)(int user_key_index) { nullptr };
    bool (*IsMouseClicked)(ImGuiMouseButton button,bool repeat) { nullptr };
    bool (*IsMouseDoubleClicked)(ImGuiMouseButton button) { nullptr };
    bool (*IsMouseDown)(ImGuiMouseButton button) { nullptr };
    bool (*IsMouseDragPastThreshold)(ImGuiMouseButton button,float lock_threshold) { nullptr };
    bool (*IsMouseDragging)(ImGuiMouseButton button,float lock_threshold) { nullptr };
    bool (*IsMouseHoveringRect)(const ImVec2 r_min,const ImVec2 r_max,bool clip) { nullptr };
    bool (*IsMousePosValid)(const ImVec2* mouse_pos) { nullptr };
    bool (*IsMouseReleased)(ImGuiMouseButton button) { nullptr };
    bool (*IsNavInputDown)(ImGuiNavInput n) { nullptr };
    bool (*IsNavInputTest)(ImGuiNavInput n,ImGuiInputReadMode rm) { nullptr };
    bool (*IsPopupOpenID)(ImGuiID id,ImGuiPopupFlags popup_flags) { nullptr };
    bool (*IsPopupOpenStr)(const char* str_id,ImGuiPopupFlags flags) { nullptr };
    bool (*IsRectVisibleNil)(const ImVec2 size) { nullptr };
    bool (*IsRectVisibleVec2)(const ImVec2 rect_min,const ImVec2 rect_max) { nullptr };
    bool (*IsWindowAbove)(ImGuiWindow* potential_above,ImGuiWindow* potential_below) { nullptr };
    bool (*IsWindowAppearing)() { nullptr };
    bool (*IsWindowChildOf)(ImGuiWindow* window,ImGuiWindow* potential_parent) { nullptr };
    bool (*IsWindowCollapsed)() { nullptr };
    bool (*IsWindowDocked)() { nullptr };
    bool (*IsWindowFocused)(ImGuiFocusedFlags flags) { nullptr };
    bool (*IsWindowHovered)(ImGuiHoveredFlags flags) { nullptr };
    bool (*IsWindowNavFocusable)(ImGuiWindow* window) { nullptr };
    bool (*ItemAdd)(const ImRect bb,ImGuiID id,const ImRect* nav_bb) { nullptr };
    bool (*ItemHoverable)(const ImRect bb,ImGuiID id) { nullptr };
    void (*ItemSizeRect)(const ImRect bb,float text_baseline_y) { nullptr };
    void (*ItemSizeVec2)(const ImVec2 size,float text_baseline_y) { nullptr };
    void (*KeepAliveID)(ImGuiID id) { nullptr };
    void (*LabelText)(const char* label,const char* fmt,...) { nullptr };
    void (*LabelTextV)(const char* label,const char* fmt,va_list args) { nullptr };
    bool (*ListBoxFnBoolPtr)(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items) { nullptr };
    void (*ListBoxFooter)() { nullptr };
    bool (*ListBoxHeaderInt)(const char* label,int items_count,int height_in_items) { nullptr };
    bool (*ListBoxHeaderVec2)(const char* label,const ImVec2 size) { nullptr };
    bool (*ListBoxStr_arr)(const char* label,int* current_item,const char* const items[],int items_count,int height_in_items) { nullptr };
    void (*LoadIniSettingsFromDisk)(const char* ini_filename) { nullptr };
    void (*LoadIniSettingsFromMemory)(const char* ini_data,size_t ini_size) { nullptr };
    void (*LogBegin)(ImGuiLogType type,int auto_open_depth) { nullptr };
    void (*LogButtons)() { nullptr };
    void (*LogFinish)() { nullptr };
    void (*LogRenderedText)(const ImVec2* ref_pos,const char* text,const char* text_end) { nullptr };
    void (*LogText)(const char* fmt,...) { nullptr };
    void (*LogToBuffer)(int auto_open_depth) { nullptr };
    void (*LogToClipboard)(int auto_open_depth) { nullptr };
    void (*LogToFile)(int auto_open_depth,const char* filename) { nullptr };
    void (*LogToTTY)(int auto_open_depth) { nullptr };
    void (*MarkIniSettingsDirtyNil)() { nullptr };
    void (*MarkIniSettingsDirtyWindowPtr)(ImGuiWindow* window) { nullptr };
    void (*MarkItemEdited)(ImGuiID id) { nullptr };
    void* (*MemAlloc)(size_t size) { nullptr };
    void (*MemFree)(void* ptr) { nullptr };
    bool (*MenuItemBool)(const char* label,const char* shortcut,bool selected,bool enabled) { nullptr };
    bool (*MenuItemBoolPtr)(const char* label,const char* shortcut,bool* p_selected,bool enabled) { nullptr };
    void (*NavInitWindow)(ImGuiWindow* window,bool force_reinit) { nullptr };
    bool (*NavMoveRequestButNoResultYet)() { nullptr };
    void (*NavMoveRequestCancel)() { nullptr };
    void (*NavMoveRequestForward)(ImGuiDir move_dir,ImGuiDir clip_dir,const ImRect bb_rel,ImGuiNavMoveFlags move_flags) { nullptr };
    void (*NavMoveRequestTryWrapping)(ImGuiWindow* window,ImGuiNavMoveFlags move_flags) { nullptr };
    void (*NewFrame)() { nullptr };
    void (*NewLine)() { nullptr };
    void (*NextColumn)() { nullptr };
    void (*OpenPopup)(const char* str_id,ImGuiPopupFlags popup_flags) { nullptr };
    void (*OpenPopupEx)(ImGuiID id,ImGuiPopupFlags popup_flags) { nullptr };
    void (*OpenPopupOnItemClick)(const char* str_id,ImGuiPopupFlags popup_flags) { nullptr };
    int (*PlotEx)(ImGuiPlotType plot_type,const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 frame_size) { nullptr };
    void (*PlotHistogramFloatPtr)(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride) { nullptr };
    void (*PlotHistogramFnFloatPtr)(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size) { nullptr };
    void (*PlotLinesFloatPtr)(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride) { nullptr };
    void (*PlotLinesFnFloatPtr)(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size) { nullptr };
    void (*PopAllowKeyboardFocus)() { nullptr };
    void (*PopButtonRepeat)() { nullptr };
    void (*PopClipRect)() { nullptr };
    void (*PopColumnsBackground)() { nullptr };
    void (*PopFocusScope)() { nullptr };
    void (*PopFont)() { nullptr };
    void (*PopID)() { nullptr };
    void (*PopItemFlag)() { nullptr };
    void (*PopItemWidth)() { nullptr };
    void (*PopStyleColor)(int count) { nullptr };
    void (*PopStyleVar)(int count) { nullptr };
    void (*PopTextWrapPos)() { nullptr };
    void (*ProgressBar)(float fraction,const ImVec2 size_arg,const char* overlay) { nullptr };
    void (*PushAllowKeyboardFocus)(bool allow_keyboard_focus) { nullptr };
    void (*PushButtonRepeat)(bool repeat) { nullptr };
    void (*PushClipRect)(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect) { nullptr };
    void (*PushColumnClipRect)(int column_index) { nullptr };
    void (*PushColumnsBackground)() { nullptr };
    void (*PushFocusScope)(ImGuiID id) { nullptr };
    void (*PushFont)(ImFont* font) { nullptr };
    void (*PushIDInt)(int int_id) { nullptr };
    void (*PushIDPtr)(const void* ptr_id) { nullptr };
    void (*PushIDStr)(const char* str_id) { nullptr };
    void (*PushIDStrStr)(const char* str_id_begin,const char* str_id_end) { nullptr };
    void (*PushItemFlag)(ImGuiItemFlags option,bool enabled) { nullptr };
    void (*PushItemWidth)(float item_width) { nullptr };
    void (*PushMultiItemsWidths)(int components,float width_full) { nullptr };
    void (*PushOverrideID)(ImGuiID id) { nullptr };
    void (*PushStyleColorU32)(ImGuiCol idx,ImU32 col) { nullptr };
    void (*PushStyleColorVec4)(ImGuiCol idx,const ImVec4 col) { nullptr };
    void (*PushStyleVarFloat)(ImGuiStyleVar idx,float val) { nullptr };
    void (*PushStyleVarVec2)(ImGuiStyleVar idx,const ImVec2 val) { nullptr };
    void (*PushTextWrapPos)(float wrap_local_pos_x) { nullptr };
    bool (*RadioButtonBool)(const char* label,bool active) { nullptr };
    bool (*RadioButtonIntPtr)(const char* label,int* v,int v_button) { nullptr };
    void (*Render)() { nullptr };
    void (*RenderArrow)(ImDrawList* draw_list,ImVec2 pos,ImU32 col,ImGuiDir dir,float scale) { nullptr };
    void (*RenderArrowDockMenu)(ImDrawList* draw_list,ImVec2 p_min,float sz,ImU32 col) { nullptr };
    void (*RenderArrowPointingAt)(ImDrawList* draw_list,ImVec2 pos,ImVec2 half_sz,ImGuiDir direction,ImU32 col) { nullptr };
    void (*RenderBullet)(ImDrawList* draw_list,ImVec2 pos,ImU32 col) { nullptr };
    void (*RenderCheckMark)(ImDrawList* draw_list,ImVec2 pos,ImU32 col,float sz) { nullptr };
    void (*RenderColorRectWithAlphaCheckerboard)(ImDrawList* draw_list,ImVec2 p_min,ImVec2 p_max,ImU32 fill_col,float grid_step,ImVec2 grid_off,float rounding,int rounding_corners_flags) { nullptr };
    void (*RenderFrame)(ImVec2 p_min,ImVec2 p_max,ImU32 fill_col,bool border,float rounding) { nullptr };
    void (*RenderFrameBorder)(ImVec2 p_min,ImVec2 p_max,float rounding) { nullptr };
    void (*RenderMouseCursor)(ImDrawList* draw_list,ImVec2 pos,float scale,ImGuiMouseCursor mouse_cursor,ImU32 col_fill,ImU32 col_border,ImU32 col_shadow) { nullptr };
    void (*RenderNavHighlight)(const ImRect bb,ImGuiID id,ImGuiNavHighlightFlags flags) { nullptr };
    void (*RenderPlatformWindowsDefault)(void* platform_render_arg,void* renderer_render_arg) { nullptr };
    void (*RenderRectFilledRangeH)(ImDrawList* draw_list,const ImRect rect,ImU32 col,float x_start_norm,float x_end_norm,float rounding) { nullptr };
    void (*RenderRectFilledWithHole)(ImDrawList* draw_list,ImRect outer,ImRect inner,ImU32 col,float rounding) { nullptr };
    void (*RenderText)(ImVec2 pos,const char* text,const char* text_end,bool hide_text_after_hash) { nullptr };
    void (*RenderTextClipped)(const ImVec2 pos_min,const ImVec2 pos_max,const char* text,const char* text_end,const ImVec2* text_size_if_known,const ImVec2 align,const ImRect* clip_rect) { nullptr };
    void (*RenderTextClippedEx)(ImDrawList* draw_list,const ImVec2 pos_min,const ImVec2 pos_max,const char* text,const char* text_end,const ImVec2* text_size_if_known,const ImVec2 align,const ImRect* clip_rect) { nullptr };
    void (*RenderTextEllipsis)(ImDrawList* draw_list,const ImVec2 pos_min,const ImVec2 pos_max,float clip_max_x,float ellipsis_max_x,const char* text,const char* text_end,const ImVec2* text_size_if_known) { nullptr };
    void (*RenderTextWrapped)(ImVec2 pos,const char* text,const char* text_end,float wrap_width) { nullptr };
    void (*ResetMouseDragDelta)(ImGuiMouseButton button) { nullptr };
    void (*SameLine)(float offset_from_start_x,float spacing) { nullptr };
    void (*SaveIniSettingsToDisk)(const char* ini_filename) { nullptr };
    const char* (*SaveIniSettingsToMemory)(size_t* out_ini_size) { nullptr };
    void (*ScaleWindowsInViewport)(ImGuiViewportP* viewport,float scale) { nullptr };
    void (*ScrollToBringRectIntoView)(ImVec2 *pOut,ImGuiWindow* window,const ImRect item_rect) { nullptr };
    void (*Scrollbar)(ImGuiAxis axis) { nullptr };
    bool (*ScrollbarEx)(const ImRect bb,ImGuiID id,ImGuiAxis axis,float* p_scroll_v,float avail_v,float contents_v,ImDrawCornerFlags rounding_corners) { nullptr };
    bool (*SelectableBool)(const char* label,bool selected,ImGuiSelectableFlags flags,const ImVec2 size) { nullptr };
    bool (*SelectableBoolPtr)(const char* label,bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size) { nullptr };
    void (*Separator)() { nullptr };
    void (*SeparatorEx)(ImGuiSeparatorFlags flags) { nullptr };
    void (*SetActiveID)(ImGuiID id,ImGuiWindow* window) { nullptr };
    void (*SetAllocatorFunctions)(void*(*alloc_func)(size_t sz,void* user_data),void(*free_func)(void* ptr,void* user_data),void* user_data) { nullptr };
    void (*SetClipboardText)(const char* text) { nullptr };
    void (*SetColorEditOptions)(ImGuiColorEditFlags flags) { nullptr };
    void (*SetColumnOffset)(int column_index,float offset_x) { nullptr };
    void (*SetColumnWidth)(int column_index,float width) { nullptr };
    void (*SetCurrentContext)(ImGuiContext* ctx) { nullptr };
    void (*SetCurrentFont)(ImFont* font) { nullptr };
    void (*SetCursorPos)(const ImVec2 local_pos) { nullptr };
    void (*SetCursorPosX)(float local_x) { nullptr };
    void (*SetCursorPosY)(float local_y) { nullptr };
    void (*SetCursorScreenPos)(const ImVec2 pos) { nullptr };
    bool (*SetDragDropPayload)(const char* type,const void* data,size_t sz,ImGuiCond cond) { nullptr };
    void (*SetFocusID)(ImGuiID id,ImGuiWindow* window) { nullptr };
    void (*SetHoveredID)(ImGuiID id) { nullptr };
    void (*SetItemAllowOverlap)() { nullptr };
    void (*SetItemDefaultFocus)() { nullptr };
    void (*SetItemUsingMouseWheel)() { nullptr };
    void (*SetKeyboardFocusHere)(int offset) { nullptr };
    void (*SetLastItemData)(ImGuiWindow* window,ImGuiID item_id,ImGuiItemStatusFlags status_flags,const ImRect item_rect) { nullptr };
    void (*SetMouseCursor)(ImGuiMouseCursor cursor_type) { nullptr };
    void (*SetNavID)(ImGuiID id,int nav_layer,ImGuiID focus_scope_id) { nullptr };
    void (*SetNavIDWithRectRel)(ImGuiID id,int nav_layer,ImGuiID focus_scope_id,const ImRect rect_rel) { nullptr };
    void (*SetNextItemOpen)(bool is_open,ImGuiCond cond) { nullptr };
    void (*SetNextItemWidth)(float item_width) { nullptr };
    void (*SetNextWindowBgAlpha)(float alpha) { nullptr };
    void (*SetNextWindowClass)(const ImGuiWindowClass* window_class) { nullptr };
    void (*SetNextWindowCollapsed)(bool collapsed,ImGuiCond cond) { nullptr };
    void (*SetNextWindowContentSize)(const ImVec2 size) { nullptr };
    void (*SetNextWindowDockID)(ImGuiID dock_id,ImGuiCond cond) { nullptr };
    void (*SetNextWindowFocus)() { nullptr };
    void (*SetNextWindowPos)(const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot) { nullptr };
    void (*SetNextWindowScroll)(const ImVec2 scroll) { nullptr };
    void (*SetNextWindowSize)(const ImVec2 size,ImGuiCond cond) { nullptr };
    void (*SetNextWindowSizeConstraints)(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data) { nullptr };
    void (*SetNextWindowViewport)(ImGuiID viewport_id) { nullptr };
    void (*SetScrollFromPosXFloat)(float local_x,float center_x_ratio) { nullptr };
    void (*SetScrollFromPosXWindowPtr)(ImGuiWindow* window,float local_x,float center_x_ratio) { nullptr };
    void (*SetScrollFromPosYFloat)(float local_y,float center_y_ratio) { nullptr };
    void (*SetScrollFromPosYWindowPtr)(ImGuiWindow* window,float local_y,float center_y_ratio) { nullptr };
    void (*SetScrollHereX)(float center_x_ratio) { nullptr };
    void (*SetScrollHereY)(float center_y_ratio) { nullptr };
    void (*SetScrollXFloat)(float scroll_x) { nullptr };
    void (*SetScrollXWindowPtr)(ImGuiWindow* window,float scroll_x) { nullptr };
    void (*SetScrollYFloat)(float scroll_y) { nullptr };
    void (*SetScrollYWindowPtr)(ImGuiWindow* window,float scroll_y) { nullptr };
    void (*SetStateStorage)(ImGuiStorage* storage) { nullptr };
    void (*SetTabItemClosed)(const char* tab_or_docked_window_label) { nullptr };
    void (*SetTooltip)(const char* fmt,...) { nullptr };
    void (*SetTooltipV)(const char* fmt,va_list args) { nullptr };
    void (*SetWindowClipRectBeforeSetChannel)(ImGuiWindow* window,const ImRect clip_rect) { nullptr };
    void (*SetWindowCollapsedBool)(bool collapsed,ImGuiCond cond) { nullptr };
    void (*SetWindowCollapsedStr)(const char* name,bool collapsed,ImGuiCond cond) { nullptr };
    void (*SetWindowCollapsedWindowPtr)(ImGuiWindow* window,bool collapsed,ImGuiCond cond) { nullptr };
    void (*SetWindowDock)(ImGuiWindow* window,ImGuiID dock_id,ImGuiCond cond) { nullptr };
    void (*SetWindowFocusNil)() { nullptr };
    void (*SetWindowFocusStr)(const char* name) { nullptr };
    void (*SetWindowFontScale)(float scale) { nullptr };
    void (*SetWindowHitTestHole)(ImGuiWindow* window,const ImVec2 pos,const ImVec2 size) { nullptr };
    void (*SetWindowPosStr)(const char* name,const ImVec2 pos,ImGuiCond cond) { nullptr };
    void (*SetWindowPosVec2)(const ImVec2 pos,ImGuiCond cond) { nullptr };
    void (*SetWindowPosWindowPtr)(ImGuiWindow* window,const ImVec2 pos,ImGuiCond cond) { nullptr };
    void (*SetWindowSizeStr)(const char* name,const ImVec2 size,ImGuiCond cond) { nullptr };
    void (*SetWindowSizeVec2)(const ImVec2 size,ImGuiCond cond) { nullptr };
    void (*SetWindowSizeWindowPtr)(ImGuiWindow* window,const ImVec2 size,ImGuiCond cond) { nullptr };
    void (*ShadeVertsLinearColorGradientKeepAlpha)(ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,ImVec2 gradient_p0,ImVec2 gradient_p1,ImU32 col0,ImU32 col1) { nullptr };
    void (*ShadeVertsLinearUV)(ImDrawList* draw_list,int vert_start_idx,int vert_end_idx,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,bool clamp) { nullptr };
    void (*ShowAboutWindow)(bool* p_open) { nullptr };
    void (*ShowDemoWindow)(bool* p_open) { nullptr };
    void (*ShowFontSelector)(const char* label) { nullptr };
    void (*ShowMetricsWindow)(bool* p_open) { nullptr };
    void (*ShowStyleEditor)(ImGuiStyle* ref) { nullptr };
    bool (*ShowStyleSelector)(const char* label) { nullptr };
    void (*ShowUserGuide)() { nullptr };
    void (*ShrinkWidths)(ImGuiShrinkWidthItem* items,int count,float width_excess) { nullptr };
    void (*Shutdown)(ImGuiContext* context) { nullptr };
    bool (*SliderAngle)(const char* label,float* v_rad,float v_degrees_min,float v_degrees_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SliderBehavior)(const ImRect bb,ImGuiID id,ImGuiDataType data_type,void* p_v,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags,ImRect* out_grab_bb) { nullptr };
    bool (*SliderFloat)(const char* label,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SliderFloat2)(const char* label,float v[2],float v_min,float v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SliderFloat3)(const char* label,float v[3],float v_min,float v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SliderFloat4)(const char* label,float v[4],float v_min,float v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SliderInt)(const char* label,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SliderInt2)(const char* label,int v[2],int v_min,int v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SliderInt3)(const char* label,int v[3],int v_min,int v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SliderInt4)(const char* label,int v[4],int v_min,int v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SliderScalar)(const char* label,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SliderScalarN)(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*SmallButton)(const char* label) { nullptr };
    void (*Spacing)() { nullptr };
    bool (*SplitterBehavior)(const ImRect bb,ImGuiID id,ImGuiAxis axis,float* size1,float* size2,float min_size1,float min_size2,float hover_extend,float hover_visibility_delay) { nullptr };
    void (*StartMouseMovingWindow)(ImGuiWindow* window) { nullptr };
    void (*StartMouseMovingWindowOrNode)(ImGuiWindow* window,ImGuiDockNode* node,bool undock_floating_node) { nullptr };
    void (*StyleColorsClassic)(ImGuiStyle* dst) { nullptr };
    void (*StyleColorsDark)(ImGuiStyle* dst) { nullptr };
    void (*StyleColorsLight)(ImGuiStyle* dst) { nullptr };
    void (*TabBarAddTab)(ImGuiTabBar* tab_bar,ImGuiTabItemFlags tab_flags,ImGuiWindow* window) { nullptr };
    void (*TabBarCloseTab)(ImGuiTabBar* tab_bar,ImGuiTabItem* tab) { nullptr };
    ImGuiTabItem* (*TabBarFindMostRecentlySelectedTabForActiveWindow)(ImGuiTabBar* tab_bar) { nullptr };
    ImGuiTabItem* (*TabBarFindTabByID)(ImGuiTabBar* tab_bar,ImGuiID tab_id) { nullptr };
    bool (*TabBarProcessReorder)(ImGuiTabBar* tab_bar) { nullptr };
    void (*TabBarQueueReorder)(ImGuiTabBar* tab_bar,const ImGuiTabItem* tab,int dir) { nullptr };
    void (*TabBarRemoveTab)(ImGuiTabBar* tab_bar,ImGuiID tab_id) { nullptr };
    void (*TabItemBackground)(ImDrawList* draw_list,const ImRect bb,ImGuiTabItemFlags flags,ImU32 col) { nullptr };
    bool (*TabItemButton)(const char* label,ImGuiTabItemFlags flags) { nullptr };
    void (*TabItemCalcSize)(ImVec2 *pOut,const char* label,bool has_close_button) { nullptr };
    bool (*TabItemEx)(ImGuiTabBar* tab_bar,const char* label,bool* p_open,ImGuiTabItemFlags flags,ImGuiWindow* docked_window) { nullptr };
    void (*TabItemLabelAndCloseButton)(ImDrawList* draw_list,const ImRect bb,ImGuiTabItemFlags flags,ImVec2 frame_padding,const char* label,ImGuiID tab_id,ImGuiID close_button_id,bool is_contents_visible,bool* out_just_closed,bool* out_text_clipped) { nullptr };
    void (*TableBeginApplyRequests)(ImGuiTable* table) { nullptr };
    void (*TableBeginCell)(ImGuiTable* table,int column_n) { nullptr };
    void (*TableBeginInitMemory)(ImGuiTable* table,int columns_count) { nullptr };
    void (*TableBeginRow)(ImGuiTable* table) { nullptr };
    void (*TableDrawBorders)(ImGuiTable* table) { nullptr };
    void (*TableDrawContextMenu)(ImGuiTable* table) { nullptr };
    void (*TableEndCell)(ImGuiTable* table) { nullptr };
    void (*TableEndRow)(ImGuiTable* table) { nullptr };
    ImGuiTable* (*TableFindByID)(ImGuiID id) { nullptr };
    void (*TableFixColumnSortDirection)(ImGuiTable* table,ImGuiTableColumn* column) { nullptr };
    void (*TableGcCompactSettings)() { nullptr };
    void (*TableGcCompactTransientBuffers)(ImGuiTable* table) { nullptr };
    ImGuiTableSettings* (*TableGetBoundSettings)(ImGuiTable* table) { nullptr };
    void (*TableGetCellBgRect)(ImRect *pOut,const ImGuiTable* table,int column_n) { nullptr };
    int (*TableGetColumnCount)() { nullptr };
    ImGuiTableColumnFlags (*TableGetColumnFlags)(int column_n) { nullptr };
    int (*TableGetColumnIndex)() { nullptr };
    const char* (*TableGetColumnNameInt)(int column_n) { nullptr };
    const char* (*TableGetColumnNameTablePtr)(const ImGuiTable* table,int column_n) { nullptr };
    ImGuiSortDirection (*TableGetColumnNextSortDirection)(ImGuiTableColumn* column) { nullptr };
    ImGuiID (*TableGetColumnResizeID)(const ImGuiTable* table,int column_n,int instance_no) { nullptr };
    float (*TableGetColumnWidthAuto)(ImGuiTable* table,ImGuiTableColumn* column) { nullptr };
    float (*TableGetHeaderRowHeight)() { nullptr };
    int (*TableGetHoveredColumn)() { nullptr };
    float (*TableGetMaxColumnWidth)(const ImGuiTable* table,int column_n) { nullptr };
    int (*TableGetRowIndex)() { nullptr };
    ImGuiTableSortSpecs* (*TableGetSortSpecs)() { nullptr };
    void (*TableHeader)(const char* label) { nullptr };
    void (*TableHeadersRow)() { nullptr };
    void (*TableLoadSettings)(ImGuiTable* table) { nullptr };
    void (*TableMergeDrawChannels)(ImGuiTable* table) { nullptr };
    bool (*TableNextColumn)() { nullptr };
    void (*TableNextRow)(ImGuiTableRowFlags row_flags,float min_row_height) { nullptr };
    void (*TableOpenContextMenu)(int column_n) { nullptr };
    void (*TablePopBackgroundChannel)() { nullptr };
    void (*TablePushBackgroundChannel)() { nullptr };
    void (*TableRemove)(ImGuiTable* table) { nullptr };
    void (*TableResetSettings)(ImGuiTable* table) { nullptr };
    void (*TableSaveSettings)(ImGuiTable* table) { nullptr };
    void (*TableSetBgColor)(ImGuiTableBgTarget bg_target,ImU32 color,int column_n) { nullptr };
    bool (*TableSetColumnIndex)(int column_n) { nullptr };
    void (*TableSetColumnSortDirection)(int column_n,ImGuiSortDirection sort_direction,bool append_to_sort_specs) { nullptr };
    void (*TableSetColumnWidth)(int column_n,float width) { nullptr };
    void (*TableSetColumnWidthAutoAll)(ImGuiTable* table) { nullptr };
    void (*TableSetColumnWidthAutoSingle)(ImGuiTable* table,int column_n) { nullptr };
    ImGuiTableSettings* (*TableSettingsCreate)(ImGuiID id,int columns_count) { nullptr };
    ImGuiTableSettings* (*TableSettingsFindByID)(ImGuiID id) { nullptr };
    void (*TableSettingsInstallHandler)(ImGuiContext* context) { nullptr };
    void (*TableSetupColumn)(const char* label,ImGuiTableColumnFlags flags,float init_width_or_weight,ImU32 user_id) { nullptr };
    void (*TableSetupDrawChannels)(ImGuiTable* table) { nullptr };
    void (*TableSetupScrollFreeze)(int cols,int rows) { nullptr };
    void (*TableSortSpecsBuild)(ImGuiTable* table) { nullptr };
    void (*TableSortSpecsSanitize)(ImGuiTable* table) { nullptr };
    void (*TableUpdateBorders)(ImGuiTable* table) { nullptr };
    void (*TableUpdateColumnsWeightFromWidth)(ImGuiTable* table) { nullptr };
    void (*TableUpdateLayout)(ImGuiTable* table) { nullptr };
    bool (*TempInputIsActive)(ImGuiID id) { nullptr };
    bool (*TempInputScalar)(const ImRect bb,ImGuiID id,const char* label,ImGuiDataType data_type,void* p_data,const char* format,const void* p_clamp_min,const void* p_clamp_max) { nullptr };
    bool (*TempInputText)(const ImRect bb,ImGuiID id,const char* label,char* buf,int buf_size,ImGuiInputTextFlags flags) { nullptr };
    void (*Text)(const char* fmt,...) { nullptr };
    void (*TextColored)(const ImVec4 col,const char* fmt,...) { nullptr };
    void (*TextColoredV)(const ImVec4 col,const char* fmt,va_list args) { nullptr };
    void (*TextDisabled)(const char* fmt,...) { nullptr };
    void (*TextDisabledV)(const char* fmt,va_list args) { nullptr };
    void (*TextEx)(const char* text,const char* text_end,ImGuiTextFlags flags) { nullptr };
    void (*TextUnformatted)(const char* text,const char* text_end) { nullptr };
    void (*TextV)(const char* fmt,va_list args) { nullptr };
    void (*TextWrapped)(const char* fmt,...) { nullptr };
    void (*TextWrappedV)(const char* fmt,va_list args) { nullptr };
    void (*TranslateWindowsInViewport)(ImGuiViewportP* viewport,const ImVec2 old_pos,const ImVec2 new_pos) { nullptr };
    bool (*TreeNodeBehavior)(ImGuiID id,ImGuiTreeNodeFlags flags,const char* label,const char* label_end) { nullptr };
    bool (*TreeNodeBehaviorIsOpen)(ImGuiID id,ImGuiTreeNodeFlags flags) { nullptr };
    bool (*TreeNodeExPtr)(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,...) { nullptr };
    bool (*TreeNodeExStr)(const char* label,ImGuiTreeNodeFlags flags) { nullptr };
    bool (*TreeNodeExStrStr)(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,...) { nullptr };
    bool (*TreeNodeExVPtr)(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args) { nullptr };
    bool (*TreeNodeExVStr)(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args) { nullptr };
    bool (*TreeNodePtr)(const void* ptr_id,const char* fmt,...) { nullptr };
    bool (*TreeNodeStr)(const char* label) { nullptr };
    bool (*TreeNodeStrStr)(const char* str_id,const char* fmt,...) { nullptr };
    bool (*TreeNodeVPtr)(const void* ptr_id,const char* fmt,va_list args) { nullptr };
    bool (*TreeNodeVStr)(const char* str_id,const char* fmt,va_list args) { nullptr };
    void (*TreePop)() { nullptr };
    void (*TreePushOverrideID)(ImGuiID id) { nullptr };
    void (*TreePushPtr)(const void* ptr_id) { nullptr };
    void (*TreePushStr)(const char* str_id) { nullptr };
    void (*Unindent)(float indent_w) { nullptr };
    void (*UpdateHoveredWindowAndCaptureFlags)() { nullptr };
    void (*UpdateMouseMovingWindowEndFrame)() { nullptr };
    void (*UpdateMouseMovingWindowNewFrame)() { nullptr };
    void (*UpdatePlatformWindows)() { nullptr };
    void (*UpdateWindowParentAndRootLinks)(ImGuiWindow* window,ImGuiWindowFlags flags,ImGuiWindow* parent_window) { nullptr };
    bool (*VSliderFloat)(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*VSliderInt)(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    bool (*VSliderScalar)(const char* label,const ImVec2 size,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags) { nullptr };
    void (*ValueBool)(const char* prefix,bool b) { nullptr };
    void (*ValueFloat)(const char* prefix,float v,const char* float_format) { nullptr };
    void (*ValueInt)(const char* prefix,int v) { nullptr };
    void (*ValueUint)(const char* prefix,unsigned int v) { nullptr };
}; // struct ImGuiModule


} // namespace bee

#ifdef BEE_IMGUI_GENERATOR_IMPLEMENTATION
void bee_load_imgui_api(bee::ImGuiModule* api)
{
    api->ImBitVector_Clear = ImBitVector_Clear;
    api->ImBitVector_ClearBit = ImBitVector_ClearBit;
    api->ImBitVector_Create = ImBitVector_Create;
    api->ImBitVector_SetBit = ImBitVector_SetBit;
    api->ImBitVector_TestBit = ImBitVector_TestBit;
    api->ImColor_HSV = ImColor_HSV;
    api->ImColor_ImColorFloat = ImColor_ImColorFloat;
    api->ImColor_ImColorInt = ImColor_ImColorInt;
    api->ImColor_ImColorNil = ImColor_ImColorNil;
    api->ImColor_ImColorU32 = ImColor_ImColorU32;
    api->ImColor_ImColorVec4 = ImColor_ImColorVec4;
    api->ImColor_SetHSV = ImColor_SetHSV;
    api->ImColor_destroy = ImColor_destroy;
    api->ImDrawCmd_ImDrawCmd = ImDrawCmd_ImDrawCmd;
    api->ImDrawCmd_destroy = ImDrawCmd_destroy;
    api->ImDrawDataBuilder_Clear = ImDrawDataBuilder_Clear;
    api->ImDrawDataBuilder_ClearFreeMemory = ImDrawDataBuilder_ClearFreeMemory;
    api->ImDrawDataBuilder_FlattenIntoSingleLayer = ImDrawDataBuilder_FlattenIntoSingleLayer;
    api->ImDrawData_Clear = ImDrawData_Clear;
    api->ImDrawData_DeIndexAllBuffers = ImDrawData_DeIndexAllBuffers;
    api->ImDrawData_ImDrawData = ImDrawData_ImDrawData;
    api->ImDrawData_ScaleClipRects = ImDrawData_ScaleClipRects;
    api->ImDrawData_destroy = ImDrawData_destroy;
    api->ImDrawListSharedData_ImDrawListSharedData = ImDrawListSharedData_ImDrawListSharedData;
    api->ImDrawListSharedData_SetCircleSegmentMaxError = ImDrawListSharedData_SetCircleSegmentMaxError;
    api->ImDrawListSharedData_destroy = ImDrawListSharedData_destroy;
    api->ImDrawListSplitter_Clear = ImDrawListSplitter_Clear;
    api->ImDrawListSplitter_ClearFreeMemory = ImDrawListSplitter_ClearFreeMemory;
    api->ImDrawListSplitter_ImDrawListSplitter = ImDrawListSplitter_ImDrawListSplitter;
    api->ImDrawListSplitter_Merge = ImDrawListSplitter_Merge;
    api->ImDrawListSplitter_SetCurrentChannel = ImDrawListSplitter_SetCurrentChannel;
    api->ImDrawListSplitter_Split = ImDrawListSplitter_Split;
    api->ImDrawListSplitter_destroy = ImDrawListSplitter_destroy;
    api->ImDrawList_AddBezierCubic = ImDrawList_AddBezierCubic;
    api->ImDrawList_AddBezierQuadratic = ImDrawList_AddBezierQuadratic;
    api->ImDrawList_AddCallback = ImDrawList_AddCallback;
    api->ImDrawList_AddCircle = ImDrawList_AddCircle;
    api->ImDrawList_AddCircleFilled = ImDrawList_AddCircleFilled;
    api->ImDrawList_AddConvexPolyFilled = ImDrawList_AddConvexPolyFilled;
    api->ImDrawList_AddDrawCmd = ImDrawList_AddDrawCmd;
    api->ImDrawList_AddImage = ImDrawList_AddImage;
    api->ImDrawList_AddImageQuad = ImDrawList_AddImageQuad;
    api->ImDrawList_AddImageRounded = ImDrawList_AddImageRounded;
    api->ImDrawList_AddLine = ImDrawList_AddLine;
    api->ImDrawList_AddNgon = ImDrawList_AddNgon;
    api->ImDrawList_AddNgonFilled = ImDrawList_AddNgonFilled;
    api->ImDrawList_AddPolyline = ImDrawList_AddPolyline;
    api->ImDrawList_AddQuad = ImDrawList_AddQuad;
    api->ImDrawList_AddQuadFilled = ImDrawList_AddQuadFilled;
    api->ImDrawList_AddRect = ImDrawList_AddRect;
    api->ImDrawList_AddRectFilled = ImDrawList_AddRectFilled;
    api->ImDrawList_AddRectFilledMultiColor = ImDrawList_AddRectFilledMultiColor;
    api->ImDrawList_AddTextFontPtr = ImDrawList_AddTextFontPtr;
    api->ImDrawList_AddTextVec2 = ImDrawList_AddTextVec2;
    api->ImDrawList_AddTriangle = ImDrawList_AddTriangle;
    api->ImDrawList_AddTriangleFilled = ImDrawList_AddTriangleFilled;
    api->ImDrawList_ChannelsMerge = ImDrawList_ChannelsMerge;
    api->ImDrawList_ChannelsSetCurrent = ImDrawList_ChannelsSetCurrent;
    api->ImDrawList_ChannelsSplit = ImDrawList_ChannelsSplit;
    api->ImDrawList_CloneOutput = ImDrawList_CloneOutput;
    api->ImDrawList_GetClipRectMax = ImDrawList_GetClipRectMax;
    api->ImDrawList_GetClipRectMin = ImDrawList_GetClipRectMin;
    api->ImDrawList_ImDrawList = ImDrawList_ImDrawList;
    api->ImDrawList_PathArcTo = ImDrawList_PathArcTo;
    api->ImDrawList_PathArcToFast = ImDrawList_PathArcToFast;
    api->ImDrawList_PathBezierCubicCurveTo = ImDrawList_PathBezierCubicCurveTo;
    api->ImDrawList_PathBezierQuadraticCurveTo = ImDrawList_PathBezierQuadraticCurveTo;
    api->ImDrawList_PathClear = ImDrawList_PathClear;
    api->ImDrawList_PathFillConvex = ImDrawList_PathFillConvex;
    api->ImDrawList_PathLineTo = ImDrawList_PathLineTo;
    api->ImDrawList_PathLineToMergeDuplicate = ImDrawList_PathLineToMergeDuplicate;
    api->ImDrawList_PathRect = ImDrawList_PathRect;
    api->ImDrawList_PathStroke = ImDrawList_PathStroke;
    api->ImDrawList_PopClipRect = ImDrawList_PopClipRect;
    api->ImDrawList_PopTextureID = ImDrawList_PopTextureID;
    api->ImDrawList_PrimQuadUV = ImDrawList_PrimQuadUV;
    api->ImDrawList_PrimRect = ImDrawList_PrimRect;
    api->ImDrawList_PrimRectUV = ImDrawList_PrimRectUV;
    api->ImDrawList_PrimReserve = ImDrawList_PrimReserve;
    api->ImDrawList_PrimUnreserve = ImDrawList_PrimUnreserve;
    api->ImDrawList_PrimVtx = ImDrawList_PrimVtx;
    api->ImDrawList_PrimWriteIdx = ImDrawList_PrimWriteIdx;
    api->ImDrawList_PrimWriteVtx = ImDrawList_PrimWriteVtx;
    api->ImDrawList_PushClipRect = ImDrawList_PushClipRect;
    api->ImDrawList_PushClipRectFullScreen = ImDrawList_PushClipRectFullScreen;
    api->ImDrawList_PushTextureID = ImDrawList_PushTextureID;
    api->ImDrawList__ClearFreeMemory = ImDrawList__ClearFreeMemory;
    api->ImDrawList__OnChangedClipRect = ImDrawList__OnChangedClipRect;
    api->ImDrawList__OnChangedTextureID = ImDrawList__OnChangedTextureID;
    api->ImDrawList__OnChangedVtxOffset = ImDrawList__OnChangedVtxOffset;
    api->ImDrawList__PopUnusedDrawCmd = ImDrawList__PopUnusedDrawCmd;
    api->ImDrawList__ResetForNewFrame = ImDrawList__ResetForNewFrame;
    api->ImDrawList_destroy = ImDrawList_destroy;
    api->ImFontAtlasCustomRect_ImFontAtlasCustomRect = ImFontAtlasCustomRect_ImFontAtlasCustomRect;
    api->ImFontAtlasCustomRect_IsPacked = ImFontAtlasCustomRect_IsPacked;
    api->ImFontAtlasCustomRect_destroy = ImFontAtlasCustomRect_destroy;
    api->ImFontAtlas_AddCustomRectFontGlyph = ImFontAtlas_AddCustomRectFontGlyph;
    api->ImFontAtlas_AddCustomRectRegular = ImFontAtlas_AddCustomRectRegular;
    api->ImFontAtlas_AddFont = ImFontAtlas_AddFont;
    api->ImFontAtlas_AddFontDefault = ImFontAtlas_AddFontDefault;
    api->ImFontAtlas_AddFontFromFileTTF = ImFontAtlas_AddFontFromFileTTF;
    api->ImFontAtlas_AddFontFromMemoryCompressedBase85TTF = ImFontAtlas_AddFontFromMemoryCompressedBase85TTF;
    api->ImFontAtlas_AddFontFromMemoryCompressedTTF = ImFontAtlas_AddFontFromMemoryCompressedTTF;
    api->ImFontAtlas_AddFontFromMemoryTTF = ImFontAtlas_AddFontFromMemoryTTF;
    api->ImFontAtlas_Build = ImFontAtlas_Build;
    api->ImFontAtlas_CalcCustomRectUV = ImFontAtlas_CalcCustomRectUV;
    api->ImFontAtlas_Clear = ImFontAtlas_Clear;
    api->ImFontAtlas_ClearFonts = ImFontAtlas_ClearFonts;
    api->ImFontAtlas_ClearInputData = ImFontAtlas_ClearInputData;
    api->ImFontAtlas_ClearTexData = ImFontAtlas_ClearTexData;
    api->ImFontAtlas_GetCustomRectByIndex = ImFontAtlas_GetCustomRectByIndex;
    api->ImFontAtlas_GetGlyphRangesChineseFull = ImFontAtlas_GetGlyphRangesChineseFull;
    api->ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon = ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon;
    api->ImFontAtlas_GetGlyphRangesCyrillic = ImFontAtlas_GetGlyphRangesCyrillic;
    api->ImFontAtlas_GetGlyphRangesDefault = ImFontAtlas_GetGlyphRangesDefault;
    api->ImFontAtlas_GetGlyphRangesJapanese = ImFontAtlas_GetGlyphRangesJapanese;
    api->ImFontAtlas_GetGlyphRangesKorean = ImFontAtlas_GetGlyphRangesKorean;
    api->ImFontAtlas_GetGlyphRangesThai = ImFontAtlas_GetGlyphRangesThai;
    api->ImFontAtlas_GetGlyphRangesVietnamese = ImFontAtlas_GetGlyphRangesVietnamese;
    api->ImFontAtlas_GetMouseCursorTexData = ImFontAtlas_GetMouseCursorTexData;
    api->ImFontAtlas_GetTexDataAsAlpha8 = ImFontAtlas_GetTexDataAsAlpha8;
    api->ImFontAtlas_GetTexDataAsRGBA32 = ImFontAtlas_GetTexDataAsRGBA32;
    api->ImFontAtlas_ImFontAtlas = ImFontAtlas_ImFontAtlas;
    api->ImFontAtlas_IsBuilt = ImFontAtlas_IsBuilt;
    api->ImFontAtlas_SetTexID = ImFontAtlas_SetTexID;
    api->ImFontAtlas_destroy = ImFontAtlas_destroy;
    api->ImFontConfig_ImFontConfig = ImFontConfig_ImFontConfig;
    api->ImFontConfig_destroy = ImFontConfig_destroy;
    api->ImFontGlyphRangesBuilder_AddChar = ImFontGlyphRangesBuilder_AddChar;
    api->ImFontGlyphRangesBuilder_AddRanges = ImFontGlyphRangesBuilder_AddRanges;
    api->ImFontGlyphRangesBuilder_AddText = ImFontGlyphRangesBuilder_AddText;
    api->ImFontGlyphRangesBuilder_BuildRanges = ImFontGlyphRangesBuilder_BuildRanges;
    api->ImFontGlyphRangesBuilder_Clear = ImFontGlyphRangesBuilder_Clear;
    api->ImFontGlyphRangesBuilder_GetBit = ImFontGlyphRangesBuilder_GetBit;
    api->ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder = ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder;
    api->ImFontGlyphRangesBuilder_SetBit = ImFontGlyphRangesBuilder_SetBit;
    api->ImFontGlyphRangesBuilder_destroy = ImFontGlyphRangesBuilder_destroy;
    api->ImFont_AddGlyph = ImFont_AddGlyph;
    api->ImFont_AddRemapChar = ImFont_AddRemapChar;
    api->ImFont_BuildLookupTable = ImFont_BuildLookupTable;
    api->ImFont_CalcTextSizeA = ImFont_CalcTextSizeA;
    api->ImFont_CalcWordWrapPositionA = ImFont_CalcWordWrapPositionA;
    api->ImFont_ClearOutputData = ImFont_ClearOutputData;
    api->ImFont_FindGlyph = ImFont_FindGlyph;
    api->ImFont_FindGlyphNoFallback = ImFont_FindGlyphNoFallback;
    api->ImFont_GetCharAdvance = ImFont_GetCharAdvance;
    api->ImFont_GetDebugName = ImFont_GetDebugName;
    api->ImFont_GrowIndex = ImFont_GrowIndex;
    api->ImFont_ImFont = ImFont_ImFont;
    api->ImFont_IsGlyphRangeUnused = ImFont_IsGlyphRangeUnused;
    api->ImFont_IsLoaded = ImFont_IsLoaded;
    api->ImFont_RenderChar = ImFont_RenderChar;
    api->ImFont_RenderText = ImFont_RenderText;
    api->ImFont_SetFallbackChar = ImFont_SetFallbackChar;
    api->ImFont_SetGlyphVisible = ImFont_SetGlyphVisible;
    api->ImFont_destroy = ImFont_destroy;
    api->ImGuiContextHook_ImGuiContextHook = ImGuiContextHook_ImGuiContextHook;
    api->ImGuiContextHook_destroy = ImGuiContextHook_destroy;
    api->ImGuiContext_ImGuiContext = ImGuiContext_ImGuiContext;
    api->ImGuiContext_destroy = ImGuiContext_destroy;
    api->ImGuiDockContext_ImGuiDockContext = ImGuiDockContext_ImGuiDockContext;
    api->ImGuiDockContext_destroy = ImGuiDockContext_destroy;
    api->ImGuiDockNode_GetMergedFlags = ImGuiDockNode_GetMergedFlags;
    api->ImGuiDockNode_ImGuiDockNode = ImGuiDockNode_ImGuiDockNode;
    api->ImGuiDockNode_IsCentralNode = ImGuiDockNode_IsCentralNode;
    api->ImGuiDockNode_IsDockSpace = ImGuiDockNode_IsDockSpace;
    api->ImGuiDockNode_IsEmpty = ImGuiDockNode_IsEmpty;
    api->ImGuiDockNode_IsFloatingNode = ImGuiDockNode_IsFloatingNode;
    api->ImGuiDockNode_IsHiddenTabBar = ImGuiDockNode_IsHiddenTabBar;
    api->ImGuiDockNode_IsLeafNode = ImGuiDockNode_IsLeafNode;
    api->ImGuiDockNode_IsNoTabBar = ImGuiDockNode_IsNoTabBar;
    api->ImGuiDockNode_IsRootNode = ImGuiDockNode_IsRootNode;
    api->ImGuiDockNode_IsSplitNode = ImGuiDockNode_IsSplitNode;
    api->ImGuiDockNode_Rect = ImGuiDockNode_Rect;
    api->ImGuiDockNode_destroy = ImGuiDockNode_destroy;
    api->ImGuiIO_AddInputCharacter = ImGuiIO_AddInputCharacter;
    api->ImGuiIO_AddInputCharacterUTF16 = ImGuiIO_AddInputCharacterUTF16;
    api->ImGuiIO_AddInputCharactersUTF8 = ImGuiIO_AddInputCharactersUTF8;
    api->ImGuiIO_ClearInputCharacters = ImGuiIO_ClearInputCharacters;
    api->ImGuiIO_ImGuiIO = ImGuiIO_ImGuiIO;
    api->ImGuiIO_destroy = ImGuiIO_destroy;
    api->ImGuiInputTextCallbackData_ClearSelection = ImGuiInputTextCallbackData_ClearSelection;
    api->ImGuiInputTextCallbackData_DeleteChars = ImGuiInputTextCallbackData_DeleteChars;
    api->ImGuiInputTextCallbackData_HasSelection = ImGuiInputTextCallbackData_HasSelection;
    api->ImGuiInputTextCallbackData_ImGuiInputTextCallbackData = ImGuiInputTextCallbackData_ImGuiInputTextCallbackData;
    api->ImGuiInputTextCallbackData_InsertChars = ImGuiInputTextCallbackData_InsertChars;
    api->ImGuiInputTextCallbackData_SelectAll = ImGuiInputTextCallbackData_SelectAll;
    api->ImGuiInputTextCallbackData_destroy = ImGuiInputTextCallbackData_destroy;
    api->ImGuiInputTextState_ClearFreeMemory = ImGuiInputTextState_ClearFreeMemory;
    api->ImGuiInputTextState_ClearSelection = ImGuiInputTextState_ClearSelection;
    api->ImGuiInputTextState_ClearText = ImGuiInputTextState_ClearText;
    api->ImGuiInputTextState_CursorAnimReset = ImGuiInputTextState_CursorAnimReset;
    api->ImGuiInputTextState_CursorClamp = ImGuiInputTextState_CursorClamp;
    api->ImGuiInputTextState_GetRedoAvailCount = ImGuiInputTextState_GetRedoAvailCount;
    api->ImGuiInputTextState_GetUndoAvailCount = ImGuiInputTextState_GetUndoAvailCount;
    api->ImGuiInputTextState_HasSelection = ImGuiInputTextState_HasSelection;
    api->ImGuiInputTextState_ImGuiInputTextState = ImGuiInputTextState_ImGuiInputTextState;
    api->ImGuiInputTextState_OnKeyPressed = ImGuiInputTextState_OnKeyPressed;
    api->ImGuiInputTextState_SelectAll = ImGuiInputTextState_SelectAll;
    api->ImGuiInputTextState_destroy = ImGuiInputTextState_destroy;
    api->ImGuiLastItemDataBackup_Backup = ImGuiLastItemDataBackup_Backup;
    api->ImGuiLastItemDataBackup_ImGuiLastItemDataBackup = ImGuiLastItemDataBackup_ImGuiLastItemDataBackup;
    api->ImGuiLastItemDataBackup_Restore = ImGuiLastItemDataBackup_Restore;
    api->ImGuiLastItemDataBackup_destroy = ImGuiLastItemDataBackup_destroy;
    api->ImGuiListClipper_Begin = ImGuiListClipper_Begin;
    api->ImGuiListClipper_End = ImGuiListClipper_End;
    api->ImGuiListClipper_ImGuiListClipper = ImGuiListClipper_ImGuiListClipper;
    api->ImGuiListClipper_Step = ImGuiListClipper_Step;
    api->ImGuiListClipper_destroy = ImGuiListClipper_destroy;
    api->ImGuiMenuColumns_CalcExtraSpace = ImGuiMenuColumns_CalcExtraSpace;
    api->ImGuiMenuColumns_DeclColumns = ImGuiMenuColumns_DeclColumns;
    api->ImGuiMenuColumns_ImGuiMenuColumns = ImGuiMenuColumns_ImGuiMenuColumns;
    api->ImGuiMenuColumns_Update = ImGuiMenuColumns_Update;
    api->ImGuiMenuColumns_destroy = ImGuiMenuColumns_destroy;
    api->ImGuiMetricsConfig_ImGuiMetricsConfig = ImGuiMetricsConfig_ImGuiMetricsConfig;
    api->ImGuiMetricsConfig_destroy = ImGuiMetricsConfig_destroy;
    api->ImGuiNavMoveResult_Clear = ImGuiNavMoveResult_Clear;
    api->ImGuiNavMoveResult_ImGuiNavMoveResult = ImGuiNavMoveResult_ImGuiNavMoveResult;
    api->ImGuiNavMoveResult_destroy = ImGuiNavMoveResult_destroy;
    api->ImGuiNextItemData_ClearFlags = ImGuiNextItemData_ClearFlags;
    api->ImGuiNextItemData_ImGuiNextItemData = ImGuiNextItemData_ImGuiNextItemData;
    api->ImGuiNextItemData_destroy = ImGuiNextItemData_destroy;
    api->ImGuiNextWindowData_ClearFlags = ImGuiNextWindowData_ClearFlags;
    api->ImGuiNextWindowData_ImGuiNextWindowData = ImGuiNextWindowData_ImGuiNextWindowData;
    api->ImGuiNextWindowData_destroy = ImGuiNextWindowData_destroy;
    api->ImGuiOldColumnData_ImGuiOldColumnData = ImGuiOldColumnData_ImGuiOldColumnData;
    api->ImGuiOldColumnData_destroy = ImGuiOldColumnData_destroy;
    api->ImGuiOldColumns_ImGuiOldColumns = ImGuiOldColumns_ImGuiOldColumns;
    api->ImGuiOldColumns_destroy = ImGuiOldColumns_destroy;
    api->ImGuiOnceUponAFrame_ImGuiOnceUponAFrame = ImGuiOnceUponAFrame_ImGuiOnceUponAFrame;
    api->ImGuiOnceUponAFrame_destroy = ImGuiOnceUponAFrame_destroy;
    api->ImGuiPayload_Clear = ImGuiPayload_Clear;
    api->ImGuiPayload_ImGuiPayload = ImGuiPayload_ImGuiPayload;
    api->ImGuiPayload_IsDataType = ImGuiPayload_IsDataType;
    api->ImGuiPayload_IsDelivery = ImGuiPayload_IsDelivery;
    api->ImGuiPayload_IsPreview = ImGuiPayload_IsPreview;
    api->ImGuiPayload_destroy = ImGuiPayload_destroy;
    api->ImGuiPlatformIO_ImGuiPlatformIO = ImGuiPlatformIO_ImGuiPlatformIO;
    api->ImGuiPlatformIO_destroy = ImGuiPlatformIO_destroy;
    api->ImGuiPlatformMonitor_ImGuiPlatformMonitor = ImGuiPlatformMonitor_ImGuiPlatformMonitor;
    api->ImGuiPlatformMonitor_destroy = ImGuiPlatformMonitor_destroy;
    api->ImGuiPopupData_ImGuiPopupData = ImGuiPopupData_ImGuiPopupData;
    api->ImGuiPopupData_destroy = ImGuiPopupData_destroy;
    api->ImGuiPtrOrIndex_ImGuiPtrOrIndexInt = ImGuiPtrOrIndex_ImGuiPtrOrIndexInt;
    api->ImGuiPtrOrIndex_ImGuiPtrOrIndexPtr = ImGuiPtrOrIndex_ImGuiPtrOrIndexPtr;
    api->ImGuiPtrOrIndex_destroy = ImGuiPtrOrIndex_destroy;
    api->ImGuiSettingsHandler_ImGuiSettingsHandler = ImGuiSettingsHandler_ImGuiSettingsHandler;
    api->ImGuiSettingsHandler_destroy = ImGuiSettingsHandler_destroy;
    api->ImGuiStackSizes_CompareWithCurrentState = ImGuiStackSizes_CompareWithCurrentState;
    api->ImGuiStackSizes_ImGuiStackSizes = ImGuiStackSizes_ImGuiStackSizes;
    api->ImGuiStackSizes_SetToCurrentState = ImGuiStackSizes_SetToCurrentState;
    api->ImGuiStackSizes_destroy = ImGuiStackSizes_destroy;
    api->ImGuiStoragePair_ImGuiStoragePairFloat = ImGuiStoragePair_ImGuiStoragePairFloat;
    api->ImGuiStoragePair_ImGuiStoragePairInt = ImGuiStoragePair_ImGuiStoragePairInt;
    api->ImGuiStoragePair_ImGuiStoragePairPtr = ImGuiStoragePair_ImGuiStoragePairPtr;
    api->ImGuiStoragePair_destroy = ImGuiStoragePair_destroy;
    api->ImGuiStorage_BuildSortByKey = ImGuiStorage_BuildSortByKey;
    api->ImGuiStorage_Clear = ImGuiStorage_Clear;
    api->ImGuiStorage_GetBool = ImGuiStorage_GetBool;
    api->ImGuiStorage_GetBoolRef = ImGuiStorage_GetBoolRef;
    api->ImGuiStorage_GetFloat = ImGuiStorage_GetFloat;
    api->ImGuiStorage_GetFloatRef = ImGuiStorage_GetFloatRef;
    api->ImGuiStorage_GetInt = ImGuiStorage_GetInt;
    api->ImGuiStorage_GetIntRef = ImGuiStorage_GetIntRef;
    api->ImGuiStorage_GetVoidPtr = ImGuiStorage_GetVoidPtr;
    api->ImGuiStorage_GetVoidPtrRef = ImGuiStorage_GetVoidPtrRef;
    api->ImGuiStorage_SetAllInt = ImGuiStorage_SetAllInt;
    api->ImGuiStorage_SetBool = ImGuiStorage_SetBool;
    api->ImGuiStorage_SetFloat = ImGuiStorage_SetFloat;
    api->ImGuiStorage_SetInt = ImGuiStorage_SetInt;
    api->ImGuiStorage_SetVoidPtr = ImGuiStorage_SetVoidPtr;
    api->ImGuiStyleMod_ImGuiStyleModFloat = ImGuiStyleMod_ImGuiStyleModFloat;
    api->ImGuiStyleMod_ImGuiStyleModInt = ImGuiStyleMod_ImGuiStyleModInt;
    api->ImGuiStyleMod_ImGuiStyleModVec2 = ImGuiStyleMod_ImGuiStyleModVec2;
    api->ImGuiStyleMod_destroy = ImGuiStyleMod_destroy;
    api->ImGuiStyle_ImGuiStyle = ImGuiStyle_ImGuiStyle;
    api->ImGuiStyle_ScaleAllSizes = ImGuiStyle_ScaleAllSizes;
    api->ImGuiStyle_destroy = ImGuiStyle_destroy;
    api->ImGuiTabBar_GetTabName = ImGuiTabBar_GetTabName;
    api->ImGuiTabBar_GetTabOrder = ImGuiTabBar_GetTabOrder;
    api->ImGuiTabBar_ImGuiTabBar = ImGuiTabBar_ImGuiTabBar;
    api->ImGuiTabBar_destroy = ImGuiTabBar_destroy;
    api->ImGuiTabItem_ImGuiTabItem = ImGuiTabItem_ImGuiTabItem;
    api->ImGuiTabItem_destroy = ImGuiTabItem_destroy;
    api->ImGuiTableColumnSettings_ImGuiTableColumnSettings = ImGuiTableColumnSettings_ImGuiTableColumnSettings;
    api->ImGuiTableColumnSettings_destroy = ImGuiTableColumnSettings_destroy;
    api->ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs = ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs;
    api->ImGuiTableColumnSortSpecs_destroy = ImGuiTableColumnSortSpecs_destroy;
    api->ImGuiTableColumn_ImGuiTableColumn = ImGuiTableColumn_ImGuiTableColumn;
    api->ImGuiTableColumn_destroy = ImGuiTableColumn_destroy;
    api->ImGuiTableSettings_GetColumnSettings = ImGuiTableSettings_GetColumnSettings;
    api->ImGuiTableSettings_ImGuiTableSettings = ImGuiTableSettings_ImGuiTableSettings;
    api->ImGuiTableSettings_destroy = ImGuiTableSettings_destroy;
    api->ImGuiTableSortSpecs_ImGuiTableSortSpecs = ImGuiTableSortSpecs_ImGuiTableSortSpecs;
    api->ImGuiTableSortSpecs_destroy = ImGuiTableSortSpecs_destroy;
    api->ImGuiTable_ImGuiTable = ImGuiTable_ImGuiTable;
    api->ImGuiTable_destroy = ImGuiTable_destroy;
    api->ImGuiTextBuffer_ImGuiTextBuffer = ImGuiTextBuffer_ImGuiTextBuffer;
    api->ImGuiTextBuffer_append = ImGuiTextBuffer_append;
    api->ImGuiTextBuffer_appendf = ImGuiTextBuffer_appendf;
    api->ImGuiTextBuffer_appendfv = ImGuiTextBuffer_appendfv;
    api->ImGuiTextBuffer_begin = ImGuiTextBuffer_begin;
    api->ImGuiTextBuffer_c_str = ImGuiTextBuffer_c_str;
    api->ImGuiTextBuffer_clear = ImGuiTextBuffer_clear;
    api->ImGuiTextBuffer_destroy = ImGuiTextBuffer_destroy;
    api->ImGuiTextBuffer_empty = ImGuiTextBuffer_empty;
    api->ImGuiTextBuffer_end = ImGuiTextBuffer_end;
    api->ImGuiTextBuffer_reserve = ImGuiTextBuffer_reserve;
    api->ImGuiTextBuffer_size = ImGuiTextBuffer_size;
    api->ImGuiTextFilter_Build = ImGuiTextFilter_Build;
    api->ImGuiTextFilter_Clear = ImGuiTextFilter_Clear;
    api->ImGuiTextFilter_Draw = ImGuiTextFilter_Draw;
    api->ImGuiTextFilter_ImGuiTextFilter = ImGuiTextFilter_ImGuiTextFilter;
    api->ImGuiTextFilter_IsActive = ImGuiTextFilter_IsActive;
    api->ImGuiTextFilter_PassFilter = ImGuiTextFilter_PassFilter;
    api->ImGuiTextFilter_destroy = ImGuiTextFilter_destroy;
    api->ImGuiTextRange_ImGuiTextRangeNil = ImGuiTextRange_ImGuiTextRangeNil;
    api->ImGuiTextRange_ImGuiTextRangeStr = ImGuiTextRange_ImGuiTextRangeStr;
    api->ImGuiTextRange_destroy = ImGuiTextRange_destroy;
    api->ImGuiTextRange_empty = ImGuiTextRange_empty;
    api->ImGuiTextRange_split = ImGuiTextRange_split;
    api->ImGuiViewportP_ClearRequestFlags = ImGuiViewportP_ClearRequestFlags;
    api->ImGuiViewportP_GetMainRect = ImGuiViewportP_GetMainRect;
    api->ImGuiViewportP_GetWorkRect = ImGuiViewportP_GetWorkRect;
    api->ImGuiViewportP_ImGuiViewportP = ImGuiViewportP_ImGuiViewportP;
    api->ImGuiViewportP_destroy = ImGuiViewportP_destroy;
    api->ImGuiViewport_GetCenter = ImGuiViewport_GetCenter;
    api->ImGuiViewport_GetWorkPos = ImGuiViewport_GetWorkPos;
    api->ImGuiViewport_GetWorkSize = ImGuiViewport_GetWorkSize;
    api->ImGuiViewport_ImGuiViewport = ImGuiViewport_ImGuiViewport;
    api->ImGuiViewport_destroy = ImGuiViewport_destroy;
    api->ImGuiWindowClass_ImGuiWindowClass = ImGuiWindowClass_ImGuiWindowClass;
    api->ImGuiWindowClass_destroy = ImGuiWindowClass_destroy;
    api->ImGuiWindowSettings_GetName = ImGuiWindowSettings_GetName;
    api->ImGuiWindowSettings_ImGuiWindowSettings = ImGuiWindowSettings_ImGuiWindowSettings;
    api->ImGuiWindowSettings_destroy = ImGuiWindowSettings_destroy;
    api->ImGuiWindow_CalcFontSize = ImGuiWindow_CalcFontSize;
    api->ImGuiWindow_GetIDFromRectangle = ImGuiWindow_GetIDFromRectangle;
    api->ImGuiWindow_GetIDInt = ImGuiWindow_GetIDInt;
    api->ImGuiWindow_GetIDNoKeepAliveInt = ImGuiWindow_GetIDNoKeepAliveInt;
    api->ImGuiWindow_GetIDNoKeepAlivePtr = ImGuiWindow_GetIDNoKeepAlivePtr;
    api->ImGuiWindow_GetIDNoKeepAliveStr = ImGuiWindow_GetIDNoKeepAliveStr;
    api->ImGuiWindow_GetIDPtr = ImGuiWindow_GetIDPtr;
    api->ImGuiWindow_GetIDStr = ImGuiWindow_GetIDStr;
    api->ImGuiWindow_ImGuiWindow = ImGuiWindow_ImGuiWindow;
    api->ImGuiWindow_MenuBarHeight = ImGuiWindow_MenuBarHeight;
    api->ImGuiWindow_MenuBarRect = ImGuiWindow_MenuBarRect;
    api->ImGuiWindow_Rect = ImGuiWindow_Rect;
    api->ImGuiWindow_TitleBarHeight = ImGuiWindow_TitleBarHeight;
    api->ImGuiWindow_TitleBarRect = ImGuiWindow_TitleBarRect;
    api->ImGuiWindow_destroy = ImGuiWindow_destroy;
    api->ImRect_AddRect = ImRect_AddRect;
    api->ImRect_AddVec2 = ImRect_AddVec2;
    api->ImRect_ClipWith = ImRect_ClipWith;
    api->ImRect_ClipWithFull = ImRect_ClipWithFull;
    api->ImRect_ContainsRect = ImRect_ContainsRect;
    api->ImRect_ContainsVec2 = ImRect_ContainsVec2;
    api->ImRect_ExpandFloat = ImRect_ExpandFloat;
    api->ImRect_ExpandVec2 = ImRect_ExpandVec2;
    api->ImRect_Floor = ImRect_Floor;
    api->ImRect_GetBL = ImRect_GetBL;
    api->ImRect_GetBR = ImRect_GetBR;
    api->ImRect_GetCenter = ImRect_GetCenter;
    api->ImRect_GetHeight = ImRect_GetHeight;
    api->ImRect_GetSize = ImRect_GetSize;
    api->ImRect_GetTL = ImRect_GetTL;
    api->ImRect_GetTR = ImRect_GetTR;
    api->ImRect_GetWidth = ImRect_GetWidth;
    api->ImRect_ImRectFloat = ImRect_ImRectFloat;
    api->ImRect_ImRectNil = ImRect_ImRectNil;
    api->ImRect_ImRectVec2 = ImRect_ImRectVec2;
    api->ImRect_ImRectVec4 = ImRect_ImRectVec4;
    api->ImRect_IsInverted = ImRect_IsInverted;
    api->ImRect_Overlaps = ImRect_Overlaps;
    api->ImRect_ToVec4 = ImRect_ToVec4;
    api->ImRect_Translate = ImRect_Translate;
    api->ImRect_TranslateX = ImRect_TranslateX;
    api->ImRect_TranslateY = ImRect_TranslateY;
    api->ImRect_destroy = ImRect_destroy;
    api->ImVec1_ImVec1Float = ImVec1_ImVec1Float;
    api->ImVec1_ImVec1Nil = ImVec1_ImVec1Nil;
    api->ImVec1_destroy = ImVec1_destroy;
    api->ImVec2_ImVec2Float = ImVec2_ImVec2Float;
    api->ImVec2_ImVec2Nil = ImVec2_ImVec2Nil;
    api->ImVec2_destroy = ImVec2_destroy;
    api->ImVec2ih_ImVec2ihNil = ImVec2ih_ImVec2ihNil;
    api->ImVec2ih_ImVec2ihVec2 = ImVec2ih_ImVec2ihVec2;
    api->ImVec2ih_ImVec2ihshort = ImVec2ih_ImVec2ihshort;
    api->ImVec2ih_destroy = ImVec2ih_destroy;
    api->ImVec4_ImVec4Float = ImVec4_ImVec4Float;
    api->ImVec4_ImVec4Nil = ImVec4_ImVec4Nil;
    api->ImVec4_destroy = ImVec4_destroy;
    api->AcceptDragDropPayload = igAcceptDragDropPayload;
    api->ActivateItem = igActivateItem;
    api->AddContextHook = igAddContextHook;
    api->AlignTextToFramePadding = igAlignTextToFramePadding;
    api->ArrowButton = igArrowButton;
    api->ArrowButtonEx = igArrowButtonEx;
    api->Begin = igBegin;
    api->BeginChildEx = igBeginChildEx;
    api->BeginChildFrame = igBeginChildFrame;
    api->BeginChildID = igBeginChildID;
    api->BeginChildStr = igBeginChildStr;
    api->BeginColumns = igBeginColumns;
    api->BeginCombo = igBeginCombo;
    api->BeginDockableDragDropSource = igBeginDockableDragDropSource;
    api->BeginDockableDragDropTarget = igBeginDockableDragDropTarget;
    api->BeginDocked = igBeginDocked;
    api->BeginDragDropSource = igBeginDragDropSource;
    api->BeginDragDropTarget = igBeginDragDropTarget;
    api->BeginDragDropTargetCustom = igBeginDragDropTargetCustom;
    api->BeginGroup = igBeginGroup;
    api->BeginMainMenuBar = igBeginMainMenuBar;
    api->BeginMenu = igBeginMenu;
    api->BeginMenuBar = igBeginMenuBar;
    api->BeginPopup = igBeginPopup;
    api->BeginPopupContextItem = igBeginPopupContextItem;
    api->BeginPopupContextVoid = igBeginPopupContextVoid;
    api->BeginPopupContextWindow = igBeginPopupContextWindow;
    api->BeginPopupEx = igBeginPopupEx;
    api->BeginPopupModal = igBeginPopupModal;
    api->BeginTabBar = igBeginTabBar;
    api->BeginTabBarEx = igBeginTabBarEx;
    api->BeginTabItem = igBeginTabItem;
    api->BeginTable = igBeginTable;
    api->BeginTableEx = igBeginTableEx;
    api->BeginTooltip = igBeginTooltip;
    api->BeginTooltipEx = igBeginTooltipEx;
    api->BringWindowToDisplayBack = igBringWindowToDisplayBack;
    api->BringWindowToDisplayFront = igBringWindowToDisplayFront;
    api->BringWindowToFocusFront = igBringWindowToFocusFront;
    api->Bullet = igBullet;
    api->BulletText = igBulletText;
    api->BulletTextV = igBulletTextV;
    api->Button = igButton;
    api->ButtonBehavior = igButtonBehavior;
    api->ButtonEx = igButtonEx;
    api->CalcItemSize = igCalcItemSize;
    api->CalcItemWidth = igCalcItemWidth;
    api->CalcListClipping = igCalcListClipping;
    api->CalcTextSize = igCalcTextSize;
    api->CalcTypematicRepeatAmount = igCalcTypematicRepeatAmount;
    api->CalcWindowExpectedSize = igCalcWindowExpectedSize;
    api->CalcWrapWidthForPos = igCalcWrapWidthForPos;
    api->CallContextHooks = igCallContextHooks;
    api->CaptureKeyboardFromApp = igCaptureKeyboardFromApp;
    api->CaptureMouseFromApp = igCaptureMouseFromApp;
    api->Checkbox = igCheckbox;
    api->CheckboxFlagsIntPtr = igCheckboxFlagsIntPtr;
    api->CheckboxFlagsS64Ptr = igCheckboxFlagsS64Ptr;
    api->CheckboxFlagsU64Ptr = igCheckboxFlagsU64Ptr;
    api->CheckboxFlagsUintPtr = igCheckboxFlagsUintPtr;
    api->ClearActiveID = igClearActiveID;
    api->ClearDragDrop = igClearDragDrop;
    api->ClearIniSettings = igClearIniSettings;
    api->CloseButton = igCloseButton;
    api->CloseCurrentPopup = igCloseCurrentPopup;
    api->ClosePopupToLevel = igClosePopupToLevel;
    api->ClosePopupsOverWindow = igClosePopupsOverWindow;
    api->CollapseButton = igCollapseButton;
    api->CollapsingHeaderBoolPtr = igCollapsingHeaderBoolPtr;
    api->CollapsingHeaderTreeNodeFlags = igCollapsingHeaderTreeNodeFlags;
    api->ColorButton = igColorButton;
    api->ColorConvertFloat4ToU32 = igColorConvertFloat4ToU32;
    api->ColorConvertHSVtoRGB = igColorConvertHSVtoRGB;
    api->ColorConvertRGBtoHSV = igColorConvertRGBtoHSV;
    api->ColorConvertU32ToFloat4 = igColorConvertU32ToFloat4;
    api->ColorEdit3 = igColorEdit3;
    api->ColorEdit4 = igColorEdit4;
    api->ColorEditOptionsPopup = igColorEditOptionsPopup;
    api->ColorPicker3 = igColorPicker3;
    api->ColorPicker4 = igColorPicker4;
    api->ColorPickerOptionsPopup = igColorPickerOptionsPopup;
    api->ColorTooltip = igColorTooltip;
    api->Columns = igColumns;
    api->ComboFnBoolPtr = igComboFnBoolPtr;
    api->ComboStr = igComboStr;
    api->ComboStr_arr = igComboStr_arr;
    api->CreateContext = igCreateContext;
    api->CreateNewWindowSettings = igCreateNewWindowSettings;
    api->DataTypeApplyOp = igDataTypeApplyOp;
    api->DataTypeApplyOpFromText = igDataTypeApplyOpFromText;
    api->DataTypeClamp = igDataTypeClamp;
    api->DataTypeCompare = igDataTypeCompare;
    api->DataTypeFormatString = igDataTypeFormatString;
    api->DataTypeGetInfo = igDataTypeGetInfo;
    api->DebugCheckVersionAndDataLayout = igDebugCheckVersionAndDataLayout;
    api->DebugDrawItemRect = igDebugDrawItemRect;
    api->DebugNodeColumns = igDebugNodeColumns;
    api->DebugNodeDockNode = igDebugNodeDockNode;
    api->DebugNodeDrawCmdShowMeshAndBoundingBox = igDebugNodeDrawCmdShowMeshAndBoundingBox;
    api->DebugNodeDrawList = igDebugNodeDrawList;
    api->DebugNodeStorage = igDebugNodeStorage;
    api->DebugNodeTabBar = igDebugNodeTabBar;
    api->DebugNodeTable = igDebugNodeTable;
    api->DebugNodeTableSettings = igDebugNodeTableSettings;
    api->DebugNodeViewport = igDebugNodeViewport;
    api->DebugNodeWindow = igDebugNodeWindow;
    api->DebugNodeWindowSettings = igDebugNodeWindowSettings;
    api->DebugNodeWindowsList = igDebugNodeWindowsList;
    api->DebugStartItemPicker = igDebugStartItemPicker;
    api->DestroyContext = igDestroyContext;
    api->DestroyPlatformWindow = igDestroyPlatformWindow;
    api->DestroyPlatformWindows = igDestroyPlatformWindows;
    api->DockBuilderAddNode = igDockBuilderAddNode;
    api->DockBuilderCopyDockSpace = igDockBuilderCopyDockSpace;
    api->DockBuilderCopyNode = igDockBuilderCopyNode;
    api->DockBuilderCopyWindowSettings = igDockBuilderCopyWindowSettings;
    api->DockBuilderDockWindow = igDockBuilderDockWindow;
    api->DockBuilderFinish = igDockBuilderFinish;
    api->DockBuilderGetCentralNode = igDockBuilderGetCentralNode;
    api->DockBuilderGetNode = igDockBuilderGetNode;
    api->DockBuilderRemoveNode = igDockBuilderRemoveNode;
    api->DockBuilderRemoveNodeChildNodes = igDockBuilderRemoveNodeChildNodes;
    api->DockBuilderRemoveNodeDockedWindows = igDockBuilderRemoveNodeDockedWindows;
    api->DockBuilderSetNodePos = igDockBuilderSetNodePos;
    api->DockBuilderSetNodeSize = igDockBuilderSetNodeSize;
    api->DockBuilderSplitNode = igDockBuilderSplitNode;
    api->DockContextCalcDropPosForDocking = igDockContextCalcDropPosForDocking;
    api->DockContextClearNodes = igDockContextClearNodes;
    api->DockContextGenNodeID = igDockContextGenNodeID;
    api->DockContextInitialize = igDockContextInitialize;
    api->DockContextQueueDock = igDockContextQueueDock;
    api->DockContextQueueUndockNode = igDockContextQueueUndockNode;
    api->DockContextQueueUndockWindow = igDockContextQueueUndockWindow;
    api->DockContextRebuildNodes = igDockContextRebuildNodes;
    api->DockContextShutdown = igDockContextShutdown;
    api->DockContextUpdateDocking = igDockContextUpdateDocking;
    api->DockContextUpdateUndocking = igDockContextUpdateUndocking;
    api->DockNodeBeginAmendTabBar = igDockNodeBeginAmendTabBar;
    api->DockNodeEndAmendTabBar = igDockNodeEndAmendTabBar;
    api->DockNodeGetDepth = igDockNodeGetDepth;
    api->DockNodeGetRootNode = igDockNodeGetRootNode;
    api->DockSpace = igDockSpace;
    api->DockSpaceOverViewport = igDockSpaceOverViewport;
    api->DragBehavior = igDragBehavior;
    api->DragFloat = igDragFloat;
    api->DragFloat2 = igDragFloat2;
    api->DragFloat3 = igDragFloat3;
    api->DragFloat4 = igDragFloat4;
    api->DragFloatRange2 = igDragFloatRange2;
    api->DragInt = igDragInt;
    api->DragInt2 = igDragInt2;
    api->DragInt3 = igDragInt3;
    api->DragInt4 = igDragInt4;
    api->DragIntRange2 = igDragIntRange2;
    api->DragScalar = igDragScalar;
    api->DragScalarN = igDragScalarN;
    api->Dummy = igDummy;
    api->End = igEnd;
    api->EndChild = igEndChild;
    api->EndChildFrame = igEndChildFrame;
    api->EndColumns = igEndColumns;
    api->EndCombo = igEndCombo;
    api->EndDragDropSource = igEndDragDropSource;
    api->EndDragDropTarget = igEndDragDropTarget;
    api->EndFrame = igEndFrame;
    api->EndGroup = igEndGroup;
    api->EndMainMenuBar = igEndMainMenuBar;
    api->EndMenu = igEndMenu;
    api->EndMenuBar = igEndMenuBar;
    api->EndPopup = igEndPopup;
    api->EndTabBar = igEndTabBar;
    api->EndTabItem = igEndTabItem;
    api->EndTable = igEndTable;
    api->EndTooltip = igEndTooltip;
    api->ErrorCheckEndFrameRecover = igErrorCheckEndFrameRecover;
    api->FindBestWindowPosForPopup = igFindBestWindowPosForPopup;
    api->FindBestWindowPosForPopupEx = igFindBestWindowPosForPopupEx;
    api->FindOrCreateColumns = igFindOrCreateColumns;
    api->FindOrCreateWindowSettings = igFindOrCreateWindowSettings;
    api->FindRenderedTextEnd = igFindRenderedTextEnd;
    api->FindSettingsHandler = igFindSettingsHandler;
    api->FindViewportByID = igFindViewportByID;
    api->FindViewportByPlatformHandle = igFindViewportByPlatformHandle;
    api->FindWindowByID = igFindWindowByID;
    api->FindWindowByName = igFindWindowByName;
    api->FindWindowSettings = igFindWindowSettings;
    api->FocusTopMostWindowUnderOne = igFocusTopMostWindowUnderOne;
    api->FocusWindow = igFocusWindow;
    api->FocusableItemRegister = igFocusableItemRegister;
    api->FocusableItemUnregister = igFocusableItemUnregister;
    api->GcAwakeTransientWindowBuffers = igGcAwakeTransientWindowBuffers;
    api->GcCompactTransientMiscBuffers = igGcCompactTransientMiscBuffers;
    api->GcCompactTransientWindowBuffers = igGcCompactTransientWindowBuffers;
    api->GetActiveID = igGetActiveID;
    api->GetBackgroundDrawListNil = igGetBackgroundDrawListNil;
    api->GetBackgroundDrawListViewportPtr = igGetBackgroundDrawListViewportPtr;
    api->GetClipboardText = igGetClipboardText;
    api->GetColorU32Col = igGetColorU32Col;
    api->GetColorU32U32 = igGetColorU32U32;
    api->GetColorU32Vec4 = igGetColorU32Vec4;
    api->GetColumnIndex = igGetColumnIndex;
    api->GetColumnNormFromOffset = igGetColumnNormFromOffset;
    api->GetColumnOffset = igGetColumnOffset;
    api->GetColumnOffsetFromNorm = igGetColumnOffsetFromNorm;
    api->GetColumnWidth = igGetColumnWidth;
    api->GetColumnsCount = igGetColumnsCount;
    api->GetColumnsID = igGetColumnsID;
    api->GetContentRegionAvail = igGetContentRegionAvail;
    api->GetContentRegionMax = igGetContentRegionMax;
    api->GetContentRegionMaxAbs = igGetContentRegionMaxAbs;
    api->GetCurrentContext = igGetCurrentContext;
    api->GetCurrentWindow = igGetCurrentWindow;
    api->GetCurrentWindowRead = igGetCurrentWindowRead;
    api->GetCursorPos = igGetCursorPos;
    api->GetCursorPosX = igGetCursorPosX;
    api->GetCursorPosY = igGetCursorPosY;
    api->GetCursorScreenPos = igGetCursorScreenPos;
    api->GetCursorStartPos = igGetCursorStartPos;
    api->GetDefaultFont = igGetDefaultFont;
    api->GetDragDropPayload = igGetDragDropPayload;
    api->GetDrawData = igGetDrawData;
    api->GetDrawListSharedData = igGetDrawListSharedData;
    api->GetFocusID = igGetFocusID;
    api->GetFocusScope = igGetFocusScope;
    api->GetFocusedFocusScope = igGetFocusedFocusScope;
    api->GetFont = igGetFont;
    api->GetFontSize = igGetFontSize;
    api->GetFontTexUvWhitePixel = igGetFontTexUvWhitePixel;
    api->GetForegroundDrawListNil = igGetForegroundDrawListNil;
    api->GetForegroundDrawListViewportPtr = igGetForegroundDrawListViewportPtr;
    api->GetForegroundDrawListWindowPtr = igGetForegroundDrawListWindowPtr;
    api->GetFrameCount = igGetFrameCount;
    api->GetFrameHeight = igGetFrameHeight;
    api->GetFrameHeightWithSpacing = igGetFrameHeightWithSpacing;
    api->GetHoveredID = igGetHoveredID;
    api->GetIDPtr = igGetIDPtr;
    api->GetIDStr = igGetIDStr;
    api->GetIDStrStr = igGetIDStrStr;
    api->GetIDWithSeed = igGetIDWithSeed;
    api->GetIO = igGetIO;
    api->GetInputTextState = igGetInputTextState;
    api->GetItemID = igGetItemID;
    api->GetItemRectMax = igGetItemRectMax;
    api->GetItemRectMin = igGetItemRectMin;
    api->GetItemRectSize = igGetItemRectSize;
    api->GetItemStatusFlags = igGetItemStatusFlags;
    api->GetItemsFlags = igGetItemsFlags;
    api->GetKeyIndex = igGetKeyIndex;
    api->GetKeyPressedAmount = igGetKeyPressedAmount;
    api->GetMainViewport = igGetMainViewport;
    api->GetMergedKeyModFlags = igGetMergedKeyModFlags;
    api->GetMouseCursor = igGetMouseCursor;
    api->GetMouseDragDelta = igGetMouseDragDelta;
    api->GetMousePos = igGetMousePos;
    api->GetMousePosOnOpeningCurrentPopup = igGetMousePosOnOpeningCurrentPopup;
    api->GetNavInputAmount = igGetNavInputAmount;
    api->GetNavInputAmount2d = igGetNavInputAmount2d;
    api->GetPlatformIO = igGetPlatformIO;
    api->GetScrollMaxX = igGetScrollMaxX;
    api->GetScrollMaxY = igGetScrollMaxY;
    api->GetScrollX = igGetScrollX;
    api->GetScrollY = igGetScrollY;
    api->GetStateStorage = igGetStateStorage;
    api->GetStyle = igGetStyle;
    api->GetStyleColorName = igGetStyleColorName;
    api->GetStyleColorVec4 = igGetStyleColorVec4;
    api->GetTextLineHeight = igGetTextLineHeight;
    api->GetTextLineHeightWithSpacing = igGetTextLineHeightWithSpacing;
    api->GetTime = igGetTime;
    api->GetTopMostPopupModal = igGetTopMostPopupModal;
    api->GetTreeNodeToLabelSpacing = igGetTreeNodeToLabelSpacing;
    api->GetVersion = igGetVersion;
    api->GetWindowAllowedExtentRect = igGetWindowAllowedExtentRect;
    api->GetWindowAlwaysWantOwnTabBar = igGetWindowAlwaysWantOwnTabBar;
    api->GetWindowContentRegionMax = igGetWindowContentRegionMax;
    api->GetWindowContentRegionMin = igGetWindowContentRegionMin;
    api->GetWindowContentRegionWidth = igGetWindowContentRegionWidth;
    api->GetWindowDockID = igGetWindowDockID;
    api->GetWindowDockNode = igGetWindowDockNode;
    api->GetWindowDpiScale = igGetWindowDpiScale;
    api->GetWindowDrawList = igGetWindowDrawList;
    api->GetWindowHeight = igGetWindowHeight;
    api->GetWindowPos = igGetWindowPos;
    api->GetWindowResizeID = igGetWindowResizeID;
    api->GetWindowScrollbarID = igGetWindowScrollbarID;
    api->GetWindowScrollbarRect = igGetWindowScrollbarRect;
    api->GetWindowSize = igGetWindowSize;
    api->GetWindowViewport = igGetWindowViewport;
    api->GetWindowWidth = igGetWindowWidth;
    api->ImAbsFloat = igImAbsFloat;
    api->ImAbsdouble = igImAbsdouble;
    api->ImAlphaBlendColors = igImAlphaBlendColors;
    api->ImBezierCubicCalc = igImBezierCubicCalc;
    api->ImBezierCubicClosestPoint = igImBezierCubicClosestPoint;
    api->ImBezierCubicClosestPointCasteljau = igImBezierCubicClosestPointCasteljau;
    api->ImBezierQuadraticCalc = igImBezierQuadraticCalc;
    api->ImBitArrayClearBit = igImBitArrayClearBit;
    api->ImBitArraySetBit = igImBitArraySetBit;
    api->ImBitArraySetBitRange = igImBitArraySetBitRange;
    api->ImBitArrayTestBit = igImBitArrayTestBit;
    api->ImCharIsBlankA = igImCharIsBlankA;
    api->ImCharIsBlankW = igImCharIsBlankW;
    api->ImClamp = igImClamp;
    api->ImDot = igImDot;
    api->ImFileClose = igImFileClose;
    api->ImFileGetSize = igImFileGetSize;
    api->ImFileLoadToMemory = igImFileLoadToMemory;
    api->ImFileOpen = igImFileOpen;
    api->ImFileRead = igImFileRead;
    api->ImFileWrite = igImFileWrite;
    api->ImFloorFloat = igImFloorFloat;
    api->ImFloorVec2 = igImFloorVec2;
    api->ImFontAtlasBuildFinish = igImFontAtlasBuildFinish;
    api->ImFontAtlasBuildInit = igImFontAtlasBuildInit;
    api->ImFontAtlasBuildMultiplyCalcLookupTable = igImFontAtlasBuildMultiplyCalcLookupTable;
    api->ImFontAtlasBuildMultiplyRectAlpha8 = igImFontAtlasBuildMultiplyRectAlpha8;
    api->ImFontAtlasBuildPackCustomRects = igImFontAtlasBuildPackCustomRects;
    api->ImFontAtlasBuildRender1bppRectFromString = igImFontAtlasBuildRender1bppRectFromString;
    api->ImFontAtlasBuildSetupFont = igImFontAtlasBuildSetupFont;
    api->ImFontAtlasBuildWithStbTruetype = igImFontAtlasBuildWithStbTruetype;
    api->ImFormatString = igImFormatString;
    api->ImFormatStringV = igImFormatStringV;
    api->ImGetDirQuadrantFromDelta = igImGetDirQuadrantFromDelta;
    api->ImHashData = igImHashData;
    api->ImHashStr = igImHashStr;
    api->ImInvLength = igImInvLength;
    api->ImIsPowerOfTwoInt = igImIsPowerOfTwoInt;
    api->ImIsPowerOfTwoU64 = igImIsPowerOfTwoU64;
    api->ImLengthSqrVec2 = igImLengthSqrVec2;
    api->ImLengthSqrVec4 = igImLengthSqrVec4;
    api->ImLerpVec2Float = igImLerpVec2Float;
    api->ImLerpVec2Vec2 = igImLerpVec2Vec2;
    api->ImLerpVec4 = igImLerpVec4;
    api->ImLineClosestPoint = igImLineClosestPoint;
    api->ImLinearSweep = igImLinearSweep;
    api->ImLogFloat = igImLogFloat;
    api->ImLogdouble = igImLogdouble;
    api->ImMax = igImMax;
    api->ImMin = igImMin;
    api->ImModPositive = igImModPositive;
    api->ImMul = igImMul;
    api->ImParseFormatFindEnd = igImParseFormatFindEnd;
    api->ImParseFormatFindStart = igImParseFormatFindStart;
    api->ImParseFormatPrecision = igImParseFormatPrecision;
    api->ImParseFormatTrimDecorations = igImParseFormatTrimDecorations;
    api->ImPowFloat = igImPowFloat;
    api->ImPowdouble = igImPowdouble;
    api->ImRotate = igImRotate;
    api->ImSaturate = igImSaturate;
    api->ImSignFloat = igImSignFloat;
    api->ImSigndouble = igImSigndouble;
    api->ImStrSkipBlank = igImStrSkipBlank;
    api->ImStrTrimBlanks = igImStrTrimBlanks;
    api->ImStrbolW = igImStrbolW;
    api->ImStrchrRange = igImStrchrRange;
    api->ImStrdup = igImStrdup;
    api->ImStrdupcpy = igImStrdupcpy;
    api->ImStreolRange = igImStreolRange;
    api->ImStricmp = igImStricmp;
    api->ImStristr = igImStristr;
    api->ImStrlenW = igImStrlenW;
    api->ImStrncpy = igImStrncpy;
    api->ImStrnicmp = igImStrnicmp;
    api->ImTextCharFromUtf8 = igImTextCharFromUtf8;
    api->ImTextCountCharsFromUtf8 = igImTextCountCharsFromUtf8;
    api->ImTextCountUtf8BytesFromChar = igImTextCountUtf8BytesFromChar;
    api->ImTextCountUtf8BytesFromStr = igImTextCountUtf8BytesFromStr;
    api->ImTextStrFromUtf8 = igImTextStrFromUtf8;
    api->ImTextStrToUtf8 = igImTextStrToUtf8;
    api->ImTriangleArea = igImTriangleArea;
    api->ImTriangleBarycentricCoords = igImTriangleBarycentricCoords;
    api->ImTriangleClosestPoint = igImTriangleClosestPoint;
    api->ImTriangleContainsPoint = igImTriangleContainsPoint;
    api->ImUpperPowerOfTwo = igImUpperPowerOfTwo;
    api->Image = igImage;
    api->ImageButton = igImageButton;
    api->ImageButtonEx = igImageButtonEx;
    api->Indent = igIndent;
    api->Initialize = igInitialize;
    api->InputDouble = igInputDouble;
    api->InputFloat = igInputFloat;
    api->InputFloat2 = igInputFloat2;
    api->InputFloat3 = igInputFloat3;
    api->InputFloat4 = igInputFloat4;
    api->InputInt = igInputInt;
    api->InputInt2 = igInputInt2;
    api->InputInt3 = igInputInt3;
    api->InputInt4 = igInputInt4;
    api->InputScalar = igInputScalar;
    api->InputScalarN = igInputScalarN;
    api->InputText = igInputText;
    api->InputTextEx = igInputTextEx;
    api->InputTextMultiline = igInputTextMultiline;
    api->InputTextWithHint = igInputTextWithHint;
    api->InvisibleButton = igInvisibleButton;
    api->IsActiveIdUsingKey = igIsActiveIdUsingKey;
    api->IsActiveIdUsingNavDir = igIsActiveIdUsingNavDir;
    api->IsActiveIdUsingNavInput = igIsActiveIdUsingNavInput;
    api->IsAnyItemActive = igIsAnyItemActive;
    api->IsAnyItemFocused = igIsAnyItemFocused;
    api->IsAnyItemHovered = igIsAnyItemHovered;
    api->IsAnyMouseDown = igIsAnyMouseDown;
    api->IsClippedEx = igIsClippedEx;
    api->IsDragDropPayloadBeingAccepted = igIsDragDropPayloadBeingAccepted;
    api->IsItemActivated = igIsItemActivated;
    api->IsItemActive = igIsItemActive;
    api->IsItemClicked = igIsItemClicked;
    api->IsItemDeactivated = igIsItemDeactivated;
    api->IsItemDeactivatedAfterEdit = igIsItemDeactivatedAfterEdit;
    api->IsItemEdited = igIsItemEdited;
    api->IsItemFocused = igIsItemFocused;
    api->IsItemHovered = igIsItemHovered;
    api->IsItemToggledOpen = igIsItemToggledOpen;
    api->IsItemToggledSelection = igIsItemToggledSelection;
    api->IsItemVisible = igIsItemVisible;
    api->IsKeyDown = igIsKeyDown;
    api->IsKeyPressed = igIsKeyPressed;
    api->IsKeyPressedMap = igIsKeyPressedMap;
    api->IsKeyReleased = igIsKeyReleased;
    api->IsMouseClicked = igIsMouseClicked;
    api->IsMouseDoubleClicked = igIsMouseDoubleClicked;
    api->IsMouseDown = igIsMouseDown;
    api->IsMouseDragPastThreshold = igIsMouseDragPastThreshold;
    api->IsMouseDragging = igIsMouseDragging;
    api->IsMouseHoveringRect = igIsMouseHoveringRect;
    api->IsMousePosValid = igIsMousePosValid;
    api->IsMouseReleased = igIsMouseReleased;
    api->IsNavInputDown = igIsNavInputDown;
    api->IsNavInputTest = igIsNavInputTest;
    api->IsPopupOpenID = igIsPopupOpenID;
    api->IsPopupOpenStr = igIsPopupOpenStr;
    api->IsRectVisibleNil = igIsRectVisibleNil;
    api->IsRectVisibleVec2 = igIsRectVisibleVec2;
    api->IsWindowAbove = igIsWindowAbove;
    api->IsWindowAppearing = igIsWindowAppearing;
    api->IsWindowChildOf = igIsWindowChildOf;
    api->IsWindowCollapsed = igIsWindowCollapsed;
    api->IsWindowDocked = igIsWindowDocked;
    api->IsWindowFocused = igIsWindowFocused;
    api->IsWindowHovered = igIsWindowHovered;
    api->IsWindowNavFocusable = igIsWindowNavFocusable;
    api->ItemAdd = igItemAdd;
    api->ItemHoverable = igItemHoverable;
    api->ItemSizeRect = igItemSizeRect;
    api->ItemSizeVec2 = igItemSizeVec2;
    api->KeepAliveID = igKeepAliveID;
    api->LabelText = igLabelText;
    api->LabelTextV = igLabelTextV;
    api->ListBoxFnBoolPtr = igListBoxFnBoolPtr;
    api->ListBoxFooter = igListBoxFooter;
    api->ListBoxHeaderInt = igListBoxHeaderInt;
    api->ListBoxHeaderVec2 = igListBoxHeaderVec2;
    api->ListBoxStr_arr = igListBoxStr_arr;
    api->LoadIniSettingsFromDisk = igLoadIniSettingsFromDisk;
    api->LoadIniSettingsFromMemory = igLoadIniSettingsFromMemory;
    api->LogBegin = igLogBegin;
    api->LogButtons = igLogButtons;
    api->LogFinish = igLogFinish;
    api->LogRenderedText = igLogRenderedText;
    api->LogText = igLogText;
    api->LogToBuffer = igLogToBuffer;
    api->LogToClipboard = igLogToClipboard;
    api->LogToFile = igLogToFile;
    api->LogToTTY = igLogToTTY;
    api->MarkIniSettingsDirtyNil = igMarkIniSettingsDirtyNil;
    api->MarkIniSettingsDirtyWindowPtr = igMarkIniSettingsDirtyWindowPtr;
    api->MarkItemEdited = igMarkItemEdited;
    api->MemAlloc = igMemAlloc;
    api->MemFree = igMemFree;
    api->MenuItemBool = igMenuItemBool;
    api->MenuItemBoolPtr = igMenuItemBoolPtr;
    api->NavInitWindow = igNavInitWindow;
    api->NavMoveRequestButNoResultYet = igNavMoveRequestButNoResultYet;
    api->NavMoveRequestCancel = igNavMoveRequestCancel;
    api->NavMoveRequestForward = igNavMoveRequestForward;
    api->NavMoveRequestTryWrapping = igNavMoveRequestTryWrapping;
    api->NewFrame = igNewFrame;
    api->NewLine = igNewLine;
    api->NextColumn = igNextColumn;
    api->OpenPopup = igOpenPopup;
    api->OpenPopupEx = igOpenPopupEx;
    api->OpenPopupOnItemClick = igOpenPopupOnItemClick;
    api->PlotEx = igPlotEx;
    api->PlotHistogramFloatPtr = igPlotHistogramFloatPtr;
    api->PlotHistogramFnFloatPtr = igPlotHistogramFnFloatPtr;
    api->PlotLinesFloatPtr = igPlotLinesFloatPtr;
    api->PlotLinesFnFloatPtr = igPlotLinesFnFloatPtr;
    api->PopAllowKeyboardFocus = igPopAllowKeyboardFocus;
    api->PopButtonRepeat = igPopButtonRepeat;
    api->PopClipRect = igPopClipRect;
    api->PopColumnsBackground = igPopColumnsBackground;
    api->PopFocusScope = igPopFocusScope;
    api->PopFont = igPopFont;
    api->PopID = igPopID;
    api->PopItemFlag = igPopItemFlag;
    api->PopItemWidth = igPopItemWidth;
    api->PopStyleColor = igPopStyleColor;
    api->PopStyleVar = igPopStyleVar;
    api->PopTextWrapPos = igPopTextWrapPos;
    api->ProgressBar = igProgressBar;
    api->PushAllowKeyboardFocus = igPushAllowKeyboardFocus;
    api->PushButtonRepeat = igPushButtonRepeat;
    api->PushClipRect = igPushClipRect;
    api->PushColumnClipRect = igPushColumnClipRect;
    api->PushColumnsBackground = igPushColumnsBackground;
    api->PushFocusScope = igPushFocusScope;
    api->PushFont = igPushFont;
    api->PushIDInt = igPushIDInt;
    api->PushIDPtr = igPushIDPtr;
    api->PushIDStr = igPushIDStr;
    api->PushIDStrStr = igPushIDStrStr;
    api->PushItemFlag = igPushItemFlag;
    api->PushItemWidth = igPushItemWidth;
    api->PushMultiItemsWidths = igPushMultiItemsWidths;
    api->PushOverrideID = igPushOverrideID;
    api->PushStyleColorU32 = igPushStyleColorU32;
    api->PushStyleColorVec4 = igPushStyleColorVec4;
    api->PushStyleVarFloat = igPushStyleVarFloat;
    api->PushStyleVarVec2 = igPushStyleVarVec2;
    api->PushTextWrapPos = igPushTextWrapPos;
    api->RadioButtonBool = igRadioButtonBool;
    api->RadioButtonIntPtr = igRadioButtonIntPtr;
    api->Render = igRender;
    api->RenderArrow = igRenderArrow;
    api->RenderArrowDockMenu = igRenderArrowDockMenu;
    api->RenderArrowPointingAt = igRenderArrowPointingAt;
    api->RenderBullet = igRenderBullet;
    api->RenderCheckMark = igRenderCheckMark;
    api->RenderColorRectWithAlphaCheckerboard = igRenderColorRectWithAlphaCheckerboard;
    api->RenderFrame = igRenderFrame;
    api->RenderFrameBorder = igRenderFrameBorder;
    api->RenderMouseCursor = igRenderMouseCursor;
    api->RenderNavHighlight = igRenderNavHighlight;
    api->RenderPlatformWindowsDefault = igRenderPlatformWindowsDefault;
    api->RenderRectFilledRangeH = igRenderRectFilledRangeH;
    api->RenderRectFilledWithHole = igRenderRectFilledWithHole;
    api->RenderText = igRenderText;
    api->RenderTextClipped = igRenderTextClipped;
    api->RenderTextClippedEx = igRenderTextClippedEx;
    api->RenderTextEllipsis = igRenderTextEllipsis;
    api->RenderTextWrapped = igRenderTextWrapped;
    api->ResetMouseDragDelta = igResetMouseDragDelta;
    api->SameLine = igSameLine;
    api->SaveIniSettingsToDisk = igSaveIniSettingsToDisk;
    api->SaveIniSettingsToMemory = igSaveIniSettingsToMemory;
    api->ScaleWindowsInViewport = igScaleWindowsInViewport;
    api->ScrollToBringRectIntoView = igScrollToBringRectIntoView;
    api->Scrollbar = igScrollbar;
    api->ScrollbarEx = igScrollbarEx;
    api->SelectableBool = igSelectableBool;
    api->SelectableBoolPtr = igSelectableBoolPtr;
    api->Separator = igSeparator;
    api->SeparatorEx = igSeparatorEx;
    api->SetActiveID = igSetActiveID;
    api->SetAllocatorFunctions = igSetAllocatorFunctions;
    api->SetClipboardText = igSetClipboardText;
    api->SetColorEditOptions = igSetColorEditOptions;
    api->SetColumnOffset = igSetColumnOffset;
    api->SetColumnWidth = igSetColumnWidth;
    api->SetCurrentContext = igSetCurrentContext;
    api->SetCurrentFont = igSetCurrentFont;
    api->SetCursorPos = igSetCursorPos;
    api->SetCursorPosX = igSetCursorPosX;
    api->SetCursorPosY = igSetCursorPosY;
    api->SetCursorScreenPos = igSetCursorScreenPos;
    api->SetDragDropPayload = igSetDragDropPayload;
    api->SetFocusID = igSetFocusID;
    api->SetHoveredID = igSetHoveredID;
    api->SetItemAllowOverlap = igSetItemAllowOverlap;
    api->SetItemDefaultFocus = igSetItemDefaultFocus;
    api->SetItemUsingMouseWheel = igSetItemUsingMouseWheel;
    api->SetKeyboardFocusHere = igSetKeyboardFocusHere;
    api->SetLastItemData = igSetLastItemData;
    api->SetMouseCursor = igSetMouseCursor;
    api->SetNavID = igSetNavID;
    api->SetNavIDWithRectRel = igSetNavIDWithRectRel;
    api->SetNextItemOpen = igSetNextItemOpen;
    api->SetNextItemWidth = igSetNextItemWidth;
    api->SetNextWindowBgAlpha = igSetNextWindowBgAlpha;
    api->SetNextWindowClass = igSetNextWindowClass;
    api->SetNextWindowCollapsed = igSetNextWindowCollapsed;
    api->SetNextWindowContentSize = igSetNextWindowContentSize;
    api->SetNextWindowDockID = igSetNextWindowDockID;
    api->SetNextWindowFocus = igSetNextWindowFocus;
    api->SetNextWindowPos = igSetNextWindowPos;
    api->SetNextWindowScroll = igSetNextWindowScroll;
    api->SetNextWindowSize = igSetNextWindowSize;
    api->SetNextWindowSizeConstraints = igSetNextWindowSizeConstraints;
    api->SetNextWindowViewport = igSetNextWindowViewport;
    api->SetScrollFromPosXFloat = igSetScrollFromPosXFloat;
    api->SetScrollFromPosXWindowPtr = igSetScrollFromPosXWindowPtr;
    api->SetScrollFromPosYFloat = igSetScrollFromPosYFloat;
    api->SetScrollFromPosYWindowPtr = igSetScrollFromPosYWindowPtr;
    api->SetScrollHereX = igSetScrollHereX;
    api->SetScrollHereY = igSetScrollHereY;
    api->SetScrollXFloat = igSetScrollXFloat;
    api->SetScrollXWindowPtr = igSetScrollXWindowPtr;
    api->SetScrollYFloat = igSetScrollYFloat;
    api->SetScrollYWindowPtr = igSetScrollYWindowPtr;
    api->SetStateStorage = igSetStateStorage;
    api->SetTabItemClosed = igSetTabItemClosed;
    api->SetTooltip = igSetTooltip;
    api->SetTooltipV = igSetTooltipV;
    api->SetWindowClipRectBeforeSetChannel = igSetWindowClipRectBeforeSetChannel;
    api->SetWindowCollapsedBool = igSetWindowCollapsedBool;
    api->SetWindowCollapsedStr = igSetWindowCollapsedStr;
    api->SetWindowCollapsedWindowPtr = igSetWindowCollapsedWindowPtr;
    api->SetWindowDock = igSetWindowDock;
    api->SetWindowFocusNil = igSetWindowFocusNil;
    api->SetWindowFocusStr = igSetWindowFocusStr;
    api->SetWindowFontScale = igSetWindowFontScale;
    api->SetWindowHitTestHole = igSetWindowHitTestHole;
    api->SetWindowPosStr = igSetWindowPosStr;
    api->SetWindowPosVec2 = igSetWindowPosVec2;
    api->SetWindowPosWindowPtr = igSetWindowPosWindowPtr;
    api->SetWindowSizeStr = igSetWindowSizeStr;
    api->SetWindowSizeVec2 = igSetWindowSizeVec2;
    api->SetWindowSizeWindowPtr = igSetWindowSizeWindowPtr;
    api->ShadeVertsLinearColorGradientKeepAlpha = igShadeVertsLinearColorGradientKeepAlpha;
    api->ShadeVertsLinearUV = igShadeVertsLinearUV;
    api->ShowAboutWindow = igShowAboutWindow;
    api->ShowDemoWindow = igShowDemoWindow;
    api->ShowFontSelector = igShowFontSelector;
    api->ShowMetricsWindow = igShowMetricsWindow;
    api->ShowStyleEditor = igShowStyleEditor;
    api->ShowStyleSelector = igShowStyleSelector;
    api->ShowUserGuide = igShowUserGuide;
    api->ShrinkWidths = igShrinkWidths;
    api->Shutdown = igShutdown;
    api->SliderAngle = igSliderAngle;
    api->SliderBehavior = igSliderBehavior;
    api->SliderFloat = igSliderFloat;
    api->SliderFloat2 = igSliderFloat2;
    api->SliderFloat3 = igSliderFloat3;
    api->SliderFloat4 = igSliderFloat4;
    api->SliderInt = igSliderInt;
    api->SliderInt2 = igSliderInt2;
    api->SliderInt3 = igSliderInt3;
    api->SliderInt4 = igSliderInt4;
    api->SliderScalar = igSliderScalar;
    api->SliderScalarN = igSliderScalarN;
    api->SmallButton = igSmallButton;
    api->Spacing = igSpacing;
    api->SplitterBehavior = igSplitterBehavior;
    api->StartMouseMovingWindow = igStartMouseMovingWindow;
    api->StartMouseMovingWindowOrNode = igStartMouseMovingWindowOrNode;
    api->StyleColorsClassic = igStyleColorsClassic;
    api->StyleColorsDark = igStyleColorsDark;
    api->StyleColorsLight = igStyleColorsLight;
    api->TabBarAddTab = igTabBarAddTab;
    api->TabBarCloseTab = igTabBarCloseTab;
    api->TabBarFindMostRecentlySelectedTabForActiveWindow = igTabBarFindMostRecentlySelectedTabForActiveWindow;
    api->TabBarFindTabByID = igTabBarFindTabByID;
    api->TabBarProcessReorder = igTabBarProcessReorder;
    api->TabBarQueueReorder = igTabBarQueueReorder;
    api->TabBarRemoveTab = igTabBarRemoveTab;
    api->TabItemBackground = igTabItemBackground;
    api->TabItemButton = igTabItemButton;
    api->TabItemCalcSize = igTabItemCalcSize;
    api->TabItemEx = igTabItemEx;
    api->TabItemLabelAndCloseButton = igTabItemLabelAndCloseButton;
    api->TableBeginApplyRequests = igTableBeginApplyRequests;
    api->TableBeginCell = igTableBeginCell;
    api->TableBeginInitMemory = igTableBeginInitMemory;
    api->TableBeginRow = igTableBeginRow;
    api->TableDrawBorders = igTableDrawBorders;
    api->TableDrawContextMenu = igTableDrawContextMenu;
    api->TableEndCell = igTableEndCell;
    api->TableEndRow = igTableEndRow;
    api->TableFindByID = igTableFindByID;
    api->TableFixColumnSortDirection = igTableFixColumnSortDirection;
    api->TableGcCompactSettings = igTableGcCompactSettings;
    api->TableGcCompactTransientBuffers = igTableGcCompactTransientBuffers;
    api->TableGetBoundSettings = igTableGetBoundSettings;
    api->TableGetCellBgRect = igTableGetCellBgRect;
    api->TableGetColumnCount = igTableGetColumnCount;
    api->TableGetColumnFlags = igTableGetColumnFlags;
    api->TableGetColumnIndex = igTableGetColumnIndex;
    api->TableGetColumnNameInt = igTableGetColumnNameInt;
    api->TableGetColumnNameTablePtr = igTableGetColumnNameTablePtr;
    api->TableGetColumnNextSortDirection = igTableGetColumnNextSortDirection;
    api->TableGetColumnResizeID = igTableGetColumnResizeID;
    api->TableGetColumnWidthAuto = igTableGetColumnWidthAuto;
    api->TableGetHeaderRowHeight = igTableGetHeaderRowHeight;
    api->TableGetHoveredColumn = igTableGetHoveredColumn;
    api->TableGetMaxColumnWidth = igTableGetMaxColumnWidth;
    api->TableGetRowIndex = igTableGetRowIndex;
    api->TableGetSortSpecs = igTableGetSortSpecs;
    api->TableHeader = igTableHeader;
    api->TableHeadersRow = igTableHeadersRow;
    api->TableLoadSettings = igTableLoadSettings;
    api->TableMergeDrawChannels = igTableMergeDrawChannels;
    api->TableNextColumn = igTableNextColumn;
    api->TableNextRow = igTableNextRow;
    api->TableOpenContextMenu = igTableOpenContextMenu;
    api->TablePopBackgroundChannel = igTablePopBackgroundChannel;
    api->TablePushBackgroundChannel = igTablePushBackgroundChannel;
    api->TableRemove = igTableRemove;
    api->TableResetSettings = igTableResetSettings;
    api->TableSaveSettings = igTableSaveSettings;
    api->TableSetBgColor = igTableSetBgColor;
    api->TableSetColumnIndex = igTableSetColumnIndex;
    api->TableSetColumnSortDirection = igTableSetColumnSortDirection;
    api->TableSetColumnWidth = igTableSetColumnWidth;
    api->TableSetColumnWidthAutoAll = igTableSetColumnWidthAutoAll;
    api->TableSetColumnWidthAutoSingle = igTableSetColumnWidthAutoSingle;
    api->TableSettingsCreate = igTableSettingsCreate;
    api->TableSettingsFindByID = igTableSettingsFindByID;
    api->TableSettingsInstallHandler = igTableSettingsInstallHandler;
    api->TableSetupColumn = igTableSetupColumn;
    api->TableSetupDrawChannels = igTableSetupDrawChannels;
    api->TableSetupScrollFreeze = igTableSetupScrollFreeze;
    api->TableSortSpecsBuild = igTableSortSpecsBuild;
    api->TableSortSpecsSanitize = igTableSortSpecsSanitize;
    api->TableUpdateBorders = igTableUpdateBorders;
    api->TableUpdateColumnsWeightFromWidth = igTableUpdateColumnsWeightFromWidth;
    api->TableUpdateLayout = igTableUpdateLayout;
    api->TempInputIsActive = igTempInputIsActive;
    api->TempInputScalar = igTempInputScalar;
    api->TempInputText = igTempInputText;
    api->Text = igText;
    api->TextColored = igTextColored;
    api->TextColoredV = igTextColoredV;
    api->TextDisabled = igTextDisabled;
    api->TextDisabledV = igTextDisabledV;
    api->TextEx = igTextEx;
    api->TextUnformatted = igTextUnformatted;
    api->TextV = igTextV;
    api->TextWrapped = igTextWrapped;
    api->TextWrappedV = igTextWrappedV;
    api->TranslateWindowsInViewport = igTranslateWindowsInViewport;
    api->TreeNodeBehavior = igTreeNodeBehavior;
    api->TreeNodeBehaviorIsOpen = igTreeNodeBehaviorIsOpen;
    api->TreeNodeExPtr = igTreeNodeExPtr;
    api->TreeNodeExStr = igTreeNodeExStr;
    api->TreeNodeExStrStr = igTreeNodeExStrStr;
    api->TreeNodeExVPtr = igTreeNodeExVPtr;
    api->TreeNodeExVStr = igTreeNodeExVStr;
    api->TreeNodePtr = igTreeNodePtr;
    api->TreeNodeStr = igTreeNodeStr;
    api->TreeNodeStrStr = igTreeNodeStrStr;
    api->TreeNodeVPtr = igTreeNodeVPtr;
    api->TreeNodeVStr = igTreeNodeVStr;
    api->TreePop = igTreePop;
    api->TreePushOverrideID = igTreePushOverrideID;
    api->TreePushPtr = igTreePushPtr;
    api->TreePushStr = igTreePushStr;
    api->Unindent = igUnindent;
    api->UpdateHoveredWindowAndCaptureFlags = igUpdateHoveredWindowAndCaptureFlags;
    api->UpdateMouseMovingWindowEndFrame = igUpdateMouseMovingWindowEndFrame;
    api->UpdateMouseMovingWindowNewFrame = igUpdateMouseMovingWindowNewFrame;
    api->UpdatePlatformWindows = igUpdatePlatformWindows;
    api->UpdateWindowParentAndRootLinks = igUpdateWindowParentAndRootLinks;
    api->VSliderFloat = igVSliderFloat;
    api->VSliderInt = igVSliderInt;
    api->VSliderScalar = igVSliderScalar;
    api->ValueBool = igValueBool;
    api->ValueFloat = igValueFloat;
    api->ValueInt = igValueInt;
    api->ValueUint = igValueUint;
} // bee_load_imgui_api
#endif // BEE_IMGUI_GENERATOR_IMPLEMENTATION
